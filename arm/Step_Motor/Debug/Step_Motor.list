
Step_Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035b4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800374c  0800374c  0001374c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003868  08003868  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003868  08003868  00013868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003870  08003870  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003870  08003870  00013870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003874  08003874  00013874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  2000005c  080038d4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  080038d4  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000da88  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022a4  00000000  00000000  0002db57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  0002fe00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009cd  00000000  00000000  00030a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000169cb  00000000  00000000  00031465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010150  00000000  00000000  00047e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d358  00000000  00000000  00057f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003590  00000000  00000000  000e52d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  000e8868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003734 	.word	0x08003734

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	08003734 	.word	0x08003734

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b970 	b.w	80004e0 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	460d      	mov	r5, r1
 8000220:	4604      	mov	r4, r0
 8000222:	460f      	mov	r7, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14a      	bne.n	80002be <__udivmoddi4+0xa6>
 8000228:	428a      	cmp	r2, r1
 800022a:	4694      	mov	ip, r2
 800022c:	d965      	bls.n	80002fa <__udivmoddi4+0xe2>
 800022e:	fab2 f382 	clz	r3, r2
 8000232:	b143      	cbz	r3, 8000246 <__udivmoddi4+0x2e>
 8000234:	fa02 fc03 	lsl.w	ip, r2, r3
 8000238:	f1c3 0220 	rsb	r2, r3, #32
 800023c:	409f      	lsls	r7, r3
 800023e:	fa20 f202 	lsr.w	r2, r0, r2
 8000242:	4317      	orrs	r7, r2
 8000244:	409c      	lsls	r4, r3
 8000246:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024a:	fa1f f58c 	uxth.w	r5, ip
 800024e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000252:	0c22      	lsrs	r2, r4, #16
 8000254:	fb0e 7711 	mls	r7, lr, r1, r7
 8000258:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800025c:	fb01 f005 	mul.w	r0, r1, r5
 8000260:	4290      	cmp	r0, r2
 8000262:	d90a      	bls.n	800027a <__udivmoddi4+0x62>
 8000264:	eb1c 0202 	adds.w	r2, ip, r2
 8000268:	f101 37ff 	add.w	r7, r1, #4294967295
 800026c:	f080 811c 	bcs.w	80004a8 <__udivmoddi4+0x290>
 8000270:	4290      	cmp	r0, r2
 8000272:	f240 8119 	bls.w	80004a8 <__udivmoddi4+0x290>
 8000276:	3902      	subs	r1, #2
 8000278:	4462      	add	r2, ip
 800027a:	1a12      	subs	r2, r2, r0
 800027c:	b2a4      	uxth	r4, r4
 800027e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000282:	fb0e 2210 	mls	r2, lr, r0, r2
 8000286:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028a:	fb00 f505 	mul.w	r5, r0, r5
 800028e:	42a5      	cmp	r5, r4
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x90>
 8000292:	eb1c 0404 	adds.w	r4, ip, r4
 8000296:	f100 32ff 	add.w	r2, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x294>
 800029e:	42a5      	cmp	r5, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x294>
 80002a4:	4464      	add	r4, ip
 80002a6:	3802      	subs	r0, #2
 80002a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ac:	1b64      	subs	r4, r4, r5
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11e      	cbz	r6, 80002ba <__udivmoddi4+0xa2>
 80002b2:	40dc      	lsrs	r4, r3
 80002b4:	2300      	movs	r3, #0
 80002b6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0xbc>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80ed 	beq.w	80004a2 <__udivmoddi4+0x28a>
 80002c8:	2100      	movs	r1, #0
 80002ca:	e9c6 0500 	strd	r0, r5, [r6]
 80002ce:	4608      	mov	r0, r1
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	fab3 f183 	clz	r1, r3
 80002d8:	2900      	cmp	r1, #0
 80002da:	d149      	bne.n	8000370 <__udivmoddi4+0x158>
 80002dc:	42ab      	cmp	r3, r5
 80002de:	d302      	bcc.n	80002e6 <__udivmoddi4+0xce>
 80002e0:	4282      	cmp	r2, r0
 80002e2:	f200 80f8 	bhi.w	80004d6 <__udivmoddi4+0x2be>
 80002e6:	1a84      	subs	r4, r0, r2
 80002e8:	eb65 0203 	sbc.w	r2, r5, r3
 80002ec:	2001      	movs	r0, #1
 80002ee:	4617      	mov	r7, r2
 80002f0:	2e00      	cmp	r6, #0
 80002f2:	d0e2      	beq.n	80002ba <__udivmoddi4+0xa2>
 80002f4:	e9c6 4700 	strd	r4, r7, [r6]
 80002f8:	e7df      	b.n	80002ba <__udivmoddi4+0xa2>
 80002fa:	b902      	cbnz	r2, 80002fe <__udivmoddi4+0xe6>
 80002fc:	deff      	udf	#255	; 0xff
 80002fe:	fab2 f382 	clz	r3, r2
 8000302:	2b00      	cmp	r3, #0
 8000304:	f040 8090 	bne.w	8000428 <__udivmoddi4+0x210>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2101      	movs	r1, #1
 8000314:	fbb2 f5f7 	udiv	r5, r2, r7
 8000318:	fb07 2015 	mls	r0, r7, r5, r2
 800031c:	0c22      	lsrs	r2, r4, #16
 800031e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000322:	fb0e f005 	mul.w	r0, lr, r5
 8000326:	4290      	cmp	r0, r2
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x124>
 800032a:	eb1c 0202 	adds.w	r2, ip, r2
 800032e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4290      	cmp	r0, r2
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2b8>
 800033a:	4645      	mov	r5, r8
 800033c:	1a12      	subs	r2, r2, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb2 f0f7 	udiv	r0, r2, r7
 8000344:	fb07 2210 	mls	r2, r7, r0, r2
 8000348:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x14e>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 32ff 	add.w	r2, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x14c>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2c2>
 8000364:	4610      	mov	r0, r2
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800036e:	e79f      	b.n	80002b0 <__udivmoddi4+0x98>
 8000370:	f1c1 0720 	rsb	r7, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa05 f401 	lsl.w	r4, r5, r1
 8000382:	fa20 f307 	lsr.w	r3, r0, r7
 8000386:	40fd      	lsrs	r5, r7
 8000388:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038c:	4323      	orrs	r3, r4
 800038e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	fb09 5518 	mls	r5, r9, r8, r5
 800039a:	0c1c      	lsrs	r4, r3, #16
 800039c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a0:	fb08 f50e 	mul.w	r5, r8, lr
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	fa00 f001 	lsl.w	r0, r0, r1
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1c 0404 	adds.w	r4, ip, r4
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2b4>
 80003bc:	42a5      	cmp	r5, r4
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2b4>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4464      	add	r4, ip
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	b29d      	uxth	r5, r3
 80003cc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d0:	fb09 4413 	mls	r4, r9, r3, r4
 80003d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003dc:	45a6      	cmp	lr, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2ac>
 80003ea:	45a6      	cmp	lr, r4
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2ac>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	4464      	add	r4, ip
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fba3 9502 	umull	r9, r5, r3, r2
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	42ac      	cmp	r4, r5
 8000400:	46c8      	mov	r8, r9
 8000402:	46ae      	mov	lr, r5
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x29c>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x298>
 8000408:	b156      	cbz	r6, 8000420 <__udivmoddi4+0x208>
 800040a:	ebb0 0208 	subs.w	r2, r0, r8
 800040e:	eb64 040e 	sbc.w	r4, r4, lr
 8000412:	fa04 f707 	lsl.w	r7, r4, r7
 8000416:	40ca      	lsrs	r2, r1
 8000418:	40cc      	lsrs	r4, r1
 800041a:	4317      	orrs	r7, r2
 800041c:	e9c6 7400 	strd	r7, r4, [r6]
 8000420:	4618      	mov	r0, r3
 8000422:	2100      	movs	r1, #0
 8000424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000428:	f1c3 0120 	rsb	r1, r3, #32
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	fa20 f201 	lsr.w	r2, r0, r1
 8000434:	fa25 f101 	lsr.w	r1, r5, r1
 8000438:	409d      	lsls	r5, r3
 800043a:	432a      	orrs	r2, r5
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb1 f0f7 	udiv	r0, r1, r7
 8000448:	fb07 1510 	mls	r5, r7, r0, r1
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000452:	fb00 f50e 	mul.w	r5, r0, lr
 8000456:	428d      	cmp	r5, r1
 8000458:	fa04 f403 	lsl.w	r4, r4, r3
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x258>
 800045e:	eb1c 0101 	adds.w	r1, ip, r1
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 8000468:	428d      	cmp	r5, r1
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800046c:	3802      	subs	r0, #2
 800046e:	4461      	add	r1, ip
 8000470:	1b49      	subs	r1, r1, r5
 8000472:	b292      	uxth	r2, r2
 8000474:	fbb1 f5f7 	udiv	r5, r1, r7
 8000478:	fb07 1115 	mls	r1, r7, r5, r1
 800047c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000480:	fb05 f10e 	mul.w	r1, r5, lr
 8000484:	4291      	cmp	r1, r2
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x282>
 8000488:	eb1c 0202 	adds.w	r2, ip, r2
 800048c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 8000492:	4291      	cmp	r1, r2
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000496:	3d02      	subs	r5, #2
 8000498:	4462      	add	r2, ip
 800049a:	1a52      	subs	r2, r2, r1
 800049c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0xfc>
 80004a2:	4631      	mov	r1, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e708      	b.n	80002ba <__udivmoddi4+0xa2>
 80004a8:	4639      	mov	r1, r7
 80004aa:	e6e6      	b.n	800027a <__udivmoddi4+0x62>
 80004ac:	4610      	mov	r0, r2
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x90>
 80004b0:	4548      	cmp	r0, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004bc:	3b01      	subs	r3, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004c0:	4645      	mov	r5, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x282>
 80004c4:	462b      	mov	r3, r5
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x258>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004d0:	3d02      	subs	r5, #2
 80004d2:	4462      	add	r2, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x124>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e70a      	b.n	80002f0 <__udivmoddi4+0xd8>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x14e>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <delay_us>:
 */

#include "delay.h"

void delay_us(uint16_t us)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim10,0);
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <delay_us+0x30>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2200      	movs	r2, #0
 80004f4:	625a      	str	r2, [r3, #36]	; 0x24
  while((__HAL_TIM_GET_COUNTER(&htim10))<us);
 80004f6:	bf00      	nop
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <delay_us+0x30>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004fe:	88fb      	ldrh	r3, [r7, #6]
 8000500:	429a      	cmp	r2, r3
 8000502:	d3f9      	bcc.n	80004f8 <delay_us+0x14>
}
 8000504:	bf00      	nop
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	20000118 	.word	0x20000118

08000518 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	f107 030c 	add.w	r3, r7, #12
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	4b29      	ldr	r3, [pc, #164]	; (80005d8 <MX_GPIO_Init+0xc0>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	4a28      	ldr	r2, [pc, #160]	; (80005d8 <MX_GPIO_Init+0xc0>)
 8000538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800053c:	6313      	str	r3, [r2, #48]	; 0x30
 800053e:	4b26      	ldr	r3, [pc, #152]	; (80005d8 <MX_GPIO_Init+0xc0>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054a:	2300      	movs	r3, #0
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <MX_GPIO_Init+0xc0>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	4a21      	ldr	r2, [pc, #132]	; (80005d8 <MX_GPIO_Init+0xc0>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6313      	str	r3, [r2, #48]	; 0x30
 800055a:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <MX_GPIO_Init+0xc0>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	603b      	str	r3, [r7, #0]
 800056a:	4b1b      	ldr	r3, [pc, #108]	; (80005d8 <MX_GPIO_Init+0xc0>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a1a      	ldr	r2, [pc, #104]	; (80005d8 <MX_GPIO_Init+0xc0>)
 8000570:	f043 0302 	orr.w	r3, r3, #2
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <MX_GPIO_Init+0xc0>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f003 0302 	and.w	r3, r3, #2
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	21e0      	movs	r1, #224	; 0xe0
 8000586:	4815      	ldr	r0, [pc, #84]	; (80005dc <MX_GPIO_Init+0xc4>)
 8000588:	f000 ffee 	bl	8001568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	2140      	movs	r1, #64	; 0x40
 8000590:	4813      	ldr	r0, [pc, #76]	; (80005e0 <MX_GPIO_Init+0xc8>)
 8000592:	f000 ffe9 	bl	8001568 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000596:	23e0      	movs	r3, #224	; 0xe0
 8000598:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059a:	2301      	movs	r3, #1
 800059c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	4619      	mov	r1, r3
 80005ac:	480b      	ldr	r0, [pc, #44]	; (80005dc <MX_GPIO_Init+0xc4>)
 80005ae:	f000 fe57 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005b2:	2340      	movs	r3, #64	; 0x40
 80005b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b6:	2301      	movs	r3, #1
 80005b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	2300      	movs	r3, #0
 80005c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	4619      	mov	r1, r3
 80005c8:	4805      	ldr	r0, [pc, #20]	; (80005e0 <MX_GPIO_Init+0xc8>)
 80005ca:	f000 fe49 	bl	8001260 <HAL_GPIO_Init>

}
 80005ce:	bf00      	nop
 80005d0:	3720      	adds	r7, #32
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40020000 	.word	0x40020000
 80005e0:	40020400 	.word	0x40020400

080005e4 <HAL_UART_RxCpltCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

  if(rxData[0]=='\n')
 80005ec:	4b43      	ldr	r3, [pc, #268]	; (80006fc <HAL_UART_RxCpltCallback+0x118>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b0a      	cmp	r3, #10
 80005f2:	d16e      	bne.n	80006d2 <HAL_UART_RxCpltCallback+0xee>
  {
    buffer[buffer_index++]='\n';
 80005f4:	4b42      	ldr	r3, [pc, #264]	; (8000700 <HAL_UART_RxCpltCallback+0x11c>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	1c5a      	adds	r2, r3, #1
 80005fa:	b2d1      	uxtb	r1, r2
 80005fc:	4a40      	ldr	r2, [pc, #256]	; (8000700 <HAL_UART_RxCpltCallback+0x11c>)
 80005fe:	7011      	strb	r1, [r2, #0]
 8000600:	461a      	mov	r2, r3
 8000602:	4b40      	ldr	r3, [pc, #256]	; (8000704 <HAL_UART_RxCpltCallback+0x120>)
 8000604:	210a      	movs	r1, #10
 8000606:	5499      	strb	r1, [r3, r2]
    buffer[buffer_index++]='\0';
 8000608:	4b3d      	ldr	r3, [pc, #244]	; (8000700 <HAL_UART_RxCpltCallback+0x11c>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	1c5a      	adds	r2, r3, #1
 800060e:	b2d1      	uxtb	r1, r2
 8000610:	4a3b      	ldr	r2, [pc, #236]	; (8000700 <HAL_UART_RxCpltCallback+0x11c>)
 8000612:	7011      	strb	r1, [r2, #0]
 8000614:	461a      	mov	r2, r3
 8000616:	4b3b      	ldr	r3, [pc, #236]	; (8000704 <HAL_UART_RxCpltCallback+0x120>)
 8000618:	2100      	movs	r1, #0
 800061a:	5499      	strb	r1, [r3, r2]
    buffer_index=0;
 800061c:	4b38      	ldr	r3, [pc, #224]	; (8000700 <HAL_UART_RxCpltCallback+0x11c>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
    int a = atoi(buffer);
 8000622:	4838      	ldr	r0, [pc, #224]	; (8000704 <HAL_UART_RxCpltCallback+0x120>)
 8000624:	f002 ffc4 	bl	80035b0 <atoi>
 8000628:	6178      	str	r0, [r7, #20]
    if(a<0)
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	2b00      	cmp	r3, #0
 800062e:	da23      	bge.n	8000678 <HAL_UART_RxCpltCallback+0x94>
    {
      int temp = (int)((((float)a)/360 *4096)*-1);
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	ee07 3a90 	vmov	s15, r3
 8000636:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800063a:	eddf 6a33 	vldr	s13, [pc, #204]	; 8000708 <HAL_UART_RxCpltCallback+0x124>
 800063e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000642:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800070c <HAL_UART_RxCpltCallback+0x128>
 8000646:	ee67 7a87 	vmul.f32	s15, s15, s14
 800064a:	eef1 7a67 	vneg.f32	s15, s15
 800064e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000652:	ee17 3a90 	vmov	r3, s15
 8000656:	60fb      	str	r3, [r7, #12]
      for(int i=temp; i>=0; i--)
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	61fb      	str	r3, [r7, #28]
 800065c:	e008      	b.n	8000670 <HAL_UART_RxCpltCallback+0x8c>
      {
        stepMotorHalfDrive(i);
 800065e:	69f8      	ldr	r0, [r7, #28]
 8000660:	f000 f8f6 	bl	8000850 <stepMotorHalfDrive>
        stepMotorSpeed(10);
 8000664:	200a      	movs	r0, #10
 8000666:	f000 f8e2 	bl	800082e <stepMotorSpeed>
      for(int i=temp; i>=0; i--)
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	3b01      	subs	r3, #1
 800066e:	61fb      	str	r3, [r7, #28]
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	2b00      	cmp	r3, #0
 8000674:	daf3      	bge.n	800065e <HAL_UART_RxCpltCallback+0x7a>
 8000676:	e021      	b.n	80006bc <HAL_UART_RxCpltCallback+0xd8>
      }
    }
    else
    {
      int temp = (int)(((float)a)/360 *4096);
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	ee07 3a90 	vmov	s15, r3
 800067e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000682:	eddf 6a21 	vldr	s13, [pc, #132]	; 8000708 <HAL_UART_RxCpltCallback+0x124>
 8000686:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800068a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800070c <HAL_UART_RxCpltCallback+0x128>
 800068e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000692:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000696:	ee17 3a90 	vmov	r3, s15
 800069a:	613b      	str	r3, [r7, #16]
      for(int i = 0; i<temp; i++)
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
 80006a0:	e008      	b.n	80006b4 <HAL_UART_RxCpltCallback+0xd0>
      {
        stepMotorHalfDrive(i);
 80006a2:	69b8      	ldr	r0, [r7, #24]
 80006a4:	f000 f8d4 	bl	8000850 <stepMotorHalfDrive>
        stepMotorSpeed(10);
 80006a8:	200a      	movs	r0, #10
 80006aa:	f000 f8c0 	bl	800082e <stepMotorSpeed>
      for(int i = 0; i<temp; i++)
 80006ae:	69bb      	ldr	r3, [r7, #24]
 80006b0:	3301      	adds	r3, #1
 80006b2:	61bb      	str	r3, [r7, #24]
 80006b4:	69ba      	ldr	r2, [r7, #24]
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	dbf2      	blt.n	80006a2 <HAL_UART_RxCpltCallback+0xbe>
      }
    }
    HAL_UART_Transmit(&huart2, buffer,strlen(buffer),100);
 80006bc:	4811      	ldr	r0, [pc, #68]	; (8000704 <HAL_UART_RxCpltCallback+0x120>)
 80006be:	f7ff fd8b 	bl	80001d8 <strlen>
 80006c2:	4603      	mov	r3, r0
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	2364      	movs	r3, #100	; 0x64
 80006c8:	490e      	ldr	r1, [pc, #56]	; (8000704 <HAL_UART_RxCpltCallback+0x120>)
 80006ca:	4811      	ldr	r0, [pc, #68]	; (8000710 <HAL_UART_RxCpltCallback+0x12c>)
 80006cc:	f001 ff45 	bl	800255a <HAL_UART_Transmit>
 80006d0:	e00a      	b.n	80006e8 <HAL_UART_RxCpltCallback+0x104>
  }else
    buffer[buffer_index++]=rxData[0];
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <HAL_UART_RxCpltCallback+0x11c>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	1c5a      	adds	r2, r3, #1
 80006d8:	b2d1      	uxtb	r1, r2
 80006da:	4a09      	ldr	r2, [pc, #36]	; (8000700 <HAL_UART_RxCpltCallback+0x11c>)
 80006dc:	7011      	strb	r1, [r2, #0]
 80006de:	461a      	mov	r2, r3
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <HAL_UART_RxCpltCallback+0x118>)
 80006e2:	7819      	ldrb	r1, [r3, #0]
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <HAL_UART_RxCpltCallback+0x120>)
 80006e6:	5499      	strb	r1, [r3, r2]
  HAL_UART_Receive_IT(&huart2,rxData, 1);
 80006e8:	2201      	movs	r2, #1
 80006ea:	4904      	ldr	r1, [pc, #16]	; (80006fc <HAL_UART_RxCpltCallback+0x118>)
 80006ec:	4808      	ldr	r0, [pc, #32]	; (8000710 <HAL_UART_RxCpltCallback+0x12c>)
 80006ee:	f001 ffc6 	bl	800267e <HAL_UART_Receive_IT>
}
 80006f2:	bf00      	nop
 80006f4:	3720      	adds	r7, #32
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000078 	.word	0x20000078
 8000700:	20000086 	.word	0x20000086
 8000704:	2000007c 	.word	0x2000007c
 8000708:	43b40000 	.word	0x43b40000
 800070c:	45800000 	.word	0x45800000
 8000710:	20000160 	.word	0x20000160

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000718:	f000 fb8c 	bl	8000e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071c:	f000 f81a 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000720:	f7ff fefa 	bl	8000518 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000724:	f000 f9d8 	bl	8000ad8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000728:	f000 fa22 	bl	8000b70 <MX_TIM3_Init>
  MX_TIM10_Init();
 800072c:	f000 fa6e 	bl	8000c0c <MX_TIM10_Init>
  MX_USART2_UART_Init();
 8000730:	f000 fadc 	bl	8000cec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim10);
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <main+0x34>)
 8000736:	f001 fc19 	bl	8001f6c <HAL_TIM_Base_Start>
  HAL_UART_Receive_IT(&huart2, rxData, 1);
 800073a:	2201      	movs	r2, #1
 800073c:	4903      	ldr	r1, [pc, #12]	; (800074c <main+0x38>)
 800073e:	4804      	ldr	r0, [pc, #16]	; (8000750 <main+0x3c>)
 8000740:	f001 ff9d 	bl	800267e <HAL_UART_Receive_IT>
//     }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000744:	e7fe      	b.n	8000744 <main+0x30>
 8000746:	bf00      	nop
 8000748:	20000118 	.word	0x20000118
 800074c:	20000078 	.word	0x20000078
 8000750:	20000160 	.word	0x20000160

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b094      	sub	sp, #80	; 0x50
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	2230      	movs	r2, #48	; 0x30
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f002 ffb4 	bl	80036d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	4b27      	ldr	r3, [pc, #156]	; (800081c <SystemClock_Config+0xc8>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	4a26      	ldr	r2, [pc, #152]	; (800081c <SystemClock_Config+0xc8>)
 8000782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000786:	6413      	str	r3, [r2, #64]	; 0x40
 8000788:	4b24      	ldr	r3, [pc, #144]	; (800081c <SystemClock_Config+0xc8>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000794:	2300      	movs	r3, #0
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	4b21      	ldr	r3, [pc, #132]	; (8000820 <SystemClock_Config+0xcc>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a20      	ldr	r2, [pc, #128]	; (8000820 <SystemClock_Config+0xcc>)
 800079e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <SystemClock_Config+0xcc>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b0:	2301      	movs	r3, #1
 80007b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ba:	2302      	movs	r3, #2
 80007bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007c4:	2304      	movs	r3, #4
 80007c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007c8:	2348      	movs	r3, #72	; 0x48
 80007ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007d0:	2304      	movs	r3, #4
 80007d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d4:	f107 0320 	add.w	r3, r7, #32
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 fedf 	bl	800159c <HAL_RCC_OscConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007e4:	f000 f81e 	bl	8000824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e8:	230f      	movs	r3, #15
 80007ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ec:	2302      	movs	r3, #2
 80007ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	2102      	movs	r1, #2
 8000804:	4618      	mov	r0, r3
 8000806:	f001 f941 	bl	8001a8c <HAL_RCC_ClockConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000810:	f000 f808 	bl	8000824 <Error_Handler>
  }
}
 8000814:	bf00      	nop
 8000816:	3750      	adds	r7, #80	; 0x50
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40023800 	.word	0x40023800
 8000820:	40007000 	.word	0x40007000

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	e7fe      	b.n	800082c <Error_Handler+0x8>

0800082e <stepMotorSpeed>:

#include "stepper.h"
#include "delay.h"

void stepMotorSpeed(int speed)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
  delay_us(60000000/stepMotorHalfStep/speed);
 8000836:	f643 1238 	movw	r2, #14648	; 0x3938
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000840:	b29b      	uxth	r3, r3
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff fe4e 	bl	80004e4 <delay_us>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <stepMotorHalfDrive>:

void stepMotorHalfDrive(int step)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  int step1 = step % 8;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	425a      	negs	r2, r3
 800085c:	f003 0307 	and.w	r3, r3, #7
 8000860:	f002 0207 	and.w	r2, r2, #7
 8000864:	bf58      	it	pl
 8000866:	4253      	negpl	r3, r2
 8000868:	60fb      	str	r3, [r7, #12]
  switch (step1) {
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	2b07      	cmp	r3, #7
 800086e:	f200 80bb 	bhi.w	80009e8 <stepMotorHalfDrive+0x198>
 8000872:	a201      	add	r2, pc, #4	; (adr r2, 8000878 <stepMotorHalfDrive+0x28>)
 8000874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000878:	08000899 	.word	0x08000899
 800087c:	080008c3 	.word	0x080008c3
 8000880:	080008ed 	.word	0x080008ed
 8000884:	08000917 	.word	0x08000917
 8000888:	08000941 	.word	0x08000941
 800088c:	0800096b 	.word	0x0800096b
 8000890:	08000995 	.word	0x08000995
 8000894:	080009bf 	.word	0x080009bf
    case 0:
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	2120      	movs	r1, #32
 800089c:	4855      	ldr	r0, [pc, #340]	; (80009f4 <stepMotorHalfDrive+0x1a4>)
 800089e:	f000 fe63 	bl	8001568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2140      	movs	r1, #64	; 0x40
 80008a6:	4853      	ldr	r0, [pc, #332]	; (80009f4 <stepMotorHalfDrive+0x1a4>)
 80008a8:	f000 fe5e 	bl	8001568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2180      	movs	r1, #128	; 0x80
 80008b0:	4850      	ldr	r0, [pc, #320]	; (80009f4 <stepMotorHalfDrive+0x1a4>)
 80008b2:	f000 fe59 	bl	8001568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2140      	movs	r1, #64	; 0x40
 80008ba:	484f      	ldr	r0, [pc, #316]	; (80009f8 <stepMotorHalfDrive+0x1a8>)
 80008bc:	f000 fe54 	bl	8001568 <HAL_GPIO_WritePin>
      break;
 80008c0:	e093      	b.n	80009ea <stepMotorHalfDrive+0x19a>
    case 1:
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80008c2:	2201      	movs	r2, #1
 80008c4:	2120      	movs	r1, #32
 80008c6:	484b      	ldr	r0, [pc, #300]	; (80009f4 <stepMotorHalfDrive+0x1a4>)
 80008c8:	f000 fe4e 	bl	8001568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2140      	movs	r1, #64	; 0x40
 80008d0:	4848      	ldr	r0, [pc, #288]	; (80009f4 <stepMotorHalfDrive+0x1a4>)
 80008d2:	f000 fe49 	bl	8001568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2180      	movs	r1, #128	; 0x80
 80008da:	4846      	ldr	r0, [pc, #280]	; (80009f4 <stepMotorHalfDrive+0x1a4>)
 80008dc:	f000 fe44 	bl	8001568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2140      	movs	r1, #64	; 0x40
 80008e4:	4844      	ldr	r0, [pc, #272]	; (80009f8 <stepMotorHalfDrive+0x1a8>)
 80008e6:	f000 fe3f 	bl	8001568 <HAL_GPIO_WritePin>
      break;
 80008ea:	e07e      	b.n	80009ea <stepMotorHalfDrive+0x19a>
    case 2:
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2120      	movs	r1, #32
 80008f0:	4840      	ldr	r0, [pc, #256]	; (80009f4 <stepMotorHalfDrive+0x1a4>)
 80008f2:	f000 fe39 	bl	8001568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	2140      	movs	r1, #64	; 0x40
 80008fa:	483e      	ldr	r0, [pc, #248]	; (80009f4 <stepMotorHalfDrive+0x1a4>)
 80008fc:	f000 fe34 	bl	8001568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	2180      	movs	r1, #128	; 0x80
 8000904:	483b      	ldr	r0, [pc, #236]	; (80009f4 <stepMotorHalfDrive+0x1a4>)
 8000906:	f000 fe2f 	bl	8001568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2140      	movs	r1, #64	; 0x40
 800090e:	483a      	ldr	r0, [pc, #232]	; (80009f8 <stepMotorHalfDrive+0x1a8>)
 8000910:	f000 fe2a 	bl	8001568 <HAL_GPIO_WritePin>
      break;
 8000914:	e069      	b.n	80009ea <stepMotorHalfDrive+0x19a>
    case 3:
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2120      	movs	r1, #32
 800091a:	4836      	ldr	r0, [pc, #216]	; (80009f4 <stepMotorHalfDrive+0x1a4>)
 800091c:	f000 fe24 	bl	8001568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000920:	2201      	movs	r2, #1
 8000922:	2140      	movs	r1, #64	; 0x40
 8000924:	4833      	ldr	r0, [pc, #204]	; (80009f4 <stepMotorHalfDrive+0x1a4>)
 8000926:	f000 fe1f 	bl	8001568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800092a:	2201      	movs	r2, #1
 800092c:	2180      	movs	r1, #128	; 0x80
 800092e:	4831      	ldr	r0, [pc, #196]	; (80009f4 <stepMotorHalfDrive+0x1a4>)
 8000930:	f000 fe1a 	bl	8001568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	2140      	movs	r1, #64	; 0x40
 8000938:	482f      	ldr	r0, [pc, #188]	; (80009f8 <stepMotorHalfDrive+0x1a8>)
 800093a:	f000 fe15 	bl	8001568 <HAL_GPIO_WritePin>
      break;
 800093e:	e054      	b.n	80009ea <stepMotorHalfDrive+0x19a>
    case 4:
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	2120      	movs	r1, #32
 8000944:	482b      	ldr	r0, [pc, #172]	; (80009f4 <stepMotorHalfDrive+0x1a4>)
 8000946:	f000 fe0f 	bl	8001568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2140      	movs	r1, #64	; 0x40
 800094e:	4829      	ldr	r0, [pc, #164]	; (80009f4 <stepMotorHalfDrive+0x1a4>)
 8000950:	f000 fe0a 	bl	8001568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000954:	2201      	movs	r2, #1
 8000956:	2180      	movs	r1, #128	; 0x80
 8000958:	4826      	ldr	r0, [pc, #152]	; (80009f4 <stepMotorHalfDrive+0x1a4>)
 800095a:	f000 fe05 	bl	8001568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2140      	movs	r1, #64	; 0x40
 8000962:	4825      	ldr	r0, [pc, #148]	; (80009f8 <stepMotorHalfDrive+0x1a8>)
 8000964:	f000 fe00 	bl	8001568 <HAL_GPIO_WritePin>
      break;
 8000968:	e03f      	b.n	80009ea <stepMotorHalfDrive+0x19a>
    case 5:
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2120      	movs	r1, #32
 800096e:	4821      	ldr	r0, [pc, #132]	; (80009f4 <stepMotorHalfDrive+0x1a4>)
 8000970:	f000 fdfa 	bl	8001568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	2140      	movs	r1, #64	; 0x40
 8000978:	481e      	ldr	r0, [pc, #120]	; (80009f4 <stepMotorHalfDrive+0x1a4>)
 800097a:	f000 fdf5 	bl	8001568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800097e:	2201      	movs	r2, #1
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	481c      	ldr	r0, [pc, #112]	; (80009f4 <stepMotorHalfDrive+0x1a4>)
 8000984:	f000 fdf0 	bl	8001568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2140      	movs	r1, #64	; 0x40
 800098c:	481a      	ldr	r0, [pc, #104]	; (80009f8 <stepMotorHalfDrive+0x1a8>)
 800098e:	f000 fdeb 	bl	8001568 <HAL_GPIO_WritePin>
      break;
 8000992:	e02a      	b.n	80009ea <stepMotorHalfDrive+0x19a>
    case 6:
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	2120      	movs	r1, #32
 8000998:	4816      	ldr	r0, [pc, #88]	; (80009f4 <stepMotorHalfDrive+0x1a4>)
 800099a:	f000 fde5 	bl	8001568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2140      	movs	r1, #64	; 0x40
 80009a2:	4814      	ldr	r0, [pc, #80]	; (80009f4 <stepMotorHalfDrive+0x1a4>)
 80009a4:	f000 fde0 	bl	8001568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2180      	movs	r1, #128	; 0x80
 80009ac:	4811      	ldr	r0, [pc, #68]	; (80009f4 <stepMotorHalfDrive+0x1a4>)
 80009ae:	f000 fddb 	bl	8001568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80009b2:	2201      	movs	r2, #1
 80009b4:	2140      	movs	r1, #64	; 0x40
 80009b6:	4810      	ldr	r0, [pc, #64]	; (80009f8 <stepMotorHalfDrive+0x1a8>)
 80009b8:	f000 fdd6 	bl	8001568 <HAL_GPIO_WritePin>
      break;
 80009bc:	e015      	b.n	80009ea <stepMotorHalfDrive+0x19a>
    case 7:
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	2120      	movs	r1, #32
 80009c2:	480c      	ldr	r0, [pc, #48]	; (80009f4 <stepMotorHalfDrive+0x1a4>)
 80009c4:	f000 fdd0 	bl	8001568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2140      	movs	r1, #64	; 0x40
 80009cc:	4809      	ldr	r0, [pc, #36]	; (80009f4 <stepMotorHalfDrive+0x1a4>)
 80009ce:	f000 fdcb 	bl	8001568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	4807      	ldr	r0, [pc, #28]	; (80009f4 <stepMotorHalfDrive+0x1a4>)
 80009d8:	f000 fdc6 	bl	8001568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80009dc:	2201      	movs	r2, #1
 80009de:	2140      	movs	r1, #64	; 0x40
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <stepMotorHalfDrive+0x1a8>)
 80009e2:	f000 fdc1 	bl	8001568 <HAL_GPIO_WritePin>
      break;
 80009e6:	e000      	b.n	80009ea <stepMotorHalfDrive+0x19a>
    default:
      break;
 80009e8:	bf00      	nop
  }
}
 80009ea:	bf00      	nop
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40020000 	.word	0x40020000
 80009f8:	40020400 	.word	0x40020400

080009fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	4a0f      	ldr	r2, [pc, #60]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a10:	6453      	str	r3, [r2, #68]	; 0x44
 8000a12:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800

08000a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <NMI_Handler+0x4>

08000a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <HardFault_Handler+0x4>

08000a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <MemManage_Handler+0x4>

08000a5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <BusFault_Handler+0x4>

08000a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <UsageFault_Handler+0x4>

08000a6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a98:	f000 fa1e 	bl	8000ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <USART2_IRQHandler+0x10>)
 8000aa6:	f001 fe1b 	bl	80026e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000160 	.word	0x20000160

08000ab4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <SystemInit+0x20>)
 8000aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000abe:	4a05      	ldr	r2, [pc, #20]	; (8000ad4 <SystemInit+0x20>)
 8000ac0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ade:	f107 0308 	add.w	r3, r7, #8
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aec:	463b      	mov	r3, r7
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000af4:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <MX_TIM2_Init+0x94>)
 8000af6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000afa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <MX_TIM2_Init+0x94>)
 8000afe:	2247      	movs	r2, #71	; 0x47
 8000b00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <MX_TIM2_Init+0x94>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000b08:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <MX_TIM2_Init+0x94>)
 8000b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b10:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <MX_TIM2_Init+0x94>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <MX_TIM2_Init+0x94>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b1c:	4813      	ldr	r0, [pc, #76]	; (8000b6c <MX_TIM2_Init+0x94>)
 8000b1e:	f001 f9d5 	bl	8001ecc <HAL_TIM_Base_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b28:	f7ff fe7c 	bl	8000824 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b32:	f107 0308 	add.w	r3, r7, #8
 8000b36:	4619      	mov	r1, r3
 8000b38:	480c      	ldr	r0, [pc, #48]	; (8000b6c <MX_TIM2_Init+0x94>)
 8000b3a:	f001 fa71 	bl	8002020 <HAL_TIM_ConfigClockSource>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b44:	f7ff fe6e 	bl	8000824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b50:	463b      	mov	r3, r7
 8000b52:	4619      	mov	r1, r3
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_TIM2_Init+0x94>)
 8000b56:	f001 fc45 	bl	80023e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b60:	f7ff fe60 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000088 	.word	0x20000088

08000b70 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b76:	f107 0308 	add.w	r3, r7, #8
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b84:	463b      	mov	r3, r7
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <MX_TIM3_Init+0x94>)
 8000b8e:	4a1e      	ldr	r2, [pc, #120]	; (8000c08 <MX_TIM3_Init+0x98>)
 8000b90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000b92:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <MX_TIM3_Init+0x94>)
 8000b94:	2247      	movs	r2, #71	; 0x47
 8000b96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b98:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <MX_TIM3_Init+0x94>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b9e:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <MX_TIM3_Init+0x94>)
 8000ba0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ba4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba6:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <MX_TIM3_Init+0x94>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bac:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <MX_TIM3_Init+0x94>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bb2:	4814      	ldr	r0, [pc, #80]	; (8000c04 <MX_TIM3_Init+0x94>)
 8000bb4:	f001 f98a 	bl	8001ecc <HAL_TIM_Base_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000bbe:	f7ff fe31 	bl	8000824 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bc8:	f107 0308 	add.w	r3, r7, #8
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480d      	ldr	r0, [pc, #52]	; (8000c04 <MX_TIM3_Init+0x94>)
 8000bd0:	f001 fa26 	bl	8002020 <HAL_TIM_ConfigClockSource>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000bda:	f7ff fe23 	bl	8000824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bde:	2300      	movs	r3, #0
 8000be0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000be6:	463b      	mov	r3, r7
 8000be8:	4619      	mov	r1, r3
 8000bea:	4806      	ldr	r0, [pc, #24]	; (8000c04 <MX_TIM3_Init+0x94>)
 8000bec:	f001 fbfa 	bl	80023e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000bf6:	f7ff fe15 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200000d0 	.word	0x200000d0
 8000c08:	40000400 	.word	0x40000400

08000c0c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_TIM10_Init+0x40>)
 8000c12:	4a0f      	ldr	r2, [pc, #60]	; (8000c50 <MX_TIM10_Init+0x44>)
 8000c14:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 100-1;
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <MX_TIM10_Init+0x40>)
 8000c18:	2263      	movs	r2, #99	; 0x63
 8000c1a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_TIM10_Init+0x40>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <MX_TIM10_Init+0x40>)
 8000c24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c28:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <MX_TIM10_Init+0x40>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_TIM10_Init+0x40>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_TIM10_Init+0x40>)
 8000c38:	f001 f948 	bl	8001ecc <HAL_TIM_Base_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000c42:	f7ff fdef 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000118 	.word	0x20000118
 8000c50:	40014400 	.word	0x40014400

08000c54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b087      	sub	sp, #28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c64:	d10e      	bne.n	8000c84 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <HAL_TIM_Base_MspInit+0x8c>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ce0 <HAL_TIM_Base_MspInit+0x8c>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6413      	str	r3, [r2, #64]	; 0x40
 8000c76:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <HAL_TIM_Base_MspInit+0x8c>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8000c82:	e026      	b.n	8000cd2 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a16      	ldr	r2, [pc, #88]	; (8000ce4 <HAL_TIM_Base_MspInit+0x90>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d10e      	bne.n	8000cac <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_TIM_Base_MspInit+0x8c>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <HAL_TIM_Base_MspInit+0x8c>)
 8000c98:	f043 0302 	orr.w	r3, r3, #2
 8000c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <HAL_TIM_Base_MspInit+0x8c>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
}
 8000caa:	e012      	b.n	8000cd2 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM10)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <HAL_TIM_Base_MspInit+0x94>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d10d      	bne.n	8000cd2 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_TIM_Base_MspInit+0x8c>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <HAL_TIM_Base_MspInit+0x8c>)
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_TIM_Base_MspInit+0x8c>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
}
 8000cd2:	bf00      	nop
 8000cd4:	371c      	adds	r7, #28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40000400 	.word	0x40000400
 8000ce8:	40014400 	.word	0x40014400

08000cec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <MX_USART2_UART_Init+0x50>)
 8000cf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000cf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d12:	220c      	movs	r2, #12
 8000d14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d24:	f001 fbcc 	bl	80024c0 <HAL_UART_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d2e:	f7ff fd79 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000160 	.word	0x20000160
 8000d3c:	40004400 	.word	0x40004400

08000d40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	; 0x28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a1d      	ldr	r2, [pc, #116]	; (8000dd4 <HAL_UART_MspInit+0x94>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d133      	bne.n	8000dca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <HAL_UART_MspInit+0x98>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <HAL_UART_MspInit+0x98>)
 8000d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d70:	6413      	str	r3, [r2, #64]	; 0x40
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <HAL_UART_MspInit+0x98>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <HAL_UART_MspInit+0x98>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <HAL_UART_MspInit+0x98>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_UART_MspInit+0x98>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d9a:	230c      	movs	r3, #12
 8000d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da6:	2303      	movs	r3, #3
 8000da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000daa:	2307      	movs	r3, #7
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4619      	mov	r1, r3
 8000db4:	4809      	ldr	r0, [pc, #36]	; (8000ddc <HAL_UART_MspInit+0x9c>)
 8000db6:	f000 fa53 	bl	8001260 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2026      	movs	r0, #38	; 0x26
 8000dc0:	f000 f985 	bl	80010ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dc4:	2026      	movs	r0, #38	; 0x26
 8000dc6:	f000 f99e 	bl	8001106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000dca:	bf00      	nop
 8000dcc:	3728      	adds	r7, #40	; 0x28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40004400 	.word	0x40004400
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020000 	.word	0x40020000

08000de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de4:	480d      	ldr	r0, [pc, #52]	; (8000e1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000de6:	490e      	ldr	r1, [pc, #56]	; (8000e20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000de8:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dfc:	4c0b      	ldr	r4, [pc, #44]	; (8000e2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e0a:	f7ff fe53 	bl	8000ab4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f002 fc6d 	bl	80036ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e12:	f7ff fc7f 	bl	8000714 <main>
  bx  lr    
 8000e16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e20:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e24:	08003878 	.word	0x08003878
  ldr r2, =_sbss
 8000e28:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e2c:	200002e0 	.word	0x200002e0

08000e30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC_IRQHandler>
	...

08000e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e38:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <HAL_Init+0x40>)
 8000e3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <HAL_Init+0x40>)
 8000e4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <HAL_Init+0x40>)
 8000e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f000 f92b 	bl	80010b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e62:	200f      	movs	r0, #15
 8000e64:	f000 f808 	bl	8000e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e68:	f7ff fdc8 	bl	80009fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023c00 	.word	0x40023c00

08000e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_InitTick+0x54>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_InitTick+0x58>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f943 	bl	8001122 <HAL_SYSTICK_Config>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00e      	b.n	8000ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b0f      	cmp	r3, #15
 8000eaa:	d80a      	bhi.n	8000ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eac:	2200      	movs	r2, #0
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f000 f90b 	bl	80010ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb8:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <HAL_InitTick+0x5c>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e000      	b.n	8000ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000004 	.word	0x20000004

08000ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_IncTick+0x20>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x24>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <HAL_IncTick+0x24>)
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	200001a4 	.word	0x200001a4

08000f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return uwTick;
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <HAL_GetTick+0x14>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	200001a4 	.word	0x200001a4

08000f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f34:	4013      	ands	r3, r2
 8000f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4a:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	60d3      	str	r3, [r2, #12]
}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <__NVIC_GetPriorityGrouping+0x18>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	f003 0307 	and.w	r3, r3, #7
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	db0b      	blt.n	8000fa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	f003 021f 	and.w	r2, r3, #31
 8000f94:	4907      	ldr	r1, [pc, #28]	; (8000fb4 <__NVIC_EnableIRQ+0x38>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	095b      	lsrs	r3, r3, #5
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000e100 	.word	0xe000e100

08000fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	db0a      	blt.n	8000fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	490c      	ldr	r1, [pc, #48]	; (8001004 <__NVIC_SetPriority+0x4c>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	0112      	lsls	r2, r2, #4
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	440b      	add	r3, r1
 8000fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe0:	e00a      	b.n	8000ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4908      	ldr	r1, [pc, #32]	; (8001008 <__NVIC_SetPriority+0x50>)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	3b04      	subs	r3, #4
 8000ff0:	0112      	lsls	r2, r2, #4
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	761a      	strb	r2, [r3, #24]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000e100 	.word	0xe000e100
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f1c3 0307 	rsb	r3, r3, #7
 8001026:	2b04      	cmp	r3, #4
 8001028:	bf28      	it	cs
 800102a:	2304      	movcs	r3, #4
 800102c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3304      	adds	r3, #4
 8001032:	2b06      	cmp	r3, #6
 8001034:	d902      	bls.n	800103c <NVIC_EncodePriority+0x30>
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3b03      	subs	r3, #3
 800103a:	e000      	b.n	800103e <NVIC_EncodePriority+0x32>
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	f04f 32ff 	mov.w	r2, #4294967295
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43da      	mvns	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001054:	f04f 31ff 	mov.w	r1, #4294967295
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43d9      	mvns	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	4313      	orrs	r3, r2
         );
}
 8001066:	4618      	mov	r0, r3
 8001068:	3724      	adds	r7, #36	; 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001084:	d301      	bcc.n	800108a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001086:	2301      	movs	r3, #1
 8001088:	e00f      	b.n	80010aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <SysTick_Config+0x40>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001092:	210f      	movs	r1, #15
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f7ff ff8e 	bl	8000fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <SysTick_Config+0x40>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <SysTick_Config+0x40>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ff29 	bl	8000f18 <__NVIC_SetPriorityGrouping>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e0:	f7ff ff3e 	bl	8000f60 <__NVIC_GetPriorityGrouping>
 80010e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68b9      	ldr	r1, [r7, #8]
 80010ea:	6978      	ldr	r0, [r7, #20]
 80010ec:	f7ff ff8e 	bl	800100c <NVIC_EncodePriority>
 80010f0:	4602      	mov	r2, r0
 80010f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff5d 	bl	8000fb8 <__NVIC_SetPriority>
}
 80010fe:	bf00      	nop
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff31 	bl	8000f7c <__NVIC_EnableIRQ>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffa2 	bl	8001074 <SysTick_Config>
 8001130:	4603      	mov	r3, r0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001146:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001148:	f7ff feda 	bl	8000f00 <HAL_GetTick>
 800114c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d008      	beq.n	800116c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2280      	movs	r2, #128	; 0x80
 800115e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e052      	b.n	8001212 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f022 0216 	bic.w	r2, r2, #22
 800117a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	695a      	ldr	r2, [r3, #20]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800118a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	2b00      	cmp	r3, #0
 8001192:	d103      	bne.n	800119c <HAL_DMA_Abort+0x62>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001198:	2b00      	cmp	r3, #0
 800119a:	d007      	beq.n	80011ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0208 	bic.w	r2, r2, #8
 80011aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0201 	bic.w	r2, r2, #1
 80011ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011bc:	e013      	b.n	80011e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011be:	f7ff fe9f 	bl	8000f00 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b05      	cmp	r3, #5
 80011ca:	d90c      	bls.n	80011e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2220      	movs	r2, #32
 80011d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2203      	movs	r2, #3
 80011d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e015      	b.n	8001212 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1e4      	bne.n	80011be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f8:	223f      	movs	r2, #63	; 0x3f
 80011fa:	409a      	lsls	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2201      	movs	r2, #1
 8001204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d004      	beq.n	8001238 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2280      	movs	r2, #128	; 0x80
 8001232:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e00c      	b.n	8001252 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2205      	movs	r2, #5
 800123c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0201 	bic.w	r2, r2, #1
 800124e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001260:	b480      	push	{r7}
 8001262:	b089      	sub	sp, #36	; 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
 800127a:	e159      	b.n	8001530 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800127c:	2201      	movs	r2, #1
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	429a      	cmp	r2, r3
 8001296:	f040 8148 	bne.w	800152a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d005      	beq.n	80012b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d130      	bne.n	8001314 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	2203      	movs	r2, #3
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	68da      	ldr	r2, [r3, #12]
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012e8:	2201      	movs	r2, #1
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	091b      	lsrs	r3, r3, #4
 80012fe:	f003 0201 	and.w	r2, r3, #1
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	2b03      	cmp	r3, #3
 800131e:	d017      	beq.n	8001350 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2203      	movs	r2, #3
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0303 	and.w	r3, r3, #3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d123      	bne.n	80013a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	08da      	lsrs	r2, r3, #3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3208      	adds	r2, #8
 8001364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001368:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	220f      	movs	r2, #15
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	691a      	ldr	r2, [r3, #16]
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	08da      	lsrs	r2, r3, #3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3208      	adds	r2, #8
 800139e:	69b9      	ldr	r1, [r7, #24]
 80013a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	2203      	movs	r2, #3
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0203 	and.w	r2, r3, #3
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f000 80a2 	beq.w	800152a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	4b57      	ldr	r3, [pc, #348]	; (8001548 <HAL_GPIO_Init+0x2e8>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	4a56      	ldr	r2, [pc, #344]	; (8001548 <HAL_GPIO_Init+0x2e8>)
 80013f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f4:	6453      	str	r3, [r2, #68]	; 0x44
 80013f6:	4b54      	ldr	r3, [pc, #336]	; (8001548 <HAL_GPIO_Init+0x2e8>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001402:	4a52      	ldr	r2, [pc, #328]	; (800154c <HAL_GPIO_Init+0x2ec>)
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	089b      	lsrs	r3, r3, #2
 8001408:	3302      	adds	r3, #2
 800140a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	220f      	movs	r2, #15
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4013      	ands	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a49      	ldr	r2, [pc, #292]	; (8001550 <HAL_GPIO_Init+0x2f0>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d019      	beq.n	8001462 <HAL_GPIO_Init+0x202>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a48      	ldr	r2, [pc, #288]	; (8001554 <HAL_GPIO_Init+0x2f4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d013      	beq.n	800145e <HAL_GPIO_Init+0x1fe>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a47      	ldr	r2, [pc, #284]	; (8001558 <HAL_GPIO_Init+0x2f8>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d00d      	beq.n	800145a <HAL_GPIO_Init+0x1fa>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a46      	ldr	r2, [pc, #280]	; (800155c <HAL_GPIO_Init+0x2fc>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d007      	beq.n	8001456 <HAL_GPIO_Init+0x1f6>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a45      	ldr	r2, [pc, #276]	; (8001560 <HAL_GPIO_Init+0x300>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d101      	bne.n	8001452 <HAL_GPIO_Init+0x1f2>
 800144e:	2304      	movs	r3, #4
 8001450:	e008      	b.n	8001464 <HAL_GPIO_Init+0x204>
 8001452:	2307      	movs	r3, #7
 8001454:	e006      	b.n	8001464 <HAL_GPIO_Init+0x204>
 8001456:	2303      	movs	r3, #3
 8001458:	e004      	b.n	8001464 <HAL_GPIO_Init+0x204>
 800145a:	2302      	movs	r3, #2
 800145c:	e002      	b.n	8001464 <HAL_GPIO_Init+0x204>
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <HAL_GPIO_Init+0x204>
 8001462:	2300      	movs	r3, #0
 8001464:	69fa      	ldr	r2, [r7, #28]
 8001466:	f002 0203 	and.w	r2, r2, #3
 800146a:	0092      	lsls	r2, r2, #2
 800146c:	4093      	lsls	r3, r2
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001474:	4935      	ldr	r1, [pc, #212]	; (800154c <HAL_GPIO_Init+0x2ec>)
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	089b      	lsrs	r3, r3, #2
 800147a:	3302      	adds	r3, #2
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001482:	4b38      	ldr	r3, [pc, #224]	; (8001564 <HAL_GPIO_Init+0x304>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014a6:	4a2f      	ldr	r2, [pc, #188]	; (8001564 <HAL_GPIO_Init+0x304>)
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014ac:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <HAL_GPIO_Init+0x304>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014d0:	4a24      	ldr	r2, [pc, #144]	; (8001564 <HAL_GPIO_Init+0x304>)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014d6:	4b23      	ldr	r3, [pc, #140]	; (8001564 <HAL_GPIO_Init+0x304>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014fa:	4a1a      	ldr	r2, [pc, #104]	; (8001564 <HAL_GPIO_Init+0x304>)
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001500:	4b18      	ldr	r3, [pc, #96]	; (8001564 <HAL_GPIO_Init+0x304>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001524:	4a0f      	ldr	r2, [pc, #60]	; (8001564 <HAL_GPIO_Init+0x304>)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3301      	adds	r3, #1
 800152e:	61fb      	str	r3, [r7, #28]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	2b0f      	cmp	r3, #15
 8001534:	f67f aea2 	bls.w	800127c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001538:	bf00      	nop
 800153a:	bf00      	nop
 800153c:	3724      	adds	r7, #36	; 0x24
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800
 800154c:	40013800 	.word	0x40013800
 8001550:	40020000 	.word	0x40020000
 8001554:	40020400 	.word	0x40020400
 8001558:	40020800 	.word	0x40020800
 800155c:	40020c00 	.word	0x40020c00
 8001560:	40021000 	.word	0x40021000
 8001564:	40013c00 	.word	0x40013c00

08001568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	807b      	strh	r3, [r7, #2]
 8001574:	4613      	mov	r3, r2
 8001576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001578:	787b      	ldrb	r3, [r7, #1]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800157e:	887a      	ldrh	r2, [r7, #2]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001584:	e003      	b.n	800158e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001586:	887b      	ldrh	r3, [r7, #2]
 8001588:	041a      	lsls	r2, r3, #16
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	619a      	str	r2, [r3, #24]
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e267      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d075      	beq.n	80016a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ba:	4b88      	ldr	r3, [pc, #544]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	d00c      	beq.n	80015e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015c6:	4b85      	ldr	r3, [pc, #532]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ce:	2b08      	cmp	r3, #8
 80015d0:	d112      	bne.n	80015f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015d2:	4b82      	ldr	r3, [pc, #520]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015de:	d10b      	bne.n	80015f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e0:	4b7e      	ldr	r3, [pc, #504]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d05b      	beq.n	80016a4 <HAL_RCC_OscConfig+0x108>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d157      	bne.n	80016a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e242      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001600:	d106      	bne.n	8001610 <HAL_RCC_OscConfig+0x74>
 8001602:	4b76      	ldr	r3, [pc, #472]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a75      	ldr	r2, [pc, #468]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	e01d      	b.n	800164c <HAL_RCC_OscConfig+0xb0>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001618:	d10c      	bne.n	8001634 <HAL_RCC_OscConfig+0x98>
 800161a:	4b70      	ldr	r3, [pc, #448]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a6f      	ldr	r2, [pc, #444]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	4b6d      	ldr	r3, [pc, #436]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a6c      	ldr	r2, [pc, #432]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 800162c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	e00b      	b.n	800164c <HAL_RCC_OscConfig+0xb0>
 8001634:	4b69      	ldr	r3, [pc, #420]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a68      	ldr	r2, [pc, #416]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 800163a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	4b66      	ldr	r3, [pc, #408]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a65      	ldr	r2, [pc, #404]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800164a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d013      	beq.n	800167c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001654:	f7ff fc54 	bl	8000f00 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800165c:	f7ff fc50 	bl	8000f00 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b64      	cmp	r3, #100	; 0x64
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e207      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166e:	4b5b      	ldr	r3, [pc, #364]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f0      	beq.n	800165c <HAL_RCC_OscConfig+0xc0>
 800167a:	e014      	b.n	80016a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff fc40 	bl	8000f00 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001684:	f7ff fc3c 	bl	8000f00 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	; 0x64
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e1f3      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001696:	4b51      	ldr	r3, [pc, #324]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0xe8>
 80016a2:	e000      	b.n	80016a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d063      	beq.n	800177a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016b2:	4b4a      	ldr	r3, [pc, #296]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 030c 	and.w	r3, r3, #12
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00b      	beq.n	80016d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016be:	4b47      	ldr	r3, [pc, #284]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d11c      	bne.n	8001704 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ca:	4b44      	ldr	r3, [pc, #272]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d116      	bne.n	8001704 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d6:	4b41      	ldr	r3, [pc, #260]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d005      	beq.n	80016ee <HAL_RCC_OscConfig+0x152>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d001      	beq.n	80016ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e1c7      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ee:	4b3b      	ldr	r3, [pc, #236]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	4937      	ldr	r1, [pc, #220]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001702:	e03a      	b.n	800177a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d020      	beq.n	800174e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800170c:	4b34      	ldr	r3, [pc, #208]	; (80017e0 <HAL_RCC_OscConfig+0x244>)
 800170e:	2201      	movs	r2, #1
 8001710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001712:	f7ff fbf5 	bl	8000f00 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800171a:	f7ff fbf1 	bl	8000f00 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e1a8      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172c:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f0      	beq.n	800171a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001738:	4b28      	ldr	r3, [pc, #160]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	4925      	ldr	r1, [pc, #148]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001748:	4313      	orrs	r3, r2
 800174a:	600b      	str	r3, [r1, #0]
 800174c:	e015      	b.n	800177a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800174e:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <HAL_RCC_OscConfig+0x244>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff fbd4 	bl	8000f00 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800175c:	f7ff fbd0 	bl	8000f00 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e187      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176e:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d036      	beq.n	80017f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d016      	beq.n	80017bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_RCC_OscConfig+0x248>)
 8001790:	2201      	movs	r2, #1
 8001792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001794:	f7ff fbb4 	bl	8000f00 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800179c:	f7ff fbb0 	bl	8000f00 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e167      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80017b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0x200>
 80017ba:	e01b      	b.n	80017f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <HAL_RCC_OscConfig+0x248>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c2:	f7ff fb9d 	bl	8000f00 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c8:	e00e      	b.n	80017e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ca:	f7ff fb99 	bl	8000f00 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d907      	bls.n	80017e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e150      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
 80017dc:	40023800 	.word	0x40023800
 80017e0:	42470000 	.word	0x42470000
 80017e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e8:	4b88      	ldr	r3, [pc, #544]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80017ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1ea      	bne.n	80017ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 8097 	beq.w	8001930 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001806:	4b81      	ldr	r3, [pc, #516]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10f      	bne.n	8001832 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	4b7d      	ldr	r3, [pc, #500]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	4a7c      	ldr	r2, [pc, #496]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001820:	6413      	str	r3, [r2, #64]	; 0x40
 8001822:	4b7a      	ldr	r3, [pc, #488]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800182e:	2301      	movs	r3, #1
 8001830:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001832:	4b77      	ldr	r3, [pc, #476]	; (8001a10 <HAL_RCC_OscConfig+0x474>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183a:	2b00      	cmp	r3, #0
 800183c:	d118      	bne.n	8001870 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800183e:	4b74      	ldr	r3, [pc, #464]	; (8001a10 <HAL_RCC_OscConfig+0x474>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a73      	ldr	r2, [pc, #460]	; (8001a10 <HAL_RCC_OscConfig+0x474>)
 8001844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800184a:	f7ff fb59 	bl	8000f00 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001852:	f7ff fb55 	bl	8000f00 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e10c      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001864:	4b6a      	ldr	r3, [pc, #424]	; (8001a10 <HAL_RCC_OscConfig+0x474>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f0      	beq.n	8001852 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d106      	bne.n	8001886 <HAL_RCC_OscConfig+0x2ea>
 8001878:	4b64      	ldr	r3, [pc, #400]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 800187a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187c:	4a63      	ldr	r2, [pc, #396]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	6713      	str	r3, [r2, #112]	; 0x70
 8001884:	e01c      	b.n	80018c0 <HAL_RCC_OscConfig+0x324>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b05      	cmp	r3, #5
 800188c:	d10c      	bne.n	80018a8 <HAL_RCC_OscConfig+0x30c>
 800188e:	4b5f      	ldr	r3, [pc, #380]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001892:	4a5e      	ldr	r2, [pc, #376]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	6713      	str	r3, [r2, #112]	; 0x70
 800189a:	4b5c      	ldr	r3, [pc, #368]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 800189c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189e:	4a5b      	ldr	r2, [pc, #364]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6713      	str	r3, [r2, #112]	; 0x70
 80018a6:	e00b      	b.n	80018c0 <HAL_RCC_OscConfig+0x324>
 80018a8:	4b58      	ldr	r3, [pc, #352]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80018aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ac:	4a57      	ldr	r2, [pc, #348]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80018ae:	f023 0301 	bic.w	r3, r3, #1
 80018b2:	6713      	str	r3, [r2, #112]	; 0x70
 80018b4:	4b55      	ldr	r3, [pc, #340]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80018b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b8:	4a54      	ldr	r2, [pc, #336]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80018ba:	f023 0304 	bic.w	r3, r3, #4
 80018be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d015      	beq.n	80018f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c8:	f7ff fb1a 	bl	8000f00 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ce:	e00a      	b.n	80018e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d0:	f7ff fb16 	bl	8000f00 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f241 3288 	movw	r2, #5000	; 0x1388
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e0cb      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e6:	4b49      	ldr	r3, [pc, #292]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80018e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0ee      	beq.n	80018d0 <HAL_RCC_OscConfig+0x334>
 80018f2:	e014      	b.n	800191e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f4:	f7ff fb04 	bl	8000f00 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fa:	e00a      	b.n	8001912 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018fc:	f7ff fb00 	bl	8000f00 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	f241 3288 	movw	r2, #5000	; 0x1388
 800190a:	4293      	cmp	r3, r2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e0b5      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001912:	4b3e      	ldr	r3, [pc, #248]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1ee      	bne.n	80018fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800191e:	7dfb      	ldrb	r3, [r7, #23]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d105      	bne.n	8001930 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001924:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	4a38      	ldr	r2, [pc, #224]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 800192a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800192e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 80a1 	beq.w	8001a7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800193a:	4b34      	ldr	r3, [pc, #208]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	2b08      	cmp	r3, #8
 8001944:	d05c      	beq.n	8001a00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d141      	bne.n	80019d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194e:	4b31      	ldr	r3, [pc, #196]	; (8001a14 <HAL_RCC_OscConfig+0x478>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001954:	f7ff fad4 	bl	8000f00 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800195c:	f7ff fad0 	bl	8000f00 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e087      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196e:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69da      	ldr	r2, [r3, #28]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	019b      	lsls	r3, r3, #6
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001990:	085b      	lsrs	r3, r3, #1
 8001992:	3b01      	subs	r3, #1
 8001994:	041b      	lsls	r3, r3, #16
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	061b      	lsls	r3, r3, #24
 800199e:	491b      	ldr	r1, [pc, #108]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019a4:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <HAL_RCC_OscConfig+0x478>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019aa:	f7ff faa9 	bl	8000f00 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b2:	f7ff faa5 	bl	8000f00 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e05c      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f0      	beq.n	80019b2 <HAL_RCC_OscConfig+0x416>
 80019d0:	e054      	b.n	8001a7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <HAL_RCC_OscConfig+0x478>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7ff fa92 	bl	8000f00 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e0:	f7ff fa8e 	bl	8000f00 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e045      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0x444>
 80019fe:	e03d      	b.n	8001a7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d107      	bne.n	8001a18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e038      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40007000 	.word	0x40007000
 8001a14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <HAL_RCC_OscConfig+0x4ec>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d028      	beq.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d121      	bne.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d11a      	bne.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a48:	4013      	ands	r3, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d111      	bne.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5e:	085b      	lsrs	r3, r3, #1
 8001a60:	3b01      	subs	r3, #1
 8001a62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d107      	bne.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d001      	beq.n	8001a7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e000      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800

08001a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e0cc      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa0:	4b68      	ldr	r3, [pc, #416]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d90c      	bls.n	8001ac8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aae:	4b65      	ldr	r3, [pc, #404]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab6:	4b63      	ldr	r3, [pc, #396]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d001      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0b8      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d020      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ae0:	4b59      	ldr	r3, [pc, #356]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	4a58      	ldr	r2, [pc, #352]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001aea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001af8:	4b53      	ldr	r3, [pc, #332]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4a52      	ldr	r2, [pc, #328]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b04:	4b50      	ldr	r3, [pc, #320]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	494d      	ldr	r1, [pc, #308]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d044      	beq.n	8001bac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d107      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2a:	4b47      	ldr	r3, [pc, #284]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d119      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e07f      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d003      	beq.n	8001b4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b46:	2b03      	cmp	r3, #3
 8001b48:	d107      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4a:	4b3f      	ldr	r3, [pc, #252]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d109      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e06f      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5a:	4b3b      	ldr	r3, [pc, #236]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e067      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b6a:	4b37      	ldr	r3, [pc, #220]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f023 0203 	bic.w	r2, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	4934      	ldr	r1, [pc, #208]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b7c:	f7ff f9c0 	bl	8000f00 <HAL_GetTick>
 8001b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b82:	e00a      	b.n	8001b9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b84:	f7ff f9bc 	bl	8000f00 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e04f      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9a:	4b2b      	ldr	r3, [pc, #172]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 020c 	and.w	r2, r3, #12
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d1eb      	bne.n	8001b84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bac:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d20c      	bcs.n	8001bd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bba:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc2:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d001      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e032      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d008      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be0:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	4916      	ldr	r1, [pc, #88]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d009      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bfe:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	490e      	ldr	r1, [pc, #56]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c12:	f000 f821 	bl	8001c58 <HAL_RCC_GetSysClockFreq>
 8001c16:	4602      	mov	r2, r0
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	091b      	lsrs	r3, r3, #4
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	490a      	ldr	r1, [pc, #40]	; (8001c4c <HAL_RCC_ClockConfig+0x1c0>)
 8001c24:	5ccb      	ldrb	r3, [r1, r3]
 8001c26:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2a:	4a09      	ldr	r2, [pc, #36]	; (8001c50 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_RCC_ClockConfig+0x1c8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff f920 	bl	8000e78 <HAL_InitTick>

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40023c00 	.word	0x40023c00
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	0800374c 	.word	0x0800374c
 8001c50:	20000000 	.word	0x20000000
 8001c54:	20000004 	.word	0x20000004

08001c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c5c:	b094      	sub	sp, #80	; 0x50
 8001c5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	647b      	str	r3, [r7, #68]	; 0x44
 8001c64:	2300      	movs	r3, #0
 8001c66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c68:	2300      	movs	r3, #0
 8001c6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c70:	4b79      	ldr	r3, [pc, #484]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 030c 	and.w	r3, r3, #12
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d00d      	beq.n	8001c98 <HAL_RCC_GetSysClockFreq+0x40>
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	f200 80e1 	bhi.w	8001e44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d002      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0x34>
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d003      	beq.n	8001c92 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c8a:	e0db      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c8c:	4b73      	ldr	r3, [pc, #460]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c8e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c90:	e0db      	b.n	8001e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c92:	4b73      	ldr	r3, [pc, #460]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c96:	e0d8      	b.n	8001e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c98:	4b6f      	ldr	r3, [pc, #444]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ca0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ca2:	4b6d      	ldr	r3, [pc, #436]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d063      	beq.n	8001d76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cae:	4b6a      	ldr	r3, [pc, #424]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	099b      	lsrs	r3, r3, #6
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cb8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cc0:	633b      	str	r3, [r7, #48]	; 0x30
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8001cc6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001cca:	4622      	mov	r2, r4
 8001ccc:	462b      	mov	r3, r5
 8001cce:	f04f 0000 	mov.w	r0, #0
 8001cd2:	f04f 0100 	mov.w	r1, #0
 8001cd6:	0159      	lsls	r1, r3, #5
 8001cd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cdc:	0150      	lsls	r0, r2, #5
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4621      	mov	r1, r4
 8001ce4:	1a51      	subs	r1, r2, r1
 8001ce6:	6139      	str	r1, [r7, #16]
 8001ce8:	4629      	mov	r1, r5
 8001cea:	eb63 0301 	sbc.w	r3, r3, r1
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cfc:	4659      	mov	r1, fp
 8001cfe:	018b      	lsls	r3, r1, #6
 8001d00:	4651      	mov	r1, sl
 8001d02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d06:	4651      	mov	r1, sl
 8001d08:	018a      	lsls	r2, r1, #6
 8001d0a:	4651      	mov	r1, sl
 8001d0c:	ebb2 0801 	subs.w	r8, r2, r1
 8001d10:	4659      	mov	r1, fp
 8001d12:	eb63 0901 	sbc.w	r9, r3, r1
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d2a:	4690      	mov	r8, r2
 8001d2c:	4699      	mov	r9, r3
 8001d2e:	4623      	mov	r3, r4
 8001d30:	eb18 0303 	adds.w	r3, r8, r3
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	462b      	mov	r3, r5
 8001d38:	eb49 0303 	adc.w	r3, r9, r3
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d4a:	4629      	mov	r1, r5
 8001d4c:	024b      	lsls	r3, r1, #9
 8001d4e:	4621      	mov	r1, r4
 8001d50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d54:	4621      	mov	r1, r4
 8001d56:	024a      	lsls	r2, r1, #9
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d5e:	2200      	movs	r2, #0
 8001d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d68:	f7fe fa3e 	bl	80001e8 <__aeabi_uldivmod>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4613      	mov	r3, r2
 8001d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d74:	e058      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d76:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	099b      	lsrs	r3, r3, #6
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	4611      	mov	r1, r2
 8001d82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d86:	623b      	str	r3, [r7, #32]
 8001d88:	2300      	movs	r3, #0
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d90:	4642      	mov	r2, r8
 8001d92:	464b      	mov	r3, r9
 8001d94:	f04f 0000 	mov.w	r0, #0
 8001d98:	f04f 0100 	mov.w	r1, #0
 8001d9c:	0159      	lsls	r1, r3, #5
 8001d9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001da2:	0150      	lsls	r0, r2, #5
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4641      	mov	r1, r8
 8001daa:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dae:	4649      	mov	r1, r9
 8001db0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	f04f 0300 	mov.w	r3, #0
 8001dbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001dc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001dc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001dc8:	ebb2 040a 	subs.w	r4, r2, sl
 8001dcc:	eb63 050b 	sbc.w	r5, r3, fp
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	00eb      	lsls	r3, r5, #3
 8001dda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dde:	00e2      	lsls	r2, r4, #3
 8001de0:	4614      	mov	r4, r2
 8001de2:	461d      	mov	r5, r3
 8001de4:	4643      	mov	r3, r8
 8001de6:	18e3      	adds	r3, r4, r3
 8001de8:	603b      	str	r3, [r7, #0]
 8001dea:	464b      	mov	r3, r9
 8001dec:	eb45 0303 	adc.w	r3, r5, r3
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dfe:	4629      	mov	r1, r5
 8001e00:	028b      	lsls	r3, r1, #10
 8001e02:	4621      	mov	r1, r4
 8001e04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e08:	4621      	mov	r1, r4
 8001e0a:	028a      	lsls	r2, r1, #10
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e12:	2200      	movs	r2, #0
 8001e14:	61bb      	str	r3, [r7, #24]
 8001e16:	61fa      	str	r2, [r7, #28]
 8001e18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e1c:	f7fe f9e4 	bl	80001e8 <__aeabi_uldivmod>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4613      	mov	r3, r2
 8001e26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	0c1b      	lsrs	r3, r3, #16
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	3301      	adds	r3, #1
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e42:	e002      	b.n	8001e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x204>)
 8001e46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3750      	adds	r7, #80	; 0x50
 8001e50:	46bd      	mov	sp, r7
 8001e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	00f42400 	.word	0x00f42400
 8001e60:	007a1200 	.word	0x007a1200

08001e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e68:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	20000000 	.word	0x20000000

08001e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e80:	f7ff fff0 	bl	8001e64 <HAL_RCC_GetHCLKFreq>
 8001e84:	4602      	mov	r2, r0
 8001e86:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	0a9b      	lsrs	r3, r3, #10
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	4903      	ldr	r1, [pc, #12]	; (8001ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e92:	5ccb      	ldrb	r3, [r1, r3]
 8001e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	0800375c 	.word	0x0800375c

08001ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ea8:	f7ff ffdc 	bl	8001e64 <HAL_RCC_GetHCLKFreq>
 8001eac:	4602      	mov	r2, r0
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	0b5b      	lsrs	r3, r3, #13
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	4903      	ldr	r1, [pc, #12]	; (8001ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eba:	5ccb      	ldrb	r3, [r1, r3]
 8001ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	0800375c 	.word	0x0800375c

08001ecc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e041      	b.n	8001f62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d106      	bne.n	8001ef8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7fe feae 	bl	8000c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2202      	movs	r2, #2
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3304      	adds	r3, #4
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	f000 f950 	bl	80021b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d001      	beq.n	8001f84 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e03c      	b.n	8001ffe <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2202      	movs	r2, #2
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a1e      	ldr	r2, [pc, #120]	; (800200c <HAL_TIM_Base_Start+0xa0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d018      	beq.n	8001fc8 <HAL_TIM_Base_Start+0x5c>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f9e:	d013      	beq.n	8001fc8 <HAL_TIM_Base_Start+0x5c>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a1a      	ldr	r2, [pc, #104]	; (8002010 <HAL_TIM_Base_Start+0xa4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d00e      	beq.n	8001fc8 <HAL_TIM_Base_Start+0x5c>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a19      	ldr	r2, [pc, #100]	; (8002014 <HAL_TIM_Base_Start+0xa8>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d009      	beq.n	8001fc8 <HAL_TIM_Base_Start+0x5c>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a17      	ldr	r2, [pc, #92]	; (8002018 <HAL_TIM_Base_Start+0xac>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d004      	beq.n	8001fc8 <HAL_TIM_Base_Start+0x5c>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a16      	ldr	r2, [pc, #88]	; (800201c <HAL_TIM_Base_Start+0xb0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d111      	bne.n	8001fec <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d010      	beq.n	8001ffc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f042 0201 	orr.w	r2, r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fea:	e007      	b.n	8001ffc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0201 	orr.w	r2, r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40010000 	.word	0x40010000
 8002010:	40000400 	.word	0x40000400
 8002014:	40000800 	.word	0x40000800
 8002018:	40000c00 	.word	0x40000c00
 800201c:	40014000 	.word	0x40014000

08002020 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002034:	2b01      	cmp	r3, #1
 8002036:	d101      	bne.n	800203c <HAL_TIM_ConfigClockSource+0x1c>
 8002038:	2302      	movs	r3, #2
 800203a:	e0b4      	b.n	80021a6 <HAL_TIM_ConfigClockSource+0x186>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2202      	movs	r2, #2
 8002048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800205a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002062:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68ba      	ldr	r2, [r7, #8]
 800206a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002074:	d03e      	beq.n	80020f4 <HAL_TIM_ConfigClockSource+0xd4>
 8002076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800207a:	f200 8087 	bhi.w	800218c <HAL_TIM_ConfigClockSource+0x16c>
 800207e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002082:	f000 8086 	beq.w	8002192 <HAL_TIM_ConfigClockSource+0x172>
 8002086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800208a:	d87f      	bhi.n	800218c <HAL_TIM_ConfigClockSource+0x16c>
 800208c:	2b70      	cmp	r3, #112	; 0x70
 800208e:	d01a      	beq.n	80020c6 <HAL_TIM_ConfigClockSource+0xa6>
 8002090:	2b70      	cmp	r3, #112	; 0x70
 8002092:	d87b      	bhi.n	800218c <HAL_TIM_ConfigClockSource+0x16c>
 8002094:	2b60      	cmp	r3, #96	; 0x60
 8002096:	d050      	beq.n	800213a <HAL_TIM_ConfigClockSource+0x11a>
 8002098:	2b60      	cmp	r3, #96	; 0x60
 800209a:	d877      	bhi.n	800218c <HAL_TIM_ConfigClockSource+0x16c>
 800209c:	2b50      	cmp	r3, #80	; 0x50
 800209e:	d03c      	beq.n	800211a <HAL_TIM_ConfigClockSource+0xfa>
 80020a0:	2b50      	cmp	r3, #80	; 0x50
 80020a2:	d873      	bhi.n	800218c <HAL_TIM_ConfigClockSource+0x16c>
 80020a4:	2b40      	cmp	r3, #64	; 0x40
 80020a6:	d058      	beq.n	800215a <HAL_TIM_ConfigClockSource+0x13a>
 80020a8:	2b40      	cmp	r3, #64	; 0x40
 80020aa:	d86f      	bhi.n	800218c <HAL_TIM_ConfigClockSource+0x16c>
 80020ac:	2b30      	cmp	r3, #48	; 0x30
 80020ae:	d064      	beq.n	800217a <HAL_TIM_ConfigClockSource+0x15a>
 80020b0:	2b30      	cmp	r3, #48	; 0x30
 80020b2:	d86b      	bhi.n	800218c <HAL_TIM_ConfigClockSource+0x16c>
 80020b4:	2b20      	cmp	r3, #32
 80020b6:	d060      	beq.n	800217a <HAL_TIM_ConfigClockSource+0x15a>
 80020b8:	2b20      	cmp	r3, #32
 80020ba:	d867      	bhi.n	800218c <HAL_TIM_ConfigClockSource+0x16c>
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d05c      	beq.n	800217a <HAL_TIM_ConfigClockSource+0x15a>
 80020c0:	2b10      	cmp	r3, #16
 80020c2:	d05a      	beq.n	800217a <HAL_TIM_ConfigClockSource+0x15a>
 80020c4:	e062      	b.n	800218c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	6899      	ldr	r1, [r3, #8]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	f000 f965 	bl	80023a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	609a      	str	r2, [r3, #8]
      break;
 80020f2:	e04f      	b.n	8002194 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6818      	ldr	r0, [r3, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	6899      	ldr	r1, [r3, #8]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f000 f94e 	bl	80023a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002116:	609a      	str	r2, [r3, #8]
      break;
 8002118:	e03c      	b.n	8002194 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6818      	ldr	r0, [r3, #0]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	6859      	ldr	r1, [r3, #4]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	461a      	mov	r2, r3
 8002128:	f000 f8c2 	bl	80022b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2150      	movs	r1, #80	; 0x50
 8002132:	4618      	mov	r0, r3
 8002134:	f000 f91b 	bl	800236e <TIM_ITRx_SetConfig>
      break;
 8002138:	e02c      	b.n	8002194 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6818      	ldr	r0, [r3, #0]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	6859      	ldr	r1, [r3, #4]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	461a      	mov	r2, r3
 8002148:	f000 f8e1 	bl	800230e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2160      	movs	r1, #96	; 0x60
 8002152:	4618      	mov	r0, r3
 8002154:	f000 f90b 	bl	800236e <TIM_ITRx_SetConfig>
      break;
 8002158:	e01c      	b.n	8002194 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	6859      	ldr	r1, [r3, #4]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	461a      	mov	r2, r3
 8002168:	f000 f8a2 	bl	80022b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2140      	movs	r1, #64	; 0x40
 8002172:	4618      	mov	r0, r3
 8002174:	f000 f8fb 	bl	800236e <TIM_ITRx_SetConfig>
      break;
 8002178:	e00c      	b.n	8002194 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4619      	mov	r1, r3
 8002184:	4610      	mov	r0, r2
 8002186:	f000 f8f2 	bl	800236e <TIM_ITRx_SetConfig>
      break;
 800218a:	e003      	b.n	8002194 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
      break;
 8002190:	e000      	b.n	8002194 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002192:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a34      	ldr	r2, [pc, #208]	; (8002294 <TIM_Base_SetConfig+0xe4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d00f      	beq.n	80021e8 <TIM_Base_SetConfig+0x38>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ce:	d00b      	beq.n	80021e8 <TIM_Base_SetConfig+0x38>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a31      	ldr	r2, [pc, #196]	; (8002298 <TIM_Base_SetConfig+0xe8>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d007      	beq.n	80021e8 <TIM_Base_SetConfig+0x38>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a30      	ldr	r2, [pc, #192]	; (800229c <TIM_Base_SetConfig+0xec>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d003      	beq.n	80021e8 <TIM_Base_SetConfig+0x38>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a2f      	ldr	r2, [pc, #188]	; (80022a0 <TIM_Base_SetConfig+0xf0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d108      	bne.n	80021fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a25      	ldr	r2, [pc, #148]	; (8002294 <TIM_Base_SetConfig+0xe4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d01b      	beq.n	800223a <TIM_Base_SetConfig+0x8a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002208:	d017      	beq.n	800223a <TIM_Base_SetConfig+0x8a>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a22      	ldr	r2, [pc, #136]	; (8002298 <TIM_Base_SetConfig+0xe8>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d013      	beq.n	800223a <TIM_Base_SetConfig+0x8a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a21      	ldr	r2, [pc, #132]	; (800229c <TIM_Base_SetConfig+0xec>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00f      	beq.n	800223a <TIM_Base_SetConfig+0x8a>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a20      	ldr	r2, [pc, #128]	; (80022a0 <TIM_Base_SetConfig+0xf0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d00b      	beq.n	800223a <TIM_Base_SetConfig+0x8a>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a1f      	ldr	r2, [pc, #124]	; (80022a4 <TIM_Base_SetConfig+0xf4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d007      	beq.n	800223a <TIM_Base_SetConfig+0x8a>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a1e      	ldr	r2, [pc, #120]	; (80022a8 <TIM_Base_SetConfig+0xf8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d003      	beq.n	800223a <TIM_Base_SetConfig+0x8a>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a1d      	ldr	r2, [pc, #116]	; (80022ac <TIM_Base_SetConfig+0xfc>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d108      	bne.n	800224c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4313      	orrs	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	4313      	orrs	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a08      	ldr	r2, [pc, #32]	; (8002294 <TIM_Base_SetConfig+0xe4>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d103      	bne.n	8002280 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	615a      	str	r2, [r3, #20]
}
 8002286:	bf00      	nop
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40010000 	.word	0x40010000
 8002298:	40000400 	.word	0x40000400
 800229c:	40000800 	.word	0x40000800
 80022a0:	40000c00 	.word	0x40000c00
 80022a4:	40014000 	.word	0x40014000
 80022a8:	40014400 	.word	0x40014400
 80022ac:	40014800 	.word	0x40014800

080022b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	f023 0201 	bic.w	r2, r3, #1
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f023 030a 	bic.w	r3, r3, #10
 80022ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	621a      	str	r2, [r3, #32]
}
 8002302:	bf00      	nop
 8002304:	371c      	adds	r7, #28
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800230e:	b480      	push	{r7}
 8002310:	b087      	sub	sp, #28
 8002312:	af00      	add	r7, sp, #0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	f023 0210 	bic.w	r2, r3, #16
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002338:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	031b      	lsls	r3, r3, #12
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	4313      	orrs	r3, r2
 8002342:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800234a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	621a      	str	r2, [r3, #32]
}
 8002362:	bf00      	nop
 8002364:	371c      	adds	r7, #28
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800236e:	b480      	push	{r7}
 8002370:	b085      	sub	sp, #20
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002384:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4313      	orrs	r3, r2
 800238c:	f043 0307 	orr.w	r3, r3, #7
 8002390:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	609a      	str	r2, [r3, #8]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b087      	sub	sp, #28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
 80023b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	021a      	lsls	r2, r3, #8
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	431a      	orrs	r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	609a      	str	r2, [r3, #8]
}
 80023d8:	bf00      	nop
 80023da:	371c      	adds	r7, #28
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d101      	bne.n	80023fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e050      	b.n	800249e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2202      	movs	r2, #2
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002422:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	4313      	orrs	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a1c      	ldr	r2, [pc, #112]	; (80024ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d018      	beq.n	8002472 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002448:	d013      	beq.n	8002472 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a18      	ldr	r2, [pc, #96]	; (80024b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d00e      	beq.n	8002472 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a16      	ldr	r2, [pc, #88]	; (80024b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d009      	beq.n	8002472 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a15      	ldr	r2, [pc, #84]	; (80024b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d004      	beq.n	8002472 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a13      	ldr	r2, [pc, #76]	; (80024bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d10c      	bne.n	800248c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002478:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	4313      	orrs	r3, r2
 8002482:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40010000 	.word	0x40010000
 80024b0:	40000400 	.word	0x40000400
 80024b4:	40000800 	.word	0x40000800
 80024b8:	40000c00 	.word	0x40000c00
 80024bc:	40014000 	.word	0x40014000

080024c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e03f      	b.n	8002552 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d106      	bne.n	80024ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7fe fc2a 	bl	8000d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2224      	movs	r2, #36	; 0x24
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002502:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 fddf 	bl	80030c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	691a      	ldr	r2, [r3, #16]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002518:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695a      	ldr	r2, [r3, #20]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002528:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002538:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2220      	movs	r2, #32
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2220      	movs	r2, #32
 800254c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b08a      	sub	sp, #40	; 0x28
 800255e:	af02      	add	r7, sp, #8
 8002560:	60f8      	str	r0, [r7, #12]
 8002562:	60b9      	str	r1, [r7, #8]
 8002564:	603b      	str	r3, [r7, #0]
 8002566:	4613      	mov	r3, r2
 8002568:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b20      	cmp	r3, #32
 8002578:	d17c      	bne.n	8002674 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <HAL_UART_Transmit+0x2c>
 8002580:	88fb      	ldrh	r3, [r7, #6]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e075      	b.n	8002676 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_UART_Transmit+0x3e>
 8002594:	2302      	movs	r3, #2
 8002596:	e06e      	b.n	8002676 <HAL_UART_Transmit+0x11c>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2221      	movs	r2, #33	; 0x21
 80025aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025ae:	f7fe fca7 	bl	8000f00 <HAL_GetTick>
 80025b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	88fa      	ldrh	r2, [r7, #6]
 80025b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	88fa      	ldrh	r2, [r7, #6]
 80025be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025c8:	d108      	bne.n	80025dc <HAL_UART_Transmit+0x82>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d104      	bne.n	80025dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	61bb      	str	r3, [r7, #24]
 80025da:	e003      	b.n	80025e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80025ec:	e02a      	b.n	8002644 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2200      	movs	r2, #0
 80025f6:	2180      	movs	r1, #128	; 0x80
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 fb1f 	bl	8002c3c <UART_WaitOnFlagUntilTimeout>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e036      	b.n	8002676 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10b      	bne.n	8002626 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800261c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	3302      	adds	r3, #2
 8002622:	61bb      	str	r3, [r7, #24]
 8002624:	e007      	b.n	8002636 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	781a      	ldrb	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	3301      	adds	r3, #1
 8002634:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800263a:	b29b      	uxth	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002648:	b29b      	uxth	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1cf      	bne.n	80025ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	2200      	movs	r2, #0
 8002656:	2140      	movs	r1, #64	; 0x40
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 faef 	bl	8002c3c <UART_WaitOnFlagUntilTimeout>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e006      	b.n	8002676 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	e000      	b.n	8002676 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002674:	2302      	movs	r3, #2
  }
}
 8002676:	4618      	mov	r0, r3
 8002678:	3720      	adds	r7, #32
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b084      	sub	sp, #16
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	4613      	mov	r3, r2
 800268a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b20      	cmp	r3, #32
 8002696:	d11d      	bne.n	80026d4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <HAL_UART_Receive_IT+0x26>
 800269e:	88fb      	ldrh	r3, [r7, #6]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e016      	b.n	80026d6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d101      	bne.n	80026b6 <HAL_UART_Receive_IT+0x38>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e00f      	b.n	80026d6 <HAL_UART_Receive_IT+0x58>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80026c4:	88fb      	ldrh	r3, [r7, #6]
 80026c6:	461a      	mov	r2, r3
 80026c8:	68b9      	ldr	r1, [r7, #8]
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 fb24 	bl	8002d18 <UART_Start_Receive_IT>
 80026d0:	4603      	mov	r3, r0
 80026d2:	e000      	b.n	80026d6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80026d4:	2302      	movs	r3, #2
  }
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b0ba      	sub	sp, #232	; 0xe8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002706:	2300      	movs	r3, #0
 8002708:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800270c:	2300      	movs	r3, #0
 800270e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800271e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10f      	bne.n	8002746 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800272a:	f003 0320 	and.w	r3, r3, #32
 800272e:	2b00      	cmp	r3, #0
 8002730:	d009      	beq.n	8002746 <HAL_UART_IRQHandler+0x66>
 8002732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002736:	f003 0320 	and.w	r3, r3, #32
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 fc07 	bl	8002f52 <UART_Receive_IT>
      return;
 8002744:	e256      	b.n	8002bf4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002746:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 80de 	beq.w	800290c <HAL_UART_IRQHandler+0x22c>
 8002750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d106      	bne.n	800276a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800275c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002760:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80d1 	beq.w	800290c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800276a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00b      	beq.n	800278e <HAL_UART_IRQHandler+0xae>
 8002776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800277a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277e:	2b00      	cmp	r3, #0
 8002780:	d005      	beq.n	800278e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f043 0201 	orr.w	r2, r3, #1
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800278e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00b      	beq.n	80027b2 <HAL_UART_IRQHandler+0xd2>
 800279a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d005      	beq.n	80027b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f043 0202 	orr.w	r2, r3, #2
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00b      	beq.n	80027d6 <HAL_UART_IRQHandler+0xf6>
 80027be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	f043 0204 	orr.w	r2, r3, #4
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80027d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d011      	beq.n	8002806 <HAL_UART_IRQHandler+0x126>
 80027e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027e6:	f003 0320 	and.w	r3, r3, #32
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d105      	bne.n	80027fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80027ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d005      	beq.n	8002806 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f043 0208 	orr.w	r2, r3, #8
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 81ed 	beq.w	8002bea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <HAL_UART_IRQHandler+0x14e>
 800281c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 fb92 	bl	8002f52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002838:	2b40      	cmp	r3, #64	; 0x40
 800283a:	bf0c      	ite	eq
 800283c:	2301      	moveq	r3, #1
 800283e:	2300      	movne	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d103      	bne.n	800285a <HAL_UART_IRQHandler+0x17a>
 8002852:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002856:	2b00      	cmp	r3, #0
 8002858:	d04f      	beq.n	80028fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fa9a 	bl	8002d94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286a:	2b40      	cmp	r3, #64	; 0x40
 800286c:	d141      	bne.n	80028f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	3314      	adds	r3, #20
 8002874:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002878:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800287c:	e853 3f00 	ldrex	r3, [r3]
 8002880:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002884:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800288c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	3314      	adds	r3, #20
 8002896:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800289a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800289e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80028a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80028aa:	e841 2300 	strex	r3, r2, [r1]
 80028ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80028b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1d9      	bne.n	800286e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d013      	beq.n	80028ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c6:	4a7d      	ldr	r2, [pc, #500]	; (8002abc <HAL_UART_IRQHandler+0x3dc>)
 80028c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fe fca3 	bl	800121a <HAL_DMA_Abort_IT>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d016      	beq.n	8002908 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028e4:	4610      	mov	r0, r2
 80028e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e8:	e00e      	b.n	8002908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f990 	bl	8002c10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f0:	e00a      	b.n	8002908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f98c 	bl	8002c10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f8:	e006      	b.n	8002908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f988 	bl	8002c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002906:	e170      	b.n	8002bea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002908:	bf00      	nop
    return;
 800290a:	e16e      	b.n	8002bea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	2b01      	cmp	r3, #1
 8002912:	f040 814a 	bne.w	8002baa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800291a:	f003 0310 	and.w	r3, r3, #16
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 8143 	beq.w	8002baa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 813c 	beq.w	8002baa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002932:	2300      	movs	r3, #0
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002952:	2b40      	cmp	r3, #64	; 0x40
 8002954:	f040 80b4 	bne.w	8002ac0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002964:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 8140 	beq.w	8002bee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002972:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002976:	429a      	cmp	r2, r3
 8002978:	f080 8139 	bcs.w	8002bee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002982:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800298e:	f000 8088 	beq.w	8002aa2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	330c      	adds	r3, #12
 8002998:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029a0:	e853 3f00 	ldrex	r3, [r3]
 80029a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80029a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	330c      	adds	r3, #12
 80029ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80029be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80029ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80029ce:	e841 2300 	strex	r3, r2, [r1]
 80029d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80029d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1d9      	bne.n	8002992 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	3314      	adds	r3, #20
 80029e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029e8:	e853 3f00 	ldrex	r3, [r3]
 80029ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80029ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029f0:	f023 0301 	bic.w	r3, r3, #1
 80029f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	3314      	adds	r3, #20
 80029fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a02:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a06:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a0e:	e841 2300 	strex	r3, r2, [r1]
 8002a12:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1e1      	bne.n	80029de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3314      	adds	r3, #20
 8002a20:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a24:	e853 3f00 	ldrex	r3, [r3]
 8002a28:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	3314      	adds	r3, #20
 8002a3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a46:	e841 2300 	strex	r3, r2, [r1]
 8002a4a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002a4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1e3      	bne.n	8002a1a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2220      	movs	r2, #32
 8002a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	330c      	adds	r3, #12
 8002a66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a6a:	e853 3f00 	ldrex	r3, [r3]
 8002a6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a72:	f023 0310 	bic.w	r3, r3, #16
 8002a76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	330c      	adds	r3, #12
 8002a80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002a84:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a86:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a8c:	e841 2300 	strex	r3, r2, [r1]
 8002a90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1e3      	bne.n	8002a60 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fe fb4c 	bl	800113a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f8b6 	bl	8002c24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ab8:	e099      	b.n	8002bee <HAL_UART_IRQHandler+0x50e>
 8002aba:	bf00      	nop
 8002abc:	08002e5b 	.word	0x08002e5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 808b 	beq.w	8002bf2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002adc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 8086 	beq.w	8002bf2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	330c      	adds	r3, #12
 8002aec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af0:	e853 3f00 	ldrex	r3, [r3]
 8002af4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002afc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	330c      	adds	r3, #12
 8002b06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002b0a:	647a      	str	r2, [r7, #68]	; 0x44
 8002b0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b12:	e841 2300 	strex	r3, r2, [r1]
 8002b16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1e3      	bne.n	8002ae6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	3314      	adds	r3, #20
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	e853 3f00 	ldrex	r3, [r3]
 8002b2c:	623b      	str	r3, [r7, #32]
   return(result);
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	f023 0301 	bic.w	r3, r3, #1
 8002b34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	3314      	adds	r3, #20
 8002b3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b42:	633a      	str	r2, [r7, #48]	; 0x30
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b4a:	e841 2300 	strex	r3, r2, [r1]
 8002b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1e3      	bne.n	8002b1e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	330c      	adds	r3, #12
 8002b6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	e853 3f00 	ldrex	r3, [r3]
 8002b72:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 0310 	bic.w	r3, r3, #16
 8002b7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	330c      	adds	r3, #12
 8002b84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002b88:	61fa      	str	r2, [r7, #28]
 8002b8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8c:	69b9      	ldr	r1, [r7, #24]
 8002b8e:	69fa      	ldr	r2, [r7, #28]
 8002b90:	e841 2300 	strex	r3, r2, [r1]
 8002b94:	617b      	str	r3, [r7, #20]
   return(result);
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1e3      	bne.n	8002b64 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f83e 	bl	8002c24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ba8:	e023      	b.n	8002bf2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d009      	beq.n	8002bca <HAL_UART_IRQHandler+0x4ea>
 8002bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f95d 	bl	8002e82 <UART_Transmit_IT>
    return;
 8002bc8:	e014      	b.n	8002bf4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00e      	beq.n	8002bf4 <HAL_UART_IRQHandler+0x514>
 8002bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d008      	beq.n	8002bf4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f99d 	bl	8002f22 <UART_EndTransmit_IT>
    return;
 8002be8:	e004      	b.n	8002bf4 <HAL_UART_IRQHandler+0x514>
    return;
 8002bea:	bf00      	nop
 8002bec:	e002      	b.n	8002bf4 <HAL_UART_IRQHandler+0x514>
      return;
 8002bee:	bf00      	nop
 8002bf0:	e000      	b.n	8002bf4 <HAL_UART_IRQHandler+0x514>
      return;
 8002bf2:	bf00      	nop
  }
}
 8002bf4:	37e8      	adds	r7, #232	; 0xe8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop

08002bfc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b090      	sub	sp, #64	; 0x40
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	603b      	str	r3, [r7, #0]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c4c:	e050      	b.n	8002cf0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c54:	d04c      	beq.n	8002cf0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d007      	beq.n	8002c6c <UART_WaitOnFlagUntilTimeout+0x30>
 8002c5c:	f7fe f950 	bl	8000f00 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d241      	bcs.n	8002cf0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	330c      	adds	r3, #12
 8002c72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c76:	e853 3f00 	ldrex	r3, [r3]
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	330c      	adds	r3, #12
 8002c8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c8c:	637a      	str	r2, [r7, #52]	; 0x34
 8002c8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c94:	e841 2300 	strex	r3, r2, [r1]
 8002c98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1e5      	bne.n	8002c6c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3314      	adds	r3, #20
 8002ca6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	e853 3f00 	ldrex	r3, [r3]
 8002cae:	613b      	str	r3, [r7, #16]
   return(result);
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	f023 0301 	bic.w	r3, r3, #1
 8002cb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	3314      	adds	r3, #20
 8002cbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cc0:	623a      	str	r2, [r7, #32]
 8002cc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc4:	69f9      	ldr	r1, [r7, #28]
 8002cc6:	6a3a      	ldr	r2, [r7, #32]
 8002cc8:	e841 2300 	strex	r3, r2, [r1]
 8002ccc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1e5      	bne.n	8002ca0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e00f      	b.n	8002d10 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	bf0c      	ite	eq
 8002d00:	2301      	moveq	r3, #1
 8002d02:	2300      	movne	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d09f      	beq.n	8002c4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3740      	adds	r7, #64	; 0x40
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	4613      	mov	r3, r2
 8002d24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	88fa      	ldrh	r2, [r7, #6]
 8002d30:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	88fa      	ldrh	r2, [r7, #6]
 8002d36:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2222      	movs	r2, #34	; 0x22
 8002d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d007      	beq.n	8002d66 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d64:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695a      	ldr	r2, [r3, #20]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f042 0201 	orr.w	r2, r2, #1
 8002d74:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f042 0220 	orr.w	r2, r2, #32
 8002d84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b095      	sub	sp, #84	; 0x54
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	330c      	adds	r3, #12
 8002da2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da6:	e853 3f00 	ldrex	r3, [r3]
 8002daa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	330c      	adds	r3, #12
 8002dba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dbc:	643a      	str	r2, [r7, #64]	; 0x40
 8002dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002dc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002dc4:	e841 2300 	strex	r3, r2, [r1]
 8002dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1e5      	bne.n	8002d9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	3314      	adds	r3, #20
 8002dd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	e853 3f00 	ldrex	r3, [r3]
 8002dde:	61fb      	str	r3, [r7, #28]
   return(result);
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	f023 0301 	bic.w	r3, r3, #1
 8002de6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	3314      	adds	r3, #20
 8002dee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002df0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002df2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002df8:	e841 2300 	strex	r3, r2, [r1]
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1e5      	bne.n	8002dd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d119      	bne.n	8002e40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	330c      	adds	r3, #12
 8002e12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	e853 3f00 	ldrex	r3, [r3]
 8002e1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f023 0310 	bic.w	r3, r3, #16
 8002e22:	647b      	str	r3, [r7, #68]	; 0x44
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	330c      	adds	r3, #12
 8002e2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e2c:	61ba      	str	r2, [r7, #24]
 8002e2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e30:	6979      	ldr	r1, [r7, #20]
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	e841 2300 	strex	r3, r2, [r1]
 8002e38:	613b      	str	r3, [r7, #16]
   return(result);
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1e5      	bne.n	8002e0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e4e:	bf00      	nop
 8002e50:	3754      	adds	r7, #84	; 0x54
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f7ff fecb 	bl	8002c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e7a:	bf00      	nop
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b085      	sub	sp, #20
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b21      	cmp	r3, #33	; 0x21
 8002e94:	d13e      	bne.n	8002f14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e9e:	d114      	bne.n	8002eca <UART_Transmit_IT+0x48>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d110      	bne.n	8002eca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ebc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	1c9a      	adds	r2, r3, #2
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	621a      	str	r2, [r3, #32]
 8002ec8:	e008      	b.n	8002edc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	1c59      	adds	r1, r3, #1
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6211      	str	r1, [r2, #32]
 8002ed4:	781a      	ldrb	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4619      	mov	r1, r3
 8002eea:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10f      	bne.n	8002f10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002efe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	e000      	b.n	8002f16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f14:	2302      	movs	r3, #2
  }
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff fe5a 	bl	8002bfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b08c      	sub	sp, #48	; 0x30
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b22      	cmp	r3, #34	; 0x22
 8002f64:	f040 80ab 	bne.w	80030be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f70:	d117      	bne.n	8002fa2 <UART_Receive_IT+0x50>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d113      	bne.n	8002fa2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f82:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9a:	1c9a      	adds	r2, r3, #2
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	629a      	str	r2, [r3, #40]	; 0x28
 8002fa0:	e026      	b.n	8002ff0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb4:	d007      	beq.n	8002fc6 <UART_Receive_IT+0x74>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10a      	bne.n	8002fd4 <UART_Receive_IT+0x82>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd0:	701a      	strb	r2, [r3, #0]
 8002fd2:	e008      	b.n	8002fe6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003000:	2b00      	cmp	r3, #0
 8003002:	d15a      	bne.n	80030ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0220 	bic.w	r2, r2, #32
 8003012:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003022:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0201 	bic.w	r2, r2, #1
 8003032:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	2b01      	cmp	r3, #1
 8003042:	d135      	bne.n	80030b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	330c      	adds	r3, #12
 8003050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	e853 3f00 	ldrex	r3, [r3]
 8003058:	613b      	str	r3, [r7, #16]
   return(result);
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	f023 0310 	bic.w	r3, r3, #16
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	330c      	adds	r3, #12
 8003068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306a:	623a      	str	r2, [r7, #32]
 800306c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306e:	69f9      	ldr	r1, [r7, #28]
 8003070:	6a3a      	ldr	r2, [r7, #32]
 8003072:	e841 2300 	strex	r3, r2, [r1]
 8003076:	61bb      	str	r3, [r7, #24]
   return(result);
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1e5      	bne.n	800304a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	2b10      	cmp	r3, #16
 800308a:	d10a      	bne.n	80030a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800308c:	2300      	movs	r3, #0
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030a6:	4619      	mov	r1, r3
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7ff fdbb 	bl	8002c24 <HAL_UARTEx_RxEventCallback>
 80030ae:	e002      	b.n	80030b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7fd fa97 	bl	80005e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	e002      	b.n	80030c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	e000      	b.n	80030c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80030be:	2302      	movs	r3, #2
  }
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3730      	adds	r7, #48	; 0x30
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030cc:	b0c0      	sub	sp, #256	; 0x100
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80030e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e4:	68d9      	ldr	r1, [r3, #12]
 80030e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	ea40 0301 	orr.w	r3, r0, r1
 80030f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	431a      	orrs	r2, r3
 8003100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	431a      	orrs	r2, r3
 8003108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003120:	f021 010c 	bic.w	r1, r1, #12
 8003124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800312e:	430b      	orrs	r3, r1
 8003130:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800313e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003142:	6999      	ldr	r1, [r3, #24]
 8003144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	ea40 0301 	orr.w	r3, r0, r1
 800314e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	4b8f      	ldr	r3, [pc, #572]	; (8003394 <UART_SetConfig+0x2cc>)
 8003158:	429a      	cmp	r2, r3
 800315a:	d005      	beq.n	8003168 <UART_SetConfig+0xa0>
 800315c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	4b8d      	ldr	r3, [pc, #564]	; (8003398 <UART_SetConfig+0x2d0>)
 8003164:	429a      	cmp	r2, r3
 8003166:	d104      	bne.n	8003172 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003168:	f7fe fe9c 	bl	8001ea4 <HAL_RCC_GetPCLK2Freq>
 800316c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003170:	e003      	b.n	800317a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003172:	f7fe fe83 	bl	8001e7c <HAL_RCC_GetPCLK1Freq>
 8003176:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800317a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003184:	f040 810c 	bne.w	80033a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800318c:	2200      	movs	r2, #0
 800318e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003192:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003196:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800319a:	4622      	mov	r2, r4
 800319c:	462b      	mov	r3, r5
 800319e:	1891      	adds	r1, r2, r2
 80031a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80031a2:	415b      	adcs	r3, r3
 80031a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031aa:	4621      	mov	r1, r4
 80031ac:	eb12 0801 	adds.w	r8, r2, r1
 80031b0:	4629      	mov	r1, r5
 80031b2:	eb43 0901 	adc.w	r9, r3, r1
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	f04f 0300 	mov.w	r3, #0
 80031be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031ca:	4690      	mov	r8, r2
 80031cc:	4699      	mov	r9, r3
 80031ce:	4623      	mov	r3, r4
 80031d0:	eb18 0303 	adds.w	r3, r8, r3
 80031d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80031d8:	462b      	mov	r3, r5
 80031da:	eb49 0303 	adc.w	r3, r9, r3
 80031de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80031f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80031f6:	460b      	mov	r3, r1
 80031f8:	18db      	adds	r3, r3, r3
 80031fa:	653b      	str	r3, [r7, #80]	; 0x50
 80031fc:	4613      	mov	r3, r2
 80031fe:	eb42 0303 	adc.w	r3, r2, r3
 8003202:	657b      	str	r3, [r7, #84]	; 0x54
 8003204:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003208:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800320c:	f7fc ffec 	bl	80001e8 <__aeabi_uldivmod>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4b61      	ldr	r3, [pc, #388]	; (800339c <UART_SetConfig+0x2d4>)
 8003216:	fba3 2302 	umull	r2, r3, r3, r2
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	011c      	lsls	r4, r3, #4
 800321e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003222:	2200      	movs	r2, #0
 8003224:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003228:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800322c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003230:	4642      	mov	r2, r8
 8003232:	464b      	mov	r3, r9
 8003234:	1891      	adds	r1, r2, r2
 8003236:	64b9      	str	r1, [r7, #72]	; 0x48
 8003238:	415b      	adcs	r3, r3
 800323a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800323c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003240:	4641      	mov	r1, r8
 8003242:	eb12 0a01 	adds.w	sl, r2, r1
 8003246:	4649      	mov	r1, r9
 8003248:	eb43 0b01 	adc.w	fp, r3, r1
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003258:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800325c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003260:	4692      	mov	sl, r2
 8003262:	469b      	mov	fp, r3
 8003264:	4643      	mov	r3, r8
 8003266:	eb1a 0303 	adds.w	r3, sl, r3
 800326a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800326e:	464b      	mov	r3, r9
 8003270:	eb4b 0303 	adc.w	r3, fp, r3
 8003274:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003284:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003288:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800328c:	460b      	mov	r3, r1
 800328e:	18db      	adds	r3, r3, r3
 8003290:	643b      	str	r3, [r7, #64]	; 0x40
 8003292:	4613      	mov	r3, r2
 8003294:	eb42 0303 	adc.w	r3, r2, r3
 8003298:	647b      	str	r3, [r7, #68]	; 0x44
 800329a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800329e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80032a2:	f7fc ffa1 	bl	80001e8 <__aeabi_uldivmod>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4611      	mov	r1, r2
 80032ac:	4b3b      	ldr	r3, [pc, #236]	; (800339c <UART_SetConfig+0x2d4>)
 80032ae:	fba3 2301 	umull	r2, r3, r3, r1
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	2264      	movs	r2, #100	; 0x64
 80032b6:	fb02 f303 	mul.w	r3, r2, r3
 80032ba:	1acb      	subs	r3, r1, r3
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80032c2:	4b36      	ldr	r3, [pc, #216]	; (800339c <UART_SetConfig+0x2d4>)
 80032c4:	fba3 2302 	umull	r2, r3, r3, r2
 80032c8:	095b      	lsrs	r3, r3, #5
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032d0:	441c      	add	r4, r3
 80032d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032d6:	2200      	movs	r2, #0
 80032d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80032e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80032e4:	4642      	mov	r2, r8
 80032e6:	464b      	mov	r3, r9
 80032e8:	1891      	adds	r1, r2, r2
 80032ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80032ec:	415b      	adcs	r3, r3
 80032ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032f4:	4641      	mov	r1, r8
 80032f6:	1851      	adds	r1, r2, r1
 80032f8:	6339      	str	r1, [r7, #48]	; 0x30
 80032fa:	4649      	mov	r1, r9
 80032fc:	414b      	adcs	r3, r1
 80032fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800330c:	4659      	mov	r1, fp
 800330e:	00cb      	lsls	r3, r1, #3
 8003310:	4651      	mov	r1, sl
 8003312:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003316:	4651      	mov	r1, sl
 8003318:	00ca      	lsls	r2, r1, #3
 800331a:	4610      	mov	r0, r2
 800331c:	4619      	mov	r1, r3
 800331e:	4603      	mov	r3, r0
 8003320:	4642      	mov	r2, r8
 8003322:	189b      	adds	r3, r3, r2
 8003324:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003328:	464b      	mov	r3, r9
 800332a:	460a      	mov	r2, r1
 800332c:	eb42 0303 	adc.w	r3, r2, r3
 8003330:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003340:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003344:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003348:	460b      	mov	r3, r1
 800334a:	18db      	adds	r3, r3, r3
 800334c:	62bb      	str	r3, [r7, #40]	; 0x28
 800334e:	4613      	mov	r3, r2
 8003350:	eb42 0303 	adc.w	r3, r2, r3
 8003354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003356:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800335a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800335e:	f7fc ff43 	bl	80001e8 <__aeabi_uldivmod>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4b0d      	ldr	r3, [pc, #52]	; (800339c <UART_SetConfig+0x2d4>)
 8003368:	fba3 1302 	umull	r1, r3, r3, r2
 800336c:	095b      	lsrs	r3, r3, #5
 800336e:	2164      	movs	r1, #100	; 0x64
 8003370:	fb01 f303 	mul.w	r3, r1, r3
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	3332      	adds	r3, #50	; 0x32
 800337a:	4a08      	ldr	r2, [pc, #32]	; (800339c <UART_SetConfig+0x2d4>)
 800337c:	fba2 2303 	umull	r2, r3, r2, r3
 8003380:	095b      	lsrs	r3, r3, #5
 8003382:	f003 0207 	and.w	r2, r3, #7
 8003386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4422      	add	r2, r4
 800338e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003390:	e106      	b.n	80035a0 <UART_SetConfig+0x4d8>
 8003392:	bf00      	nop
 8003394:	40011000 	.word	0x40011000
 8003398:	40011400 	.word	0x40011400
 800339c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033a4:	2200      	movs	r2, #0
 80033a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80033ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80033b2:	4642      	mov	r2, r8
 80033b4:	464b      	mov	r3, r9
 80033b6:	1891      	adds	r1, r2, r2
 80033b8:	6239      	str	r1, [r7, #32]
 80033ba:	415b      	adcs	r3, r3
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
 80033be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033c2:	4641      	mov	r1, r8
 80033c4:	1854      	adds	r4, r2, r1
 80033c6:	4649      	mov	r1, r9
 80033c8:	eb43 0501 	adc.w	r5, r3, r1
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	f04f 0300 	mov.w	r3, #0
 80033d4:	00eb      	lsls	r3, r5, #3
 80033d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033da:	00e2      	lsls	r2, r4, #3
 80033dc:	4614      	mov	r4, r2
 80033de:	461d      	mov	r5, r3
 80033e0:	4643      	mov	r3, r8
 80033e2:	18e3      	adds	r3, r4, r3
 80033e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033e8:	464b      	mov	r3, r9
 80033ea:	eb45 0303 	adc.w	r3, r5, r3
 80033ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80033f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80033fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003402:	f04f 0200 	mov.w	r2, #0
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800340e:	4629      	mov	r1, r5
 8003410:	008b      	lsls	r3, r1, #2
 8003412:	4621      	mov	r1, r4
 8003414:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003418:	4621      	mov	r1, r4
 800341a:	008a      	lsls	r2, r1, #2
 800341c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003420:	f7fc fee2 	bl	80001e8 <__aeabi_uldivmod>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4b60      	ldr	r3, [pc, #384]	; (80035ac <UART_SetConfig+0x4e4>)
 800342a:	fba3 2302 	umull	r2, r3, r3, r2
 800342e:	095b      	lsrs	r3, r3, #5
 8003430:	011c      	lsls	r4, r3, #4
 8003432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003436:	2200      	movs	r2, #0
 8003438:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800343c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003440:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003444:	4642      	mov	r2, r8
 8003446:	464b      	mov	r3, r9
 8003448:	1891      	adds	r1, r2, r2
 800344a:	61b9      	str	r1, [r7, #24]
 800344c:	415b      	adcs	r3, r3
 800344e:	61fb      	str	r3, [r7, #28]
 8003450:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003454:	4641      	mov	r1, r8
 8003456:	1851      	adds	r1, r2, r1
 8003458:	6139      	str	r1, [r7, #16]
 800345a:	4649      	mov	r1, r9
 800345c:	414b      	adcs	r3, r1
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800346c:	4659      	mov	r1, fp
 800346e:	00cb      	lsls	r3, r1, #3
 8003470:	4651      	mov	r1, sl
 8003472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003476:	4651      	mov	r1, sl
 8003478:	00ca      	lsls	r2, r1, #3
 800347a:	4610      	mov	r0, r2
 800347c:	4619      	mov	r1, r3
 800347e:	4603      	mov	r3, r0
 8003480:	4642      	mov	r2, r8
 8003482:	189b      	adds	r3, r3, r2
 8003484:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003488:	464b      	mov	r3, r9
 800348a:	460a      	mov	r2, r1
 800348c:	eb42 0303 	adc.w	r3, r2, r3
 8003490:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	67bb      	str	r3, [r7, #120]	; 0x78
 800349e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80034ac:	4649      	mov	r1, r9
 80034ae:	008b      	lsls	r3, r1, #2
 80034b0:	4641      	mov	r1, r8
 80034b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034b6:	4641      	mov	r1, r8
 80034b8:	008a      	lsls	r2, r1, #2
 80034ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034be:	f7fc fe93 	bl	80001e8 <__aeabi_uldivmod>
 80034c2:	4602      	mov	r2, r0
 80034c4:	460b      	mov	r3, r1
 80034c6:	4611      	mov	r1, r2
 80034c8:	4b38      	ldr	r3, [pc, #224]	; (80035ac <UART_SetConfig+0x4e4>)
 80034ca:	fba3 2301 	umull	r2, r3, r3, r1
 80034ce:	095b      	lsrs	r3, r3, #5
 80034d0:	2264      	movs	r2, #100	; 0x64
 80034d2:	fb02 f303 	mul.w	r3, r2, r3
 80034d6:	1acb      	subs	r3, r1, r3
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	3332      	adds	r3, #50	; 0x32
 80034dc:	4a33      	ldr	r2, [pc, #204]	; (80035ac <UART_SetConfig+0x4e4>)
 80034de:	fba2 2303 	umull	r2, r3, r2, r3
 80034e2:	095b      	lsrs	r3, r3, #5
 80034e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034e8:	441c      	add	r4, r3
 80034ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ee:	2200      	movs	r2, #0
 80034f0:	673b      	str	r3, [r7, #112]	; 0x70
 80034f2:	677a      	str	r2, [r7, #116]	; 0x74
 80034f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80034f8:	4642      	mov	r2, r8
 80034fa:	464b      	mov	r3, r9
 80034fc:	1891      	adds	r1, r2, r2
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	415b      	adcs	r3, r3
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003508:	4641      	mov	r1, r8
 800350a:	1851      	adds	r1, r2, r1
 800350c:	6039      	str	r1, [r7, #0]
 800350e:	4649      	mov	r1, r9
 8003510:	414b      	adcs	r3, r1
 8003512:	607b      	str	r3, [r7, #4]
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003520:	4659      	mov	r1, fp
 8003522:	00cb      	lsls	r3, r1, #3
 8003524:	4651      	mov	r1, sl
 8003526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800352a:	4651      	mov	r1, sl
 800352c:	00ca      	lsls	r2, r1, #3
 800352e:	4610      	mov	r0, r2
 8003530:	4619      	mov	r1, r3
 8003532:	4603      	mov	r3, r0
 8003534:	4642      	mov	r2, r8
 8003536:	189b      	adds	r3, r3, r2
 8003538:	66bb      	str	r3, [r7, #104]	; 0x68
 800353a:	464b      	mov	r3, r9
 800353c:	460a      	mov	r2, r1
 800353e:	eb42 0303 	adc.w	r3, r2, r3
 8003542:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	663b      	str	r3, [r7, #96]	; 0x60
 800354e:	667a      	str	r2, [r7, #100]	; 0x64
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	f04f 0300 	mov.w	r3, #0
 8003558:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800355c:	4649      	mov	r1, r9
 800355e:	008b      	lsls	r3, r1, #2
 8003560:	4641      	mov	r1, r8
 8003562:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003566:	4641      	mov	r1, r8
 8003568:	008a      	lsls	r2, r1, #2
 800356a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800356e:	f7fc fe3b 	bl	80001e8 <__aeabi_uldivmod>
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <UART_SetConfig+0x4e4>)
 8003578:	fba3 1302 	umull	r1, r3, r3, r2
 800357c:	095b      	lsrs	r3, r3, #5
 800357e:	2164      	movs	r1, #100	; 0x64
 8003580:	fb01 f303 	mul.w	r3, r1, r3
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	3332      	adds	r3, #50	; 0x32
 800358a:	4a08      	ldr	r2, [pc, #32]	; (80035ac <UART_SetConfig+0x4e4>)
 800358c:	fba2 2303 	umull	r2, r3, r2, r3
 8003590:	095b      	lsrs	r3, r3, #5
 8003592:	f003 020f 	and.w	r2, r3, #15
 8003596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4422      	add	r2, r4
 800359e:	609a      	str	r2, [r3, #8]
}
 80035a0:	bf00      	nop
 80035a2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80035a6:	46bd      	mov	sp, r7
 80035a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ac:	51eb851f 	.word	0x51eb851f

080035b0 <atoi>:
 80035b0:	220a      	movs	r2, #10
 80035b2:	2100      	movs	r1, #0
 80035b4:	f000 b882 	b.w	80036bc <strtol>

080035b8 <_strtol_l.constprop.0>:
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035be:	d001      	beq.n	80035c4 <_strtol_l.constprop.0+0xc>
 80035c0:	2b24      	cmp	r3, #36	; 0x24
 80035c2:	d906      	bls.n	80035d2 <_strtol_l.constprop.0+0x1a>
 80035c4:	f000 f88c 	bl	80036e0 <__errno>
 80035c8:	2316      	movs	r3, #22
 80035ca:	6003      	str	r3, [r0, #0]
 80035cc:	2000      	movs	r0, #0
 80035ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80036b8 <_strtol_l.constprop.0+0x100>
 80035d6:	460d      	mov	r5, r1
 80035d8:	462e      	mov	r6, r5
 80035da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80035de:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80035e2:	f017 0708 	ands.w	r7, r7, #8
 80035e6:	d1f7      	bne.n	80035d8 <_strtol_l.constprop.0+0x20>
 80035e8:	2c2d      	cmp	r4, #45	; 0x2d
 80035ea:	d132      	bne.n	8003652 <_strtol_l.constprop.0+0x9a>
 80035ec:	782c      	ldrb	r4, [r5, #0]
 80035ee:	2701      	movs	r7, #1
 80035f0:	1cb5      	adds	r5, r6, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d05b      	beq.n	80036ae <_strtol_l.constprop.0+0xf6>
 80035f6:	2b10      	cmp	r3, #16
 80035f8:	d109      	bne.n	800360e <_strtol_l.constprop.0+0x56>
 80035fa:	2c30      	cmp	r4, #48	; 0x30
 80035fc:	d107      	bne.n	800360e <_strtol_l.constprop.0+0x56>
 80035fe:	782c      	ldrb	r4, [r5, #0]
 8003600:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003604:	2c58      	cmp	r4, #88	; 0x58
 8003606:	d14d      	bne.n	80036a4 <_strtol_l.constprop.0+0xec>
 8003608:	786c      	ldrb	r4, [r5, #1]
 800360a:	2310      	movs	r3, #16
 800360c:	3502      	adds	r5, #2
 800360e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003612:	f108 38ff 	add.w	r8, r8, #4294967295
 8003616:	f04f 0e00 	mov.w	lr, #0
 800361a:	fbb8 f9f3 	udiv	r9, r8, r3
 800361e:	4676      	mov	r6, lr
 8003620:	fb03 8a19 	mls	sl, r3, r9, r8
 8003624:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003628:	f1bc 0f09 	cmp.w	ip, #9
 800362c:	d816      	bhi.n	800365c <_strtol_l.constprop.0+0xa4>
 800362e:	4664      	mov	r4, ip
 8003630:	42a3      	cmp	r3, r4
 8003632:	dd24      	ble.n	800367e <_strtol_l.constprop.0+0xc6>
 8003634:	f1be 3fff 	cmp.w	lr, #4294967295
 8003638:	d008      	beq.n	800364c <_strtol_l.constprop.0+0x94>
 800363a:	45b1      	cmp	r9, r6
 800363c:	d31c      	bcc.n	8003678 <_strtol_l.constprop.0+0xc0>
 800363e:	d101      	bne.n	8003644 <_strtol_l.constprop.0+0x8c>
 8003640:	45a2      	cmp	sl, r4
 8003642:	db19      	blt.n	8003678 <_strtol_l.constprop.0+0xc0>
 8003644:	fb06 4603 	mla	r6, r6, r3, r4
 8003648:	f04f 0e01 	mov.w	lr, #1
 800364c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003650:	e7e8      	b.n	8003624 <_strtol_l.constprop.0+0x6c>
 8003652:	2c2b      	cmp	r4, #43	; 0x2b
 8003654:	bf04      	itt	eq
 8003656:	782c      	ldrbeq	r4, [r5, #0]
 8003658:	1cb5      	addeq	r5, r6, #2
 800365a:	e7ca      	b.n	80035f2 <_strtol_l.constprop.0+0x3a>
 800365c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003660:	f1bc 0f19 	cmp.w	ip, #25
 8003664:	d801      	bhi.n	800366a <_strtol_l.constprop.0+0xb2>
 8003666:	3c37      	subs	r4, #55	; 0x37
 8003668:	e7e2      	b.n	8003630 <_strtol_l.constprop.0+0x78>
 800366a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800366e:	f1bc 0f19 	cmp.w	ip, #25
 8003672:	d804      	bhi.n	800367e <_strtol_l.constprop.0+0xc6>
 8003674:	3c57      	subs	r4, #87	; 0x57
 8003676:	e7db      	b.n	8003630 <_strtol_l.constprop.0+0x78>
 8003678:	f04f 3eff 	mov.w	lr, #4294967295
 800367c:	e7e6      	b.n	800364c <_strtol_l.constprop.0+0x94>
 800367e:	f1be 3fff 	cmp.w	lr, #4294967295
 8003682:	d105      	bne.n	8003690 <_strtol_l.constprop.0+0xd8>
 8003684:	2322      	movs	r3, #34	; 0x22
 8003686:	6003      	str	r3, [r0, #0]
 8003688:	4646      	mov	r6, r8
 800368a:	b942      	cbnz	r2, 800369e <_strtol_l.constprop.0+0xe6>
 800368c:	4630      	mov	r0, r6
 800368e:	e79e      	b.n	80035ce <_strtol_l.constprop.0+0x16>
 8003690:	b107      	cbz	r7, 8003694 <_strtol_l.constprop.0+0xdc>
 8003692:	4276      	negs	r6, r6
 8003694:	2a00      	cmp	r2, #0
 8003696:	d0f9      	beq.n	800368c <_strtol_l.constprop.0+0xd4>
 8003698:	f1be 0f00 	cmp.w	lr, #0
 800369c:	d000      	beq.n	80036a0 <_strtol_l.constprop.0+0xe8>
 800369e:	1e69      	subs	r1, r5, #1
 80036a0:	6011      	str	r1, [r2, #0]
 80036a2:	e7f3      	b.n	800368c <_strtol_l.constprop.0+0xd4>
 80036a4:	2430      	movs	r4, #48	; 0x30
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1b1      	bne.n	800360e <_strtol_l.constprop.0+0x56>
 80036aa:	2308      	movs	r3, #8
 80036ac:	e7af      	b.n	800360e <_strtol_l.constprop.0+0x56>
 80036ae:	2c30      	cmp	r4, #48	; 0x30
 80036b0:	d0a5      	beq.n	80035fe <_strtol_l.constprop.0+0x46>
 80036b2:	230a      	movs	r3, #10
 80036b4:	e7ab      	b.n	800360e <_strtol_l.constprop.0+0x56>
 80036b6:	bf00      	nop
 80036b8:	08003765 	.word	0x08003765

080036bc <strtol>:
 80036bc:	4613      	mov	r3, r2
 80036be:	460a      	mov	r2, r1
 80036c0:	4601      	mov	r1, r0
 80036c2:	4802      	ldr	r0, [pc, #8]	; (80036cc <strtol+0x10>)
 80036c4:	6800      	ldr	r0, [r0, #0]
 80036c6:	f7ff bf77 	b.w	80035b8 <_strtol_l.constprop.0>
 80036ca:	bf00      	nop
 80036cc:	20000058 	.word	0x20000058

080036d0 <memset>:
 80036d0:	4402      	add	r2, r0
 80036d2:	4603      	mov	r3, r0
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d100      	bne.n	80036da <memset+0xa>
 80036d8:	4770      	bx	lr
 80036da:	f803 1b01 	strb.w	r1, [r3], #1
 80036de:	e7f9      	b.n	80036d4 <memset+0x4>

080036e0 <__errno>:
 80036e0:	4b01      	ldr	r3, [pc, #4]	; (80036e8 <__errno+0x8>)
 80036e2:	6818      	ldr	r0, [r3, #0]
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	20000058 	.word	0x20000058

080036ec <__libc_init_array>:
 80036ec:	b570      	push	{r4, r5, r6, lr}
 80036ee:	4d0d      	ldr	r5, [pc, #52]	; (8003724 <__libc_init_array+0x38>)
 80036f0:	4c0d      	ldr	r4, [pc, #52]	; (8003728 <__libc_init_array+0x3c>)
 80036f2:	1b64      	subs	r4, r4, r5
 80036f4:	10a4      	asrs	r4, r4, #2
 80036f6:	2600      	movs	r6, #0
 80036f8:	42a6      	cmp	r6, r4
 80036fa:	d109      	bne.n	8003710 <__libc_init_array+0x24>
 80036fc:	4d0b      	ldr	r5, [pc, #44]	; (800372c <__libc_init_array+0x40>)
 80036fe:	4c0c      	ldr	r4, [pc, #48]	; (8003730 <__libc_init_array+0x44>)
 8003700:	f000 f818 	bl	8003734 <_init>
 8003704:	1b64      	subs	r4, r4, r5
 8003706:	10a4      	asrs	r4, r4, #2
 8003708:	2600      	movs	r6, #0
 800370a:	42a6      	cmp	r6, r4
 800370c:	d105      	bne.n	800371a <__libc_init_array+0x2e>
 800370e:	bd70      	pop	{r4, r5, r6, pc}
 8003710:	f855 3b04 	ldr.w	r3, [r5], #4
 8003714:	4798      	blx	r3
 8003716:	3601      	adds	r6, #1
 8003718:	e7ee      	b.n	80036f8 <__libc_init_array+0xc>
 800371a:	f855 3b04 	ldr.w	r3, [r5], #4
 800371e:	4798      	blx	r3
 8003720:	3601      	adds	r6, #1
 8003722:	e7f2      	b.n	800370a <__libc_init_array+0x1e>
 8003724:	08003870 	.word	0x08003870
 8003728:	08003870 	.word	0x08003870
 800372c:	08003870 	.word	0x08003870
 8003730:	08003874 	.word	0x08003874

08003734 <_init>:
 8003734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003736:	bf00      	nop
 8003738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800373a:	bc08      	pop	{r3}
 800373c:	469e      	mov	lr, r3
 800373e:	4770      	bx	lr

08003740 <_fini>:
 8003740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003742:	bf00      	nop
 8003744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003746:	bc08      	pop	{r3}
 8003748:	469e      	mov	lr, r3
 800374a:	4770      	bx	lr
