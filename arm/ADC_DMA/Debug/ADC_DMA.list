
ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f20  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080040c0  080040c0  000140c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800413c  0800413c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800413c  0800413c  0001413c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004144  08004144  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004144  08004144  00014144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004148  08004148  00014148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800414c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000068  080041b4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  080041b4  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a593  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f5b  00000000  00000000  0002a66e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008d8  00000000  00000000  0002c5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006a6  00000000  00000000  0002cea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017f07  00000000  00000000  0002d54e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cafd  00000000  00000000  00045455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009303a  00000000  00000000  00051f52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002968  00000000  00000000  000e4f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  000e78f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080040a8 	.word	0x080040a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080040a8 	.word	0x080040a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000582:	463b      	mov	r3, r7
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800058e:	4b28      	ldr	r3, [pc, #160]	; (8000630 <MX_ADC1_Init+0xb4>)
 8000590:	4a28      	ldr	r2, [pc, #160]	; (8000634 <MX_ADC1_Init+0xb8>)
 8000592:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000594:	4b26      	ldr	r3, [pc, #152]	; (8000630 <MX_ADC1_Init+0xb4>)
 8000596:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800059a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800059c:	4b24      	ldr	r3, [pc, #144]	; (8000630 <MX_ADC1_Init+0xb4>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005a2:	4b23      	ldr	r3, [pc, #140]	; (8000630 <MX_ADC1_Init+0xb4>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005a8:	4b21      	ldr	r3, [pc, #132]	; (8000630 <MX_ADC1_Init+0xb4>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ae:	4b20      	ldr	r3, [pc, #128]	; (8000630 <MX_ADC1_Init+0xb4>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005b6:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <MX_ADC1_Init+0xb4>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005bc:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <MX_ADC1_Init+0xb4>)
 80005be:	4a1e      	ldr	r2, [pc, #120]	; (8000638 <MX_ADC1_Init+0xbc>)
 80005c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c2:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <MX_ADC1_Init+0xb4>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80005c8:	4b19      	ldr	r3, [pc, #100]	; (8000630 <MX_ADC1_Init+0xb4>)
 80005ca:	2202      	movs	r2, #2
 80005cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005ce:	4b18      	ldr	r3, [pc, #96]	; (8000630 <MX_ADC1_Init+0xb4>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d6:	4b16      	ldr	r3, [pc, #88]	; (8000630 <MX_ADC1_Init+0xb4>)
 80005d8:	2201      	movs	r2, #1
 80005da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005dc:	4814      	ldr	r0, [pc, #80]	; (8000630 <MX_ADC1_Init+0xb4>)
 80005de:	f000 fbdd 	bl	8000d9c <HAL_ADC_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005e8:	f000 f98e 	bl	8000908 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80005ec:	2307      	movs	r3, #7
 80005ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005f0:	2301      	movs	r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80005f4:	2305      	movs	r3, #5
 80005f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f8:	463b      	mov	r3, r7
 80005fa:	4619      	mov	r1, r3
 80005fc:	480c      	ldr	r0, [pc, #48]	; (8000630 <MX_ADC1_Init+0xb4>)
 80005fe:	f000 fd1f 	bl	8001040 <HAL_ADC_ConfigChannel>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000608:	f000 f97e 	bl	8000908 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800060c:	2306      	movs	r3, #6
 800060e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000610:	2302      	movs	r3, #2
 8000612:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000614:	463b      	mov	r3, r7
 8000616:	4619      	mov	r1, r3
 8000618:	4805      	ldr	r0, [pc, #20]	; (8000630 <MX_ADC1_Init+0xb4>)
 800061a:	f000 fd11 	bl	8001040 <HAL_ADC_ConfigChannel>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000624:	f000 f970 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000084 	.word	0x20000084
 8000634:	40012000 	.word	0x40012000
 8000638:	0f000001 	.word	0x0f000001

0800063c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	; 0x28
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a2f      	ldr	r2, [pc, #188]	; (8000718 <HAL_ADC_MspInit+0xdc>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d157      	bne.n	800070e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	4b2e      	ldr	r3, [pc, #184]	; (800071c <HAL_ADC_MspInit+0xe0>)
 8000664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000666:	4a2d      	ldr	r2, [pc, #180]	; (800071c <HAL_ADC_MspInit+0xe0>)
 8000668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800066c:	6453      	str	r3, [r2, #68]	; 0x44
 800066e:	4b2b      	ldr	r3, [pc, #172]	; (800071c <HAL_ADC_MspInit+0xe0>)
 8000670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	4b27      	ldr	r3, [pc, #156]	; (800071c <HAL_ADC_MspInit+0xe0>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a26      	ldr	r2, [pc, #152]	; (800071c <HAL_ADC_MspInit+0xe0>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b24      	ldr	r3, [pc, #144]	; (800071c <HAL_ADC_MspInit+0xe0>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000696:	23c0      	movs	r3, #192	; 0xc0
 8000698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069a:	2303      	movs	r3, #3
 800069c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4619      	mov	r1, r3
 80006a8:	481d      	ldr	r0, [pc, #116]	; (8000720 <HAL_ADC_MspInit+0xe4>)
 80006aa:	f001 fbfb 	bl	8001ea4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006ae:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006b0:	4a1d      	ldr	r2, [pc, #116]	; (8000728 <HAL_ADC_MspInit+0xec>)
 80006b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006b4:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006ba:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c0:	4b18      	ldr	r3, [pc, #96]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006c6:	4b17      	ldr	r3, [pc, #92]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006d6:	4b13      	ldr	r3, [pc, #76]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006e6:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006ec:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006f2:	480c      	ldr	r0, [pc, #48]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006f4:	f001 f866 	bl	80017c4 <HAL_DMA_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80006fe:	f000 f903 	bl	8000908 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4a07      	ldr	r2, [pc, #28]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 8000706:	639a      	str	r2, [r3, #56]	; 0x38
 8000708:	4a06      	ldr	r2, [pc, #24]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800070e:	bf00      	nop
 8000710:	3728      	adds	r7, #40	; 0x28
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40012000 	.word	0x40012000
 800071c:	40023800 	.word	0x40023800
 8000720:	40020000 	.word	0x40020000
 8000724:	200000cc 	.word	0x200000cc
 8000728:	40026410 	.word	0x40026410

0800072c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_DMA_Init+0x3c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a0b      	ldr	r2, [pc, #44]	; (8000768 <MX_DMA_Init+0x3c>)
 800073c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_DMA_Init+0x3c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2100      	movs	r1, #0
 8000752:	2038      	movs	r0, #56	; 0x38
 8000754:	f000 ffff 	bl	8001756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000758:	2038      	movs	r0, #56	; 0x38
 800075a:	f001 f818 	bl	800178e <HAL_NVIC_EnableIRQ>

}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800

0800076c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <MX_GPIO_Init+0x4c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a0f      	ldr	r2, [pc, #60]	; (80007b8 <MX_GPIO_Init+0x4c>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <MX_GPIO_Init+0x4c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_GPIO_Init+0x4c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <MX_GPIO_Init+0x4c>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_GPIO_Init+0x4c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]

}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800

080007bc <__io_putchar>:
  #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80007c4:	1d39      	adds	r1, r7, #4
 80007c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ca:	2201      	movs	r2, #1
 80007cc:	4803      	ldr	r0, [pc, #12]	; (80007dc <__io_putchar+0x20>)
 80007ce:	f002 f9d2 	bl	8002b76 <HAL_UART_Transmit>

  return ch;
 80007d2:	687b      	ldr	r3, [r7, #4]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000134 	.word	0x20000134

080007e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e4:	f000 fa44 	bl	8000c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e8:	f000 f826 	bl	8000838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ec:	f7ff ffbe 	bl	800076c <MX_GPIO_Init>
  MX_DMA_Init();
 80007f0:	f7ff ff9c 	bl	800072c <MX_DMA_Init>
  MX_ADC1_Init();
 80007f4:	f7ff fec2 	bl	800057c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80007f8:	f000 f99e 	bl	8000b38 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, adcValue, 2);
 80007fc:	2202      	movs	r2, #2
 80007fe:	490a      	ldr	r1, [pc, #40]	; (8000828 <main+0x48>)
 8000800:	480a      	ldr	r0, [pc, #40]	; (800082c <main+0x4c>)
 8000802:	f000 fb0f 	bl	8000e24 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    printf("abc_Value1 -> %4d\r\n",adcValue[0]);
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <main+0x48>)
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	4619      	mov	r1, r3
 800080c:	4808      	ldr	r0, [pc, #32]	; (8000830 <main+0x50>)
 800080e:	f002 fdd7 	bl	80033c0 <iprintf>
    printf("abc_Value2 -> %4d\r\n",adcValue[1]);
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <main+0x48>)
 8000814:	885b      	ldrh	r3, [r3, #2]
 8000816:	4619      	mov	r1, r3
 8000818:	4806      	ldr	r0, [pc, #24]	; (8000834 <main+0x54>)
 800081a:	f002 fdd1 	bl	80033c0 <iprintf>
    HAL_Delay(200);
 800081e:	20c8      	movs	r0, #200	; 0xc8
 8000820:	f000 fa98 	bl	8000d54 <HAL_Delay>
    printf("abc_Value1 -> %4d\r\n",adcValue[0]);
 8000824:	e7ef      	b.n	8000806 <main+0x26>
 8000826:	bf00      	nop
 8000828:	2000012c 	.word	0x2000012c
 800082c:	20000084 	.word	0x20000084
 8000830:	080040c0 	.word	0x080040c0
 8000834:	080040d4 	.word	0x080040d4

08000838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b094      	sub	sp, #80	; 0x50
 800083c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083e:	f107 0320 	add.w	r3, r7, #32
 8000842:	2230      	movs	r2, #48	; 0x30
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f002 fe0f 	bl	800346a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	4b27      	ldr	r3, [pc, #156]	; (8000900 <SystemClock_Config+0xc8>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000864:	4a26      	ldr	r2, [pc, #152]	; (8000900 <SystemClock_Config+0xc8>)
 8000866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086a:	6413      	str	r3, [r2, #64]	; 0x40
 800086c:	4b24      	ldr	r3, [pc, #144]	; (8000900 <SystemClock_Config+0xc8>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	4b21      	ldr	r3, [pc, #132]	; (8000904 <SystemClock_Config+0xcc>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a20      	ldr	r2, [pc, #128]	; (8000904 <SystemClock_Config+0xcc>)
 8000882:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000886:	6013      	str	r3, [r2, #0]
 8000888:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <SystemClock_Config+0xcc>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000894:	2301      	movs	r3, #1
 8000896:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000898:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089e:	2302      	movs	r3, #2
 80008a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008a8:	2304      	movs	r3, #4
 80008aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80008ac:	2364      	movs	r3, #100	; 0x64
 80008ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008b4:	2304      	movs	r3, #4
 80008b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b8:	f107 0320 	add.w	r3, r7, #32
 80008bc:	4618      	mov	r0, r3
 80008be:	f001 fc75 	bl	80021ac <HAL_RCC_OscConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008c8:	f000 f81e 	bl	8000908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008cc:	230f      	movs	r3, #15
 80008ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d0:	2302      	movs	r3, #2
 80008d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	2103      	movs	r1, #3
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 fed7 	bl	800269c <HAL_RCC_ClockConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008f4:	f000 f808 	bl	8000908 <Error_Handler>
  }
}
 80008f8:	bf00      	nop
 80008fa:	3750      	adds	r7, #80	; 0x50
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40023800 	.word	0x40023800
 8000904:	40007000 	.word	0x40007000

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
}
 800090e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000910:	e7fe      	b.n	8000910 <Error_Handler+0x8>
	...

08000914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <HAL_MspInit+0x4c>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	4a0f      	ldr	r2, [pc, #60]	; (8000960 <HAL_MspInit+0x4c>)
 8000924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000928:	6453      	str	r3, [r2, #68]	; 0x44
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <HAL_MspInit+0x4c>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_MspInit+0x4c>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	4a08      	ldr	r2, [pc, #32]	; (8000960 <HAL_MspInit+0x4c>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000944:	6413      	str	r3, [r2, #64]	; 0x40
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_MspInit+0x4c>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <NMI_Handler+0x4>

0800096a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <MemManage_Handler+0x4>

08000976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <BusFault_Handler+0x4>

0800097c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <UsageFault_Handler+0x4>

08000982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b0:	f000 f9b0 	bl	8000d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009bc:	4802      	ldr	r0, [pc, #8]	; (80009c8 <DMA2_Stream0_IRQHandler+0x10>)
 80009be:	f001 f807 	bl	80019d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200000cc 	.word	0x200000cc

080009cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	e00a      	b.n	80009f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009de:	f3af 8000 	nop.w
 80009e2:	4601      	mov	r1, r0
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	60ba      	str	r2, [r7, #8]
 80009ea:	b2ca      	uxtb	r2, r1
 80009ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	3301      	adds	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	697a      	ldr	r2, [r7, #20]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	dbf0      	blt.n	80009de <_read+0x12>
  }

  return len;
 80009fc:	687b      	ldr	r3, [r7, #4]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b086      	sub	sp, #24
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	60f8      	str	r0, [r7, #12]
 8000a0e:	60b9      	str	r1, [r7, #8]
 8000a10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	e009      	b.n	8000a2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	1c5a      	adds	r2, r3, #1
 8000a1c:	60ba      	str	r2, [r7, #8]
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fecb 	bl	80007bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	dbf1      	blt.n	8000a18 <_write+0x12>
  }
  return len;
 8000a34:	687b      	ldr	r3, [r7, #4]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <_close>:

int _close(int file)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a66:	605a      	str	r2, [r3, #4]
  return 0;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <_isatty>:

int _isatty(int file)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
	...

08000aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab0:	4a14      	ldr	r2, [pc, #80]	; (8000b04 <_sbrk+0x5c>)
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <_sbrk+0x60>)
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d102      	bne.n	8000aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <_sbrk+0x64>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <_sbrk+0x68>)
 8000ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d207      	bcs.n	8000ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad8:	f002 fd16 	bl	8003508 <__errno>
 8000adc:	4603      	mov	r3, r0
 8000ade:	220c      	movs	r2, #12
 8000ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae6:	e009      	b.n	8000afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <_sbrk+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <_sbrk+0x64>)
 8000af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afa:	68fb      	ldr	r3, [r7, #12]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20020000 	.word	0x20020000
 8000b08:	00000400 	.word	0x00000400
 8000b0c:	20000130 	.word	0x20000130
 8000b10:	200002c8 	.word	0x200002c8

08000b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <SystemInit+0x20>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1e:	4a05      	ldr	r2, [pc, #20]	; (8000b34 <SystemInit+0x20>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <MX_USART2_UART_Init+0x50>)
 8000b40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b5e:	220c      	movs	r2, #12
 8000b60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b70:	f001 ffb4 	bl	8002adc <HAL_UART_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b7a:	f7ff fec5 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000134 	.word	0x20000134
 8000b88:	40004400 	.word	0x40004400

08000b8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a19      	ldr	r2, [pc, #100]	; (8000c10 <HAL_UART_MspInit+0x84>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d12b      	bne.n	8000c06 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <HAL_UART_MspInit+0x88>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	4a17      	ldr	r2, [pc, #92]	; (8000c14 <HAL_UART_MspInit+0x88>)
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <HAL_UART_MspInit+0x88>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <HAL_UART_MspInit+0x88>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a10      	ldr	r2, [pc, #64]	; (8000c14 <HAL_UART_MspInit+0x88>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <HAL_UART_MspInit+0x88>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000be6:	230c      	movs	r3, #12
 8000be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bf6:	2307      	movs	r3, #7
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <HAL_UART_MspInit+0x8c>)
 8000c02:	f001 f94f 	bl	8001ea4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c06:	bf00      	nop
 8000c08:	3728      	adds	r7, #40	; 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40004400 	.word	0x40004400
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020000 	.word	0x40020000

08000c1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c20:	480d      	ldr	r0, [pc, #52]	; (8000c58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c22:	490e      	ldr	r1, [pc, #56]	; (8000c5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c24:	4a0e      	ldr	r2, [pc, #56]	; (8000c60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0b      	ldr	r2, [pc, #44]	; (8000c64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c38:	4c0b      	ldr	r4, [pc, #44]	; (8000c68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c46:	f7ff ff65 	bl	8000b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c4a:	f002 fc63 	bl	8003514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c4e:	f7ff fdc7 	bl	80007e0 <main>
  bx  lr    
 8000c52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c5c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c60:	0800414c 	.word	0x0800414c
  ldr r2, =_sbss
 8000c64:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c68:	200002c8 	.word	0x200002c8

08000c6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c6c:	e7fe      	b.n	8000c6c <ADC_IRQHandler>
	...

08000c70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c74:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <HAL_Init+0x40>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0d      	ldr	r2, [pc, #52]	; (8000cb0 <HAL_Init+0x40>)
 8000c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <HAL_Init+0x40>)
 8000c86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <HAL_Init+0x40>)
 8000c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f000 fd51 	bl	8001740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9e:	200f      	movs	r0, #15
 8000ca0:	f000 f808 	bl	8000cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca4:	f7ff fe36 	bl	8000914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023c00 	.word	0x40023c00

08000cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_InitTick+0x54>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_InitTick+0x58>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 fd69 	bl	80017aa <HAL_SYSTICK_Config>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00e      	b.n	8000d00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b0f      	cmp	r3, #15
 8000ce6:	d80a      	bhi.n	8000cfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f000 fd31 	bl	8001756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf4:	4a06      	ldr	r2, [pc, #24]	; (8000d10 <HAL_InitTick+0x5c>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e000      	b.n	8000d00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000004 	.word	0x20000004

08000d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_IncTick+0x20>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x24>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_IncTick+0x24>)
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000178 	.word	0x20000178

08000d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <HAL_GetTick+0x14>)
 8000d42:	681b      	ldr	r3, [r3, #0]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000178 	.word	0x20000178

08000d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d5c:	f7ff ffee 	bl	8000d3c <HAL_GetTick>
 8000d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d6c:	d005      	beq.n	8000d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <HAL_Delay+0x44>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4413      	add	r3, r2
 8000d78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d7a:	bf00      	nop
 8000d7c:	f7ff ffde 	bl	8000d3c <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d8f7      	bhi.n	8000d7c <HAL_Delay+0x28>
  {
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000008 	.word	0x20000008

08000d9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000da4:	2300      	movs	r3, #0
 8000da6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d101      	bne.n	8000db2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e033      	b.n	8000e1a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d109      	bne.n	8000dce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff fc3e 	bl	800063c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f003 0310 	and.w	r3, r3, #16
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d118      	bne.n	8000e0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000de2:	f023 0302 	bic.w	r3, r3, #2
 8000de6:	f043 0202 	orr.w	r2, r3, #2
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f000 fa58 	bl	80012a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f023 0303 	bic.w	r3, r3, #3
 8000e02:	f043 0201 	orr.w	r2, r3, #1
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	641a      	str	r2, [r3, #64]	; 0x40
 8000e0a:	e001      	b.n	8000e10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d101      	bne.n	8000e42 <HAL_ADC_Start_DMA+0x1e>
 8000e3e:	2302      	movs	r3, #2
 8000e40:	e0ce      	b.n	8000fe0 <HAL_ADC_Start_DMA+0x1bc>
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	2201      	movs	r2, #1
 8000e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d018      	beq.n	8000e8a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	689a      	ldr	r2, [r3, #8]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f042 0201 	orr.w	r2, r2, #1
 8000e66:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e68:	4b5f      	ldr	r3, [pc, #380]	; (8000fe8 <HAL_ADC_Start_DMA+0x1c4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a5f      	ldr	r2, [pc, #380]	; (8000fec <HAL_ADC_Start_DMA+0x1c8>)
 8000e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e72:	0c9a      	lsrs	r2, r3, #18
 8000e74:	4613      	mov	r3, r2
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	4413      	add	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000e7c:	e002      	b.n	8000e84 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1f9      	bne.n	8000e7e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e98:	d107      	bne.n	8000eaa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	689a      	ldr	r2, [r3, #8]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ea8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	f040 8086 	bne.w	8000fc6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ec2:	f023 0301 	bic.w	r3, r3, #1
 8000ec6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d007      	beq.n	8000eec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ee4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ef8:	d106      	bne.n	8000f08 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	f023 0206 	bic.w	r2, r3, #6
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	645a      	str	r2, [r3, #68]	; 0x44
 8000f06:	e002      	b.n	8000f0e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f16:	4b36      	ldr	r3, [pc, #216]	; (8000ff0 <HAL_ADC_Start_DMA+0x1cc>)
 8000f18:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f1e:	4a35      	ldr	r2, [pc, #212]	; (8000ff4 <HAL_ADC_Start_DMA+0x1d0>)
 8000f20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f26:	4a34      	ldr	r2, [pc, #208]	; (8000ff8 <HAL_ADC_Start_DMA+0x1d4>)
 8000f28:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f2e:	4a33      	ldr	r2, [pc, #204]	; (8000ffc <HAL_ADC_Start_DMA+0x1d8>)
 8000f30:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000f3a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000f4a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f5a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	334c      	adds	r3, #76	; 0x4c
 8000f66:	4619      	mov	r1, r3
 8000f68:	68ba      	ldr	r2, [r7, #8]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f000 fcd8 	bl	8001920 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 031f 	and.w	r3, r3, #31
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10f      	bne.n	8000f9c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d129      	bne.n	8000fde <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	e020      	b.n	8000fde <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a17      	ldr	r2, [pc, #92]	; (8001000 <HAL_ADC_Start_DMA+0x1dc>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d11b      	bne.n	8000fde <HAL_ADC_Start_DMA+0x1ba>
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d114      	bne.n	8000fde <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	689a      	ldr	r2, [r3, #8]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	e00b      	b.n	8000fde <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f043 0210 	orr.w	r2, r3, #16
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f043 0201 	orr.w	r2, r3, #1
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	431bde83 	.word	0x431bde83
 8000ff0:	40012300 	.word	0x40012300
 8000ff4:	0800149d 	.word	0x0800149d
 8000ff8:	08001557 	.word	0x08001557
 8000ffc:	08001573 	.word	0x08001573
 8001000:	40012000 	.word	0x40012000

08001004 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001054:	2b01      	cmp	r3, #1
 8001056:	d101      	bne.n	800105c <HAL_ADC_ConfigChannel+0x1c>
 8001058:	2302      	movs	r3, #2
 800105a:	e113      	b.n	8001284 <HAL_ADC_ConfigChannel+0x244>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b09      	cmp	r3, #9
 800106a:	d925      	bls.n	80010b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	68d9      	ldr	r1, [r3, #12]
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	b29b      	uxth	r3, r3
 8001078:	461a      	mov	r2, r3
 800107a:	4613      	mov	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4413      	add	r3, r2
 8001080:	3b1e      	subs	r3, #30
 8001082:	2207      	movs	r2, #7
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43da      	mvns	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	400a      	ands	r2, r1
 8001090:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	68d9      	ldr	r1, [r3, #12]
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	689a      	ldr	r2, [r3, #8]
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	4618      	mov	r0, r3
 80010a4:	4603      	mov	r3, r0
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4403      	add	r3, r0
 80010aa:	3b1e      	subs	r3, #30
 80010ac:	409a      	lsls	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	430a      	orrs	r2, r1
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	e022      	b.n	80010fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6919      	ldr	r1, [r3, #16]
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	461a      	mov	r2, r3
 80010c6:	4613      	mov	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4413      	add	r3, r2
 80010cc:	2207      	movs	r2, #7
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43da      	mvns	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	400a      	ands	r2, r1
 80010da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6919      	ldr	r1, [r3, #16]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	4618      	mov	r0, r3
 80010ee:	4603      	mov	r3, r0
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	4403      	add	r3, r0
 80010f4:	409a      	lsls	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	430a      	orrs	r2, r1
 80010fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b06      	cmp	r3, #6
 8001104:	d824      	bhi.n	8001150 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	4613      	mov	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	3b05      	subs	r3, #5
 8001118:	221f      	movs	r2, #31
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43da      	mvns	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	400a      	ands	r2, r1
 8001126:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	b29b      	uxth	r3, r3
 8001134:	4618      	mov	r0, r3
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	3b05      	subs	r3, #5
 8001142:	fa00 f203 	lsl.w	r2, r0, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	430a      	orrs	r2, r1
 800114c:	635a      	str	r2, [r3, #52]	; 0x34
 800114e:	e04c      	b.n	80011ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b0c      	cmp	r3, #12
 8001156:	d824      	bhi.n	80011a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	4613      	mov	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	3b23      	subs	r3, #35	; 0x23
 800116a:	221f      	movs	r2, #31
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43da      	mvns	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	400a      	ands	r2, r1
 8001178:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	b29b      	uxth	r3, r3
 8001186:	4618      	mov	r0, r3
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	4613      	mov	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	4413      	add	r3, r2
 8001192:	3b23      	subs	r3, #35	; 0x23
 8001194:	fa00 f203 	lsl.w	r2, r0, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	430a      	orrs	r2, r1
 800119e:	631a      	str	r2, [r3, #48]	; 0x30
 80011a0:	e023      	b.n	80011ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	4613      	mov	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	3b41      	subs	r3, #65	; 0x41
 80011b4:	221f      	movs	r2, #31
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43da      	mvns	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	400a      	ands	r2, r1
 80011c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	4618      	mov	r0, r3
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	3b41      	subs	r3, #65	; 0x41
 80011de:	fa00 f203 	lsl.w	r2, r0, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	430a      	orrs	r2, r1
 80011e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011ea:	4b29      	ldr	r3, [pc, #164]	; (8001290 <HAL_ADC_ConfigChannel+0x250>)
 80011ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a28      	ldr	r2, [pc, #160]	; (8001294 <HAL_ADC_ConfigChannel+0x254>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d10f      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x1d8>
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b12      	cmp	r3, #18
 80011fe:	d10b      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a1d      	ldr	r2, [pc, #116]	; (8001294 <HAL_ADC_ConfigChannel+0x254>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d12b      	bne.n	800127a <HAL_ADC_ConfigChannel+0x23a>
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a1c      	ldr	r2, [pc, #112]	; (8001298 <HAL_ADC_ConfigChannel+0x258>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d003      	beq.n	8001234 <HAL_ADC_ConfigChannel+0x1f4>
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b11      	cmp	r3, #17
 8001232:	d122      	bne.n	800127a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a11      	ldr	r2, [pc, #68]	; (8001298 <HAL_ADC_ConfigChannel+0x258>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d111      	bne.n	800127a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <HAL_ADC_ConfigChannel+0x25c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a11      	ldr	r2, [pc, #68]	; (80012a0 <HAL_ADC_ConfigChannel+0x260>)
 800125c:	fba2 2303 	umull	r2, r3, r2, r3
 8001260:	0c9a      	lsrs	r2, r3, #18
 8001262:	4613      	mov	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800126c:	e002      	b.n	8001274 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	3b01      	subs	r3, #1
 8001272:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1f9      	bne.n	800126e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	40012300 	.word	0x40012300
 8001294:	40012000 	.word	0x40012000
 8001298:	10000012 	.word	0x10000012
 800129c:	20000000 	.word	0x20000000
 80012a0:	431bde83 	.word	0x431bde83

080012a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012ac:	4b79      	ldr	r3, [pc, #484]	; (8001494 <ADC_Init+0x1f0>)
 80012ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	431a      	orrs	r2, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6859      	ldr	r1, [r3, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	691b      	ldr	r3, [r3, #16]
 80012e4:	021a      	lsls	r2, r3, #8
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	430a      	orrs	r2, r1
 80012ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80012fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6859      	ldr	r1, [r3, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	430a      	orrs	r2, r1
 800130e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800131e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6899      	ldr	r1, [r3, #8]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	430a      	orrs	r2, r1
 8001330:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001336:	4a58      	ldr	r2, [pc, #352]	; (8001498 <ADC_Init+0x1f4>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d022      	beq.n	8001382 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800134a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6899      	ldr	r1, [r3, #8]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	430a      	orrs	r2, r1
 800135c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800136c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6899      	ldr	r1, [r3, #8]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	430a      	orrs	r2, r1
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	e00f      	b.n	80013a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001390:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 0202 	bic.w	r2, r2, #2
 80013b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6899      	ldr	r1, [r3, #8]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	7e1b      	ldrb	r3, [r3, #24]
 80013bc:	005a      	lsls	r2, r3, #1
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d01b      	beq.n	8001408 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80013ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6859      	ldr	r1, [r3, #4]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fa:	3b01      	subs	r3, #1
 80013fc:	035a      	lsls	r2, r3, #13
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	e007      	b.n	8001418 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001416:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001426:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	3b01      	subs	r3, #1
 8001434:	051a      	lsls	r2, r3, #20
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	430a      	orrs	r2, r1
 800143c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800144c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6899      	ldr	r1, [r3, #8]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800145a:	025a      	lsls	r2, r3, #9
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	430a      	orrs	r2, r1
 8001462:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001472:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6899      	ldr	r1, [r3, #8]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	029a      	lsls	r2, r3, #10
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	430a      	orrs	r2, r1
 8001486:	609a      	str	r2, [r3, #8]
}
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	40012300 	.word	0x40012300
 8001498:	0f000001 	.word	0x0f000001

0800149c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d13c      	bne.n	8001530 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d12b      	bne.n	8001528 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d127      	bne.n	8001528 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d006      	beq.n	80014f4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d119      	bne.n	8001528 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0220 	bic.w	r2, r2, #32
 8001502:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d105      	bne.n	8001528 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	f043 0201 	orr.w	r2, r3, #1
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f7ff fd6b 	bl	8001004 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800152e:	e00e      	b.n	800154e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f003 0310 	and.w	r3, r3, #16
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f7ff fd75 	bl	800102c <HAL_ADC_ErrorCallback>
}
 8001542:	e004      	b.n	800154e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	4798      	blx	r3
}
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b084      	sub	sp, #16
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001562:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f7ff fd57 	bl	8001018 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b084      	sub	sp, #16
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800157e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2240      	movs	r2, #64	; 0x40
 8001584:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	f043 0204 	orr.w	r2, r3, #4
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f7ff fd4a 	bl	800102c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015bc:	4013      	ands	r3, r2
 80015be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d2:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	60d3      	str	r3, [r2, #12]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <__NVIC_GetPriorityGrouping+0x18>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	0a1b      	lsrs	r3, r3, #8
 80015f2:	f003 0307 	and.w	r3, r3, #7
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	2b00      	cmp	r3, #0
 8001614:	db0b      	blt.n	800162e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	f003 021f 	and.w	r2, r3, #31
 800161c:	4907      	ldr	r1, [pc, #28]	; (800163c <__NVIC_EnableIRQ+0x38>)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	095b      	lsrs	r3, r3, #5
 8001624:	2001      	movs	r0, #1
 8001626:	fa00 f202 	lsl.w	r2, r0, r2
 800162a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000e100 	.word	0xe000e100

08001640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	db0a      	blt.n	800166a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	490c      	ldr	r1, [pc, #48]	; (800168c <__NVIC_SetPriority+0x4c>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	0112      	lsls	r2, r2, #4
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	440b      	add	r3, r1
 8001664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001668:	e00a      	b.n	8001680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4908      	ldr	r1, [pc, #32]	; (8001690 <__NVIC_SetPriority+0x50>)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	3b04      	subs	r3, #4
 8001678:	0112      	lsls	r2, r2, #4
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	440b      	add	r3, r1
 800167e:	761a      	strb	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000e100 	.word	0xe000e100
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001694:	b480      	push	{r7}
 8001696:	b089      	sub	sp, #36	; 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f1c3 0307 	rsb	r3, r3, #7
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	bf28      	it	cs
 80016b2:	2304      	movcs	r3, #4
 80016b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3304      	adds	r3, #4
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d902      	bls.n	80016c4 <NVIC_EncodePriority+0x30>
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3b03      	subs	r3, #3
 80016c2:	e000      	b.n	80016c6 <NVIC_EncodePriority+0x32>
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	f04f 32ff 	mov.w	r2, #4294967295
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43da      	mvns	r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	401a      	ands	r2, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016dc:	f04f 31ff 	mov.w	r1, #4294967295
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	43d9      	mvns	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	4313      	orrs	r3, r2
         );
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3724      	adds	r7, #36	; 0x24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800170c:	d301      	bcc.n	8001712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800170e:	2301      	movs	r3, #1
 8001710:	e00f      	b.n	8001732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <SysTick_Config+0x40>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3b01      	subs	r3, #1
 8001718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171a:	210f      	movs	r1, #15
 800171c:	f04f 30ff 	mov.w	r0, #4294967295
 8001720:	f7ff ff8e 	bl	8001640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <SysTick_Config+0x40>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <SysTick_Config+0x40>)
 800172c:	2207      	movs	r2, #7
 800172e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	e000e010 	.word	0xe000e010

08001740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ff29 	bl	80015a0 <__NVIC_SetPriorityGrouping>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001768:	f7ff ff3e 	bl	80015e8 <__NVIC_GetPriorityGrouping>
 800176c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	68b9      	ldr	r1, [r7, #8]
 8001772:	6978      	ldr	r0, [r7, #20]
 8001774:	f7ff ff8e 	bl	8001694 <NVIC_EncodePriority>
 8001778:	4602      	mov	r2, r0
 800177a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff5d 	bl	8001640 <__NVIC_SetPriority>
}
 8001786:	bf00      	nop
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff31 	bl	8001604 <__NVIC_EnableIRQ>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff ffa2 	bl	80016fc <SysTick_Config>
 80017b8:	4603      	mov	r3, r0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017d0:	f7ff fab4 	bl	8000d3c <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e099      	b.n	8001914 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2202      	movs	r2, #2
 80017e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 0201 	bic.w	r2, r2, #1
 80017fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001800:	e00f      	b.n	8001822 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001802:	f7ff fa9b 	bl	8000d3c <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b05      	cmp	r3, #5
 800180e:	d908      	bls.n	8001822 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2220      	movs	r2, #32
 8001814:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2203      	movs	r2, #3
 800181a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e078      	b.n	8001914 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1e8      	bne.n	8001802 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	4b38      	ldr	r3, [pc, #224]	; (800191c <HAL_DMA_Init+0x158>)
 800183c:	4013      	ands	r3, r2
 800183e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800184e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800185a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001866:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	4313      	orrs	r3, r2
 8001872:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	2b04      	cmp	r3, #4
 800187a:	d107      	bne.n	800188c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	4313      	orrs	r3, r2
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	4313      	orrs	r3, r2
 800188a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f023 0307 	bic.w	r3, r3, #7
 80018a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d117      	bne.n	80018e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	4313      	orrs	r3, r2
 80018be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00e      	beq.n	80018e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 fa6f 	bl	8001dac <DMA_CheckFifoParam>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d008      	beq.n	80018e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2240      	movs	r2, #64	; 0x40
 80018d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80018e2:	2301      	movs	r3, #1
 80018e4:	e016      	b.n	8001914 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 fa26 	bl	8001d40 <DMA_CalcBaseAndBitshift>
 80018f4:	4603      	mov	r3, r0
 80018f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fc:	223f      	movs	r2, #63	; 0x3f
 80018fe:	409a      	lsls	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	f010803f 	.word	0xf010803f

08001920 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001936:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800193e:	2b01      	cmp	r3, #1
 8001940:	d101      	bne.n	8001946 <HAL_DMA_Start_IT+0x26>
 8001942:	2302      	movs	r3, #2
 8001944:	e040      	b.n	80019c8 <HAL_DMA_Start_IT+0xa8>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b01      	cmp	r3, #1
 8001958:	d12f      	bne.n	80019ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2202      	movs	r2, #2
 800195e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 f9b8 	bl	8001ce4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001978:	223f      	movs	r2, #63	; 0x3f
 800197a:	409a      	lsls	r2, r3
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0216 	orr.w	r2, r2, #22
 800198e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	2b00      	cmp	r3, #0
 8001996:	d007      	beq.n	80019a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0208 	orr.w	r2, r2, #8
 80019a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	e005      	b.n	80019c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019c2:	2302      	movs	r3, #2
 80019c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019dc:	4b8e      	ldr	r3, [pc, #568]	; (8001c18 <HAL_DMA_IRQHandler+0x248>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a8e      	ldr	r2, [pc, #568]	; (8001c1c <HAL_DMA_IRQHandler+0x24c>)
 80019e2:	fba2 2303 	umull	r2, r3, r2, r3
 80019e6:	0a9b      	lsrs	r3, r3, #10
 80019e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fa:	2208      	movs	r2, #8
 80019fc:	409a      	lsls	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4013      	ands	r3, r2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d01a      	beq.n	8001a3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d013      	beq.n	8001a3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0204 	bic.w	r2, r2, #4
 8001a22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a28:	2208      	movs	r2, #8
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a34:	f043 0201 	orr.w	r2, r3, #1
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a40:	2201      	movs	r2, #1
 8001a42:	409a      	lsls	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4013      	ands	r3, r2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d012      	beq.n	8001a72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00b      	beq.n	8001a72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a5e:	2201      	movs	r2, #1
 8001a60:	409a      	lsls	r2, r3
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6a:	f043 0202 	orr.w	r2, r3, #2
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a76:	2204      	movs	r2, #4
 8001a78:	409a      	lsls	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d012      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00b      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a94:	2204      	movs	r2, #4
 8001a96:	409a      	lsls	r2, r3
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa0:	f043 0204 	orr.w	r2, r3, #4
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aac:	2210      	movs	r2, #16
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d043      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d03c      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aca:	2210      	movs	r2, #16
 8001acc:	409a      	lsls	r2, r3
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d018      	beq.n	8001b12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d108      	bne.n	8001b00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d024      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	4798      	blx	r3
 8001afe:	e01f      	b.n	8001b40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d01b      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	4798      	blx	r3
 8001b10:	e016      	b.n	8001b40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d107      	bne.n	8001b30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0208 	bic.w	r2, r2, #8
 8001b2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b44:	2220      	movs	r2, #32
 8001b46:	409a      	lsls	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 808f 	beq.w	8001c70 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0310 	and.w	r3, r3, #16
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 8087 	beq.w	8001c70 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b66:	2220      	movs	r2, #32
 8001b68:	409a      	lsls	r2, r3
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b05      	cmp	r3, #5
 8001b78:	d136      	bne.n	8001be8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0216 	bic.w	r2, r2, #22
 8001b88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	695a      	ldr	r2, [r3, #20]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d103      	bne.n	8001baa <HAL_DMA_IRQHandler+0x1da>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0208 	bic.w	r2, r2, #8
 8001bb8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbe:	223f      	movs	r2, #63	; 0x3f
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d07e      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	4798      	blx	r3
        }
        return;
 8001be6:	e079      	b.n	8001cdc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d01d      	beq.n	8001c32 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10d      	bne.n	8001c20 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d031      	beq.n	8001c70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	4798      	blx	r3
 8001c14:	e02c      	b.n	8001c70 <HAL_DMA_IRQHandler+0x2a0>
 8001c16:	bf00      	nop
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d023      	beq.n	8001c70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	4798      	blx	r3
 8001c30:	e01e      	b.n	8001c70 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10f      	bne.n	8001c60 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0210 	bic.w	r2, r2, #16
 8001c4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d032      	beq.n	8001cde <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d022      	beq.n	8001cca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2205      	movs	r2, #5
 8001c88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 0201 	bic.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d307      	bcc.n	8001cb8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f2      	bne.n	8001c9c <HAL_DMA_IRQHandler+0x2cc>
 8001cb6:	e000      	b.n	8001cba <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001cb8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d005      	beq.n	8001cde <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	4798      	blx	r3
 8001cda:	e000      	b.n	8001cde <HAL_DMA_IRQHandler+0x30e>
        return;
 8001cdc:	bf00      	nop
    }
  }
}
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
 8001cf0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2b40      	cmp	r3, #64	; 0x40
 8001d10:	d108      	bne.n	8001d24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d22:	e007      	b.n	8001d34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	60da      	str	r2, [r3, #12]
}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	3b10      	subs	r3, #16
 8001d50:	4a14      	ldr	r2, [pc, #80]	; (8001da4 <DMA_CalcBaseAndBitshift+0x64>)
 8001d52:	fba2 2303 	umull	r2, r3, r2, r3
 8001d56:	091b      	lsrs	r3, r3, #4
 8001d58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d5a:	4a13      	ldr	r2, [pc, #76]	; (8001da8 <DMA_CalcBaseAndBitshift+0x68>)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	d909      	bls.n	8001d82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d76:	f023 0303 	bic.w	r3, r3, #3
 8001d7a:	1d1a      	adds	r2, r3, #4
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	659a      	str	r2, [r3, #88]	; 0x58
 8001d80:	e007      	b.n	8001d92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d8a:	f023 0303 	bic.w	r3, r3, #3
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	aaaaaaab 	.word	0xaaaaaaab
 8001da8:	08004100 	.word	0x08004100

08001dac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d11f      	bne.n	8001e06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	2b03      	cmp	r3, #3
 8001dca:	d856      	bhi.n	8001e7a <DMA_CheckFifoParam+0xce>
 8001dcc:	a201      	add	r2, pc, #4	; (adr r2, 8001dd4 <DMA_CheckFifoParam+0x28>)
 8001dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd2:	bf00      	nop
 8001dd4:	08001de5 	.word	0x08001de5
 8001dd8:	08001df7 	.word	0x08001df7
 8001ddc:	08001de5 	.word	0x08001de5
 8001de0:	08001e7b 	.word	0x08001e7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d046      	beq.n	8001e7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001df4:	e043      	b.n	8001e7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dfe:	d140      	bne.n	8001e82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e04:	e03d      	b.n	8001e82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e0e:	d121      	bne.n	8001e54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d837      	bhi.n	8001e86 <DMA_CheckFifoParam+0xda>
 8001e16:	a201      	add	r2, pc, #4	; (adr r2, 8001e1c <DMA_CheckFifoParam+0x70>)
 8001e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1c:	08001e2d 	.word	0x08001e2d
 8001e20:	08001e33 	.word	0x08001e33
 8001e24:	08001e2d 	.word	0x08001e2d
 8001e28:	08001e45 	.word	0x08001e45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e30:	e030      	b.n	8001e94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d025      	beq.n	8001e8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e42:	e022      	b.n	8001e8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e4c:	d11f      	bne.n	8001e8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e52:	e01c      	b.n	8001e8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d903      	bls.n	8001e62 <DMA_CheckFifoParam+0xb6>
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d003      	beq.n	8001e68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e60:	e018      	b.n	8001e94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	73fb      	strb	r3, [r7, #15]
      break;
 8001e66:	e015      	b.n	8001e94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00e      	beq.n	8001e92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	73fb      	strb	r3, [r7, #15]
      break;
 8001e78:	e00b      	b.n	8001e92 <DMA_CheckFifoParam+0xe6>
      break;
 8001e7a:	bf00      	nop
 8001e7c:	e00a      	b.n	8001e94 <DMA_CheckFifoParam+0xe8>
      break;
 8001e7e:	bf00      	nop
 8001e80:	e008      	b.n	8001e94 <DMA_CheckFifoParam+0xe8>
      break;
 8001e82:	bf00      	nop
 8001e84:	e006      	b.n	8001e94 <DMA_CheckFifoParam+0xe8>
      break;
 8001e86:	bf00      	nop
 8001e88:	e004      	b.n	8001e94 <DMA_CheckFifoParam+0xe8>
      break;
 8001e8a:	bf00      	nop
 8001e8c:	e002      	b.n	8001e94 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e8e:	bf00      	nop
 8001e90:	e000      	b.n	8001e94 <DMA_CheckFifoParam+0xe8>
      break;
 8001e92:	bf00      	nop
    }
  } 
  
  return status; 
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop

08001ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b089      	sub	sp, #36	; 0x24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
 8001ebe:	e159      	b.n	8002174 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	f040 8148 	bne.w	800216e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d005      	beq.n	8001ef6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d130      	bne.n	8001f58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	2203      	movs	r2, #3
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	091b      	lsrs	r3, r3, #4
 8001f42:	f003 0201 	and.w	r2, r3, #1
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	d017      	beq.n	8001f94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	2203      	movs	r2, #3
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d123      	bne.n	8001fe8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	08da      	lsrs	r2, r3, #3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3208      	adds	r2, #8
 8001fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	08da      	lsrs	r2, r3, #3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3208      	adds	r2, #8
 8001fe2:	69b9      	ldr	r1, [r7, #24]
 8001fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 0203 	and.w	r2, r3, #3
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 80a2 	beq.w	800216e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	4b57      	ldr	r3, [pc, #348]	; (800218c <HAL_GPIO_Init+0x2e8>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	4a56      	ldr	r2, [pc, #344]	; (800218c <HAL_GPIO_Init+0x2e8>)
 8002034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002038:	6453      	str	r3, [r2, #68]	; 0x44
 800203a:	4b54      	ldr	r3, [pc, #336]	; (800218c <HAL_GPIO_Init+0x2e8>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002046:	4a52      	ldr	r2, [pc, #328]	; (8002190 <HAL_GPIO_Init+0x2ec>)
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	3302      	adds	r3, #2
 800204e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	220f      	movs	r2, #15
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a49      	ldr	r2, [pc, #292]	; (8002194 <HAL_GPIO_Init+0x2f0>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d019      	beq.n	80020a6 <HAL_GPIO_Init+0x202>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a48      	ldr	r2, [pc, #288]	; (8002198 <HAL_GPIO_Init+0x2f4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d013      	beq.n	80020a2 <HAL_GPIO_Init+0x1fe>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a47      	ldr	r2, [pc, #284]	; (800219c <HAL_GPIO_Init+0x2f8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d00d      	beq.n	800209e <HAL_GPIO_Init+0x1fa>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a46      	ldr	r2, [pc, #280]	; (80021a0 <HAL_GPIO_Init+0x2fc>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d007      	beq.n	800209a <HAL_GPIO_Init+0x1f6>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a45      	ldr	r2, [pc, #276]	; (80021a4 <HAL_GPIO_Init+0x300>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d101      	bne.n	8002096 <HAL_GPIO_Init+0x1f2>
 8002092:	2304      	movs	r3, #4
 8002094:	e008      	b.n	80020a8 <HAL_GPIO_Init+0x204>
 8002096:	2307      	movs	r3, #7
 8002098:	e006      	b.n	80020a8 <HAL_GPIO_Init+0x204>
 800209a:	2303      	movs	r3, #3
 800209c:	e004      	b.n	80020a8 <HAL_GPIO_Init+0x204>
 800209e:	2302      	movs	r3, #2
 80020a0:	e002      	b.n	80020a8 <HAL_GPIO_Init+0x204>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <HAL_GPIO_Init+0x204>
 80020a6:	2300      	movs	r3, #0
 80020a8:	69fa      	ldr	r2, [r7, #28]
 80020aa:	f002 0203 	and.w	r2, r2, #3
 80020ae:	0092      	lsls	r2, r2, #2
 80020b0:	4093      	lsls	r3, r2
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020b8:	4935      	ldr	r1, [pc, #212]	; (8002190 <HAL_GPIO_Init+0x2ec>)
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	089b      	lsrs	r3, r3, #2
 80020be:	3302      	adds	r3, #2
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020c6:	4b38      	ldr	r3, [pc, #224]	; (80021a8 <HAL_GPIO_Init+0x304>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ea:	4a2f      	ldr	r2, [pc, #188]	; (80021a8 <HAL_GPIO_Init+0x304>)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020f0:	4b2d      	ldr	r3, [pc, #180]	; (80021a8 <HAL_GPIO_Init+0x304>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002114:	4a24      	ldr	r2, [pc, #144]	; (80021a8 <HAL_GPIO_Init+0x304>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800211a:	4b23      	ldr	r3, [pc, #140]	; (80021a8 <HAL_GPIO_Init+0x304>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800213e:	4a1a      	ldr	r2, [pc, #104]	; (80021a8 <HAL_GPIO_Init+0x304>)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002144:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <HAL_GPIO_Init+0x304>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002168:	4a0f      	ldr	r2, [pc, #60]	; (80021a8 <HAL_GPIO_Init+0x304>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3301      	adds	r3, #1
 8002172:	61fb      	str	r3, [r7, #28]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	2b0f      	cmp	r3, #15
 8002178:	f67f aea2 	bls.w	8001ec0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	3724      	adds	r7, #36	; 0x24
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800
 8002190:	40013800 	.word	0x40013800
 8002194:	40020000 	.word	0x40020000
 8002198:	40020400 	.word	0x40020400
 800219c:	40020800 	.word	0x40020800
 80021a0:	40020c00 	.word	0x40020c00
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40013c00 	.word	0x40013c00

080021ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e267      	b.n	800268e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d075      	beq.n	80022b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021ca:	4b88      	ldr	r3, [pc, #544]	; (80023ec <HAL_RCC_OscConfig+0x240>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d00c      	beq.n	80021f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021d6:	4b85      	ldr	r3, [pc, #532]	; (80023ec <HAL_RCC_OscConfig+0x240>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d112      	bne.n	8002208 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021e2:	4b82      	ldr	r3, [pc, #520]	; (80023ec <HAL_RCC_OscConfig+0x240>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021ee:	d10b      	bne.n	8002208 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f0:	4b7e      	ldr	r3, [pc, #504]	; (80023ec <HAL_RCC_OscConfig+0x240>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d05b      	beq.n	80022b4 <HAL_RCC_OscConfig+0x108>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d157      	bne.n	80022b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e242      	b.n	800268e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002210:	d106      	bne.n	8002220 <HAL_RCC_OscConfig+0x74>
 8002212:	4b76      	ldr	r3, [pc, #472]	; (80023ec <HAL_RCC_OscConfig+0x240>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a75      	ldr	r2, [pc, #468]	; (80023ec <HAL_RCC_OscConfig+0x240>)
 8002218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	e01d      	b.n	800225c <HAL_RCC_OscConfig+0xb0>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002228:	d10c      	bne.n	8002244 <HAL_RCC_OscConfig+0x98>
 800222a:	4b70      	ldr	r3, [pc, #448]	; (80023ec <HAL_RCC_OscConfig+0x240>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a6f      	ldr	r2, [pc, #444]	; (80023ec <HAL_RCC_OscConfig+0x240>)
 8002230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	4b6d      	ldr	r3, [pc, #436]	; (80023ec <HAL_RCC_OscConfig+0x240>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a6c      	ldr	r2, [pc, #432]	; (80023ec <HAL_RCC_OscConfig+0x240>)
 800223c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	e00b      	b.n	800225c <HAL_RCC_OscConfig+0xb0>
 8002244:	4b69      	ldr	r3, [pc, #420]	; (80023ec <HAL_RCC_OscConfig+0x240>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a68      	ldr	r2, [pc, #416]	; (80023ec <HAL_RCC_OscConfig+0x240>)
 800224a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	4b66      	ldr	r3, [pc, #408]	; (80023ec <HAL_RCC_OscConfig+0x240>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a65      	ldr	r2, [pc, #404]	; (80023ec <HAL_RCC_OscConfig+0x240>)
 8002256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800225a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d013      	beq.n	800228c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7fe fd6a 	bl	8000d3c <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800226c:	f7fe fd66 	bl	8000d3c <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b64      	cmp	r3, #100	; 0x64
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e207      	b.n	800268e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227e:	4b5b      	ldr	r3, [pc, #364]	; (80023ec <HAL_RCC_OscConfig+0x240>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0xc0>
 800228a:	e014      	b.n	80022b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7fe fd56 	bl	8000d3c <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002294:	f7fe fd52 	bl	8000d3c <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b64      	cmp	r3, #100	; 0x64
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e1f3      	b.n	800268e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a6:	4b51      	ldr	r3, [pc, #324]	; (80023ec <HAL_RCC_OscConfig+0x240>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0xe8>
 80022b2:	e000      	b.n	80022b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d063      	beq.n	800238a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022c2:	4b4a      	ldr	r3, [pc, #296]	; (80023ec <HAL_RCC_OscConfig+0x240>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00b      	beq.n	80022e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ce:	4b47      	ldr	r3, [pc, #284]	; (80023ec <HAL_RCC_OscConfig+0x240>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d11c      	bne.n	8002314 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022da:	4b44      	ldr	r3, [pc, #272]	; (80023ec <HAL_RCC_OscConfig+0x240>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d116      	bne.n	8002314 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e6:	4b41      	ldr	r3, [pc, #260]	; (80023ec <HAL_RCC_OscConfig+0x240>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d005      	beq.n	80022fe <HAL_RCC_OscConfig+0x152>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d001      	beq.n	80022fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e1c7      	b.n	800268e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fe:	4b3b      	ldr	r3, [pc, #236]	; (80023ec <HAL_RCC_OscConfig+0x240>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	4937      	ldr	r1, [pc, #220]	; (80023ec <HAL_RCC_OscConfig+0x240>)
 800230e:	4313      	orrs	r3, r2
 8002310:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002312:	e03a      	b.n	800238a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d020      	beq.n	800235e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800231c:	4b34      	ldr	r3, [pc, #208]	; (80023f0 <HAL_RCC_OscConfig+0x244>)
 800231e:	2201      	movs	r2, #1
 8002320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002322:	f7fe fd0b 	bl	8000d3c <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800232a:	f7fe fd07 	bl	8000d3c <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e1a8      	b.n	800268e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233c:	4b2b      	ldr	r3, [pc, #172]	; (80023ec <HAL_RCC_OscConfig+0x240>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f0      	beq.n	800232a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002348:	4b28      	ldr	r3, [pc, #160]	; (80023ec <HAL_RCC_OscConfig+0x240>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4925      	ldr	r1, [pc, #148]	; (80023ec <HAL_RCC_OscConfig+0x240>)
 8002358:	4313      	orrs	r3, r2
 800235a:	600b      	str	r3, [r1, #0]
 800235c:	e015      	b.n	800238a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800235e:	4b24      	ldr	r3, [pc, #144]	; (80023f0 <HAL_RCC_OscConfig+0x244>)
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002364:	f7fe fcea 	bl	8000d3c <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800236c:	f7fe fce6 	bl	8000d3c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e187      	b.n	800268e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237e:	4b1b      	ldr	r3, [pc, #108]	; (80023ec <HAL_RCC_OscConfig+0x240>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f0      	bne.n	800236c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d036      	beq.n	8002404 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d016      	beq.n	80023cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <HAL_RCC_OscConfig+0x248>)
 80023a0:	2201      	movs	r2, #1
 80023a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a4:	f7fe fcca 	bl	8000d3c <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ac:	f7fe fcc6 	bl	8000d3c <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e167      	b.n	800268e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023be:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_RCC_OscConfig+0x240>)
 80023c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f0      	beq.n	80023ac <HAL_RCC_OscConfig+0x200>
 80023ca:	e01b      	b.n	8002404 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023cc:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <HAL_RCC_OscConfig+0x248>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d2:	f7fe fcb3 	bl	8000d3c <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d8:	e00e      	b.n	80023f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023da:	f7fe fcaf 	bl	8000d3c <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d907      	bls.n	80023f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e150      	b.n	800268e <HAL_RCC_OscConfig+0x4e2>
 80023ec:	40023800 	.word	0x40023800
 80023f0:	42470000 	.word	0x42470000
 80023f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f8:	4b88      	ldr	r3, [pc, #544]	; (800261c <HAL_RCC_OscConfig+0x470>)
 80023fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1ea      	bne.n	80023da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 8097 	beq.w	8002540 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002412:	2300      	movs	r3, #0
 8002414:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002416:	4b81      	ldr	r3, [pc, #516]	; (800261c <HAL_RCC_OscConfig+0x470>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10f      	bne.n	8002442 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	4b7d      	ldr	r3, [pc, #500]	; (800261c <HAL_RCC_OscConfig+0x470>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	4a7c      	ldr	r2, [pc, #496]	; (800261c <HAL_RCC_OscConfig+0x470>)
 800242c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002430:	6413      	str	r3, [r2, #64]	; 0x40
 8002432:	4b7a      	ldr	r3, [pc, #488]	; (800261c <HAL_RCC_OscConfig+0x470>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800243e:	2301      	movs	r3, #1
 8002440:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002442:	4b77      	ldr	r3, [pc, #476]	; (8002620 <HAL_RCC_OscConfig+0x474>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244a:	2b00      	cmp	r3, #0
 800244c:	d118      	bne.n	8002480 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800244e:	4b74      	ldr	r3, [pc, #464]	; (8002620 <HAL_RCC_OscConfig+0x474>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a73      	ldr	r2, [pc, #460]	; (8002620 <HAL_RCC_OscConfig+0x474>)
 8002454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800245a:	f7fe fc6f 	bl	8000d3c <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002462:	f7fe fc6b 	bl	8000d3c <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e10c      	b.n	800268e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002474:	4b6a      	ldr	r3, [pc, #424]	; (8002620 <HAL_RCC_OscConfig+0x474>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d106      	bne.n	8002496 <HAL_RCC_OscConfig+0x2ea>
 8002488:	4b64      	ldr	r3, [pc, #400]	; (800261c <HAL_RCC_OscConfig+0x470>)
 800248a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248c:	4a63      	ldr	r2, [pc, #396]	; (800261c <HAL_RCC_OscConfig+0x470>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	6713      	str	r3, [r2, #112]	; 0x70
 8002494:	e01c      	b.n	80024d0 <HAL_RCC_OscConfig+0x324>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	2b05      	cmp	r3, #5
 800249c:	d10c      	bne.n	80024b8 <HAL_RCC_OscConfig+0x30c>
 800249e:	4b5f      	ldr	r3, [pc, #380]	; (800261c <HAL_RCC_OscConfig+0x470>)
 80024a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a2:	4a5e      	ldr	r2, [pc, #376]	; (800261c <HAL_RCC_OscConfig+0x470>)
 80024a4:	f043 0304 	orr.w	r3, r3, #4
 80024a8:	6713      	str	r3, [r2, #112]	; 0x70
 80024aa:	4b5c      	ldr	r3, [pc, #368]	; (800261c <HAL_RCC_OscConfig+0x470>)
 80024ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ae:	4a5b      	ldr	r2, [pc, #364]	; (800261c <HAL_RCC_OscConfig+0x470>)
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	6713      	str	r3, [r2, #112]	; 0x70
 80024b6:	e00b      	b.n	80024d0 <HAL_RCC_OscConfig+0x324>
 80024b8:	4b58      	ldr	r3, [pc, #352]	; (800261c <HAL_RCC_OscConfig+0x470>)
 80024ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024bc:	4a57      	ldr	r2, [pc, #348]	; (800261c <HAL_RCC_OscConfig+0x470>)
 80024be:	f023 0301 	bic.w	r3, r3, #1
 80024c2:	6713      	str	r3, [r2, #112]	; 0x70
 80024c4:	4b55      	ldr	r3, [pc, #340]	; (800261c <HAL_RCC_OscConfig+0x470>)
 80024c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c8:	4a54      	ldr	r2, [pc, #336]	; (800261c <HAL_RCC_OscConfig+0x470>)
 80024ca:	f023 0304 	bic.w	r3, r3, #4
 80024ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d015      	beq.n	8002504 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d8:	f7fe fc30 	bl	8000d3c <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024de:	e00a      	b.n	80024f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e0:	f7fe fc2c 	bl	8000d3c <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e0cb      	b.n	800268e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f6:	4b49      	ldr	r3, [pc, #292]	; (800261c <HAL_RCC_OscConfig+0x470>)
 80024f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0ee      	beq.n	80024e0 <HAL_RCC_OscConfig+0x334>
 8002502:	e014      	b.n	800252e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002504:	f7fe fc1a 	bl	8000d3c <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800250a:	e00a      	b.n	8002522 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800250c:	f7fe fc16 	bl	8000d3c <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	f241 3288 	movw	r2, #5000	; 0x1388
 800251a:	4293      	cmp	r3, r2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e0b5      	b.n	800268e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002522:	4b3e      	ldr	r3, [pc, #248]	; (800261c <HAL_RCC_OscConfig+0x470>)
 8002524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1ee      	bne.n	800250c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800252e:	7dfb      	ldrb	r3, [r7, #23]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d105      	bne.n	8002540 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002534:	4b39      	ldr	r3, [pc, #228]	; (800261c <HAL_RCC_OscConfig+0x470>)
 8002536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002538:	4a38      	ldr	r2, [pc, #224]	; (800261c <HAL_RCC_OscConfig+0x470>)
 800253a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800253e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 80a1 	beq.w	800268c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800254a:	4b34      	ldr	r3, [pc, #208]	; (800261c <HAL_RCC_OscConfig+0x470>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b08      	cmp	r3, #8
 8002554:	d05c      	beq.n	8002610 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d141      	bne.n	80025e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255e:	4b31      	ldr	r3, [pc, #196]	; (8002624 <HAL_RCC_OscConfig+0x478>)
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002564:	f7fe fbea 	bl	8000d3c <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800256c:	f7fe fbe6 	bl	8000d3c <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e087      	b.n	800268e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257e:	4b27      	ldr	r3, [pc, #156]	; (800261c <HAL_RCC_OscConfig+0x470>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69da      	ldr	r2, [r3, #28]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	019b      	lsls	r3, r3, #6
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a0:	085b      	lsrs	r3, r3, #1
 80025a2:	3b01      	subs	r3, #1
 80025a4:	041b      	lsls	r3, r3, #16
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	061b      	lsls	r3, r3, #24
 80025ae:	491b      	ldr	r1, [pc, #108]	; (800261c <HAL_RCC_OscConfig+0x470>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025b4:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <HAL_RCC_OscConfig+0x478>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ba:	f7fe fbbf 	bl	8000d3c <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c2:	f7fe fbbb 	bl	8000d3c <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e05c      	b.n	800268e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d4:	4b11      	ldr	r3, [pc, #68]	; (800261c <HAL_RCC_OscConfig+0x470>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0f0      	beq.n	80025c2 <HAL_RCC_OscConfig+0x416>
 80025e0:	e054      	b.n	800268c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e2:	4b10      	ldr	r3, [pc, #64]	; (8002624 <HAL_RCC_OscConfig+0x478>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e8:	f7fe fba8 	bl	8000d3c <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f0:	f7fe fba4 	bl	8000d3c <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e045      	b.n	800268e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <HAL_RCC_OscConfig+0x470>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x444>
 800260e:	e03d      	b.n	800268c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d107      	bne.n	8002628 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e038      	b.n	800268e <HAL_RCC_OscConfig+0x4e2>
 800261c:	40023800 	.word	0x40023800
 8002620:	40007000 	.word	0x40007000
 8002624:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002628:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <HAL_RCC_OscConfig+0x4ec>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d028      	beq.n	8002688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002640:	429a      	cmp	r2, r3
 8002642:	d121      	bne.n	8002688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800264e:	429a      	cmp	r2, r3
 8002650:	d11a      	bne.n	8002688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002658:	4013      	ands	r3, r2
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800265e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002660:	4293      	cmp	r3, r2
 8002662:	d111      	bne.n	8002688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266e:	085b      	lsrs	r3, r3, #1
 8002670:	3b01      	subs	r3, #1
 8002672:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002674:	429a      	cmp	r2, r3
 8002676:	d107      	bne.n	8002688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002682:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002684:	429a      	cmp	r2, r3
 8002686:	d001      	beq.n	800268c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40023800 	.word	0x40023800

0800269c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0cc      	b.n	800284a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026b0:	4b68      	ldr	r3, [pc, #416]	; (8002854 <HAL_RCC_ClockConfig+0x1b8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d90c      	bls.n	80026d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026be:	4b65      	ldr	r3, [pc, #404]	; (8002854 <HAL_RCC_ClockConfig+0x1b8>)
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c6:	4b63      	ldr	r3, [pc, #396]	; (8002854 <HAL_RCC_ClockConfig+0x1b8>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d001      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0b8      	b.n	800284a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d020      	beq.n	8002726 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026f0:	4b59      	ldr	r3, [pc, #356]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	4a58      	ldr	r2, [pc, #352]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 80026f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	2b00      	cmp	r3, #0
 8002706:	d005      	beq.n	8002714 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002708:	4b53      	ldr	r3, [pc, #332]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	4a52      	ldr	r2, [pc, #328]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002712:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002714:	4b50      	ldr	r3, [pc, #320]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	494d      	ldr	r1, [pc, #308]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 8002722:	4313      	orrs	r3, r2
 8002724:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d044      	beq.n	80027bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d107      	bne.n	800274a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273a:	4b47      	ldr	r3, [pc, #284]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d119      	bne.n	800277a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e07f      	b.n	800284a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d003      	beq.n	800275a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002756:	2b03      	cmp	r3, #3
 8002758:	d107      	bne.n	800276a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800275a:	4b3f      	ldr	r3, [pc, #252]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d109      	bne.n	800277a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e06f      	b.n	800284a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276a:	4b3b      	ldr	r3, [pc, #236]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e067      	b.n	800284a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800277a:	4b37      	ldr	r3, [pc, #220]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f023 0203 	bic.w	r2, r3, #3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	4934      	ldr	r1, [pc, #208]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 8002788:	4313      	orrs	r3, r2
 800278a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800278c:	f7fe fad6 	bl	8000d3c <HAL_GetTick>
 8002790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002792:	e00a      	b.n	80027aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002794:	f7fe fad2 	bl	8000d3c <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e04f      	b.n	800284a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027aa:	4b2b      	ldr	r3, [pc, #172]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 020c 	and.w	r2, r3, #12
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d1eb      	bne.n	8002794 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027bc:	4b25      	ldr	r3, [pc, #148]	; (8002854 <HAL_RCC_ClockConfig+0x1b8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d20c      	bcs.n	80027e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ca:	4b22      	ldr	r3, [pc, #136]	; (8002854 <HAL_RCC_ClockConfig+0x1b8>)
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d2:	4b20      	ldr	r3, [pc, #128]	; (8002854 <HAL_RCC_ClockConfig+0x1b8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d001      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e032      	b.n	800284a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027f0:	4b19      	ldr	r3, [pc, #100]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4916      	ldr	r1, [pc, #88]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d009      	beq.n	8002822 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800280e:	4b12      	ldr	r3, [pc, #72]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	490e      	ldr	r1, [pc, #56]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	4313      	orrs	r3, r2
 8002820:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002822:	f000 f821 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8002826:	4602      	mov	r2, r0
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	490a      	ldr	r1, [pc, #40]	; (800285c <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	5ccb      	ldrb	r3, [r1, r3]
 8002836:	fa22 f303 	lsr.w	r3, r2, r3
 800283a:	4a09      	ldr	r2, [pc, #36]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 800283c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800283e:	4b09      	ldr	r3, [pc, #36]	; (8002864 <HAL_RCC_ClockConfig+0x1c8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe fa36 	bl	8000cb4 <HAL_InitTick>

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40023c00 	.word	0x40023c00
 8002858:	40023800 	.word	0x40023800
 800285c:	080040e8 	.word	0x080040e8
 8002860:	20000000 	.word	0x20000000
 8002864:	20000004 	.word	0x20000004

08002868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800286c:	b094      	sub	sp, #80	; 0x50
 800286e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	647b      	str	r3, [r7, #68]	; 0x44
 8002874:	2300      	movs	r3, #0
 8002876:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002878:	2300      	movs	r3, #0
 800287a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002880:	4b79      	ldr	r3, [pc, #484]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 030c 	and.w	r3, r3, #12
 8002888:	2b08      	cmp	r3, #8
 800288a:	d00d      	beq.n	80028a8 <HAL_RCC_GetSysClockFreq+0x40>
 800288c:	2b08      	cmp	r3, #8
 800288e:	f200 80e1 	bhi.w	8002a54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <HAL_RCC_GetSysClockFreq+0x34>
 8002896:	2b04      	cmp	r3, #4
 8002898:	d003      	beq.n	80028a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800289a:	e0db      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800289c:	4b73      	ldr	r3, [pc, #460]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x204>)
 800289e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80028a0:	e0db      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028a2:	4b73      	ldr	r3, [pc, #460]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x208>)
 80028a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028a6:	e0d8      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028a8:	4b6f      	ldr	r3, [pc, #444]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028b2:	4b6d      	ldr	r3, [pc, #436]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d063      	beq.n	8002986 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028be:	4b6a      	ldr	r3, [pc, #424]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	099b      	lsrs	r3, r3, #6
 80028c4:	2200      	movs	r2, #0
 80028c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80028c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028d0:	633b      	str	r3, [r7, #48]	; 0x30
 80028d2:	2300      	movs	r3, #0
 80028d4:	637b      	str	r3, [r7, #52]	; 0x34
 80028d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028da:	4622      	mov	r2, r4
 80028dc:	462b      	mov	r3, r5
 80028de:	f04f 0000 	mov.w	r0, #0
 80028e2:	f04f 0100 	mov.w	r1, #0
 80028e6:	0159      	lsls	r1, r3, #5
 80028e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028ec:	0150      	lsls	r0, r2, #5
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	4621      	mov	r1, r4
 80028f4:	1a51      	subs	r1, r2, r1
 80028f6:	6139      	str	r1, [r7, #16]
 80028f8:	4629      	mov	r1, r5
 80028fa:	eb63 0301 	sbc.w	r3, r3, r1
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800290c:	4659      	mov	r1, fp
 800290e:	018b      	lsls	r3, r1, #6
 8002910:	4651      	mov	r1, sl
 8002912:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002916:	4651      	mov	r1, sl
 8002918:	018a      	lsls	r2, r1, #6
 800291a:	4651      	mov	r1, sl
 800291c:	ebb2 0801 	subs.w	r8, r2, r1
 8002920:	4659      	mov	r1, fp
 8002922:	eb63 0901 	sbc.w	r9, r3, r1
 8002926:	f04f 0200 	mov.w	r2, #0
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002932:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002936:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800293a:	4690      	mov	r8, r2
 800293c:	4699      	mov	r9, r3
 800293e:	4623      	mov	r3, r4
 8002940:	eb18 0303 	adds.w	r3, r8, r3
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	462b      	mov	r3, r5
 8002948:	eb49 0303 	adc.w	r3, r9, r3
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	f04f 0300 	mov.w	r3, #0
 8002956:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800295a:	4629      	mov	r1, r5
 800295c:	024b      	lsls	r3, r1, #9
 800295e:	4621      	mov	r1, r4
 8002960:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002964:	4621      	mov	r1, r4
 8002966:	024a      	lsls	r2, r1, #9
 8002968:	4610      	mov	r0, r2
 800296a:	4619      	mov	r1, r3
 800296c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800296e:	2200      	movs	r2, #0
 8002970:	62bb      	str	r3, [r7, #40]	; 0x28
 8002972:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002974:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002978:	f7fd fc82 	bl	8000280 <__aeabi_uldivmod>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4613      	mov	r3, r2
 8002982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002984:	e058      	b.n	8002a38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002986:	4b38      	ldr	r3, [pc, #224]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	099b      	lsrs	r3, r3, #6
 800298c:	2200      	movs	r2, #0
 800298e:	4618      	mov	r0, r3
 8002990:	4611      	mov	r1, r2
 8002992:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002996:	623b      	str	r3, [r7, #32]
 8002998:	2300      	movs	r3, #0
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
 800299c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029a0:	4642      	mov	r2, r8
 80029a2:	464b      	mov	r3, r9
 80029a4:	f04f 0000 	mov.w	r0, #0
 80029a8:	f04f 0100 	mov.w	r1, #0
 80029ac:	0159      	lsls	r1, r3, #5
 80029ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029b2:	0150      	lsls	r0, r2, #5
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4641      	mov	r1, r8
 80029ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80029be:	4649      	mov	r1, r9
 80029c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029d8:	ebb2 040a 	subs.w	r4, r2, sl
 80029dc:	eb63 050b 	sbc.w	r5, r3, fp
 80029e0:	f04f 0200 	mov.w	r2, #0
 80029e4:	f04f 0300 	mov.w	r3, #0
 80029e8:	00eb      	lsls	r3, r5, #3
 80029ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029ee:	00e2      	lsls	r2, r4, #3
 80029f0:	4614      	mov	r4, r2
 80029f2:	461d      	mov	r5, r3
 80029f4:	4643      	mov	r3, r8
 80029f6:	18e3      	adds	r3, r4, r3
 80029f8:	603b      	str	r3, [r7, #0]
 80029fa:	464b      	mov	r3, r9
 80029fc:	eb45 0303 	adc.w	r3, r5, r3
 8002a00:	607b      	str	r3, [r7, #4]
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a0e:	4629      	mov	r1, r5
 8002a10:	028b      	lsls	r3, r1, #10
 8002a12:	4621      	mov	r1, r4
 8002a14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a18:	4621      	mov	r1, r4
 8002a1a:	028a      	lsls	r2, r1, #10
 8002a1c:	4610      	mov	r0, r2
 8002a1e:	4619      	mov	r1, r3
 8002a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a22:	2200      	movs	r2, #0
 8002a24:	61bb      	str	r3, [r7, #24]
 8002a26:	61fa      	str	r2, [r7, #28]
 8002a28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a2c:	f7fd fc28 	bl	8000280 <__aeabi_uldivmod>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4613      	mov	r3, r2
 8002a36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a38:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	0c1b      	lsrs	r3, r3, #16
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	3301      	adds	r3, #1
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a52:	e002      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a54:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3750      	adds	r7, #80	; 0x50
 8002a60:	46bd      	mov	sp, r7
 8002a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	00f42400 	.word	0x00f42400
 8002a70:	007a1200 	.word	0x007a1200

08002a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a78:	4b03      	ldr	r3, [pc, #12]	; (8002a88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	20000000 	.word	0x20000000

08002a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a90:	f7ff fff0 	bl	8002a74 <HAL_RCC_GetHCLKFreq>
 8002a94:	4602      	mov	r2, r0
 8002a96:	4b05      	ldr	r3, [pc, #20]	; (8002aac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	0a9b      	lsrs	r3, r3, #10
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	4903      	ldr	r1, [pc, #12]	; (8002ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa2:	5ccb      	ldrb	r3, [r1, r3]
 8002aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	080040f8 	.word	0x080040f8

08002ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ab8:	f7ff ffdc 	bl	8002a74 <HAL_RCC_GetHCLKFreq>
 8002abc:	4602      	mov	r2, r0
 8002abe:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	0b5b      	lsrs	r3, r3, #13
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	4903      	ldr	r1, [pc, #12]	; (8002ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aca:	5ccb      	ldrb	r3, [r1, r3]
 8002acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	080040f8 	.word	0x080040f8

08002adc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e03f      	b.n	8002b6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7fe f842 	bl	8000b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2224      	movs	r2, #36	; 0x24
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f929 	bl	8002d78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695a      	ldr	r2, [r3, #20]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68da      	ldr	r2, [r3, #12]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2220      	movs	r2, #32
 8002b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b08a      	sub	sp, #40	; 0x28
 8002b7a:	af02      	add	r7, sp, #8
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	603b      	str	r3, [r7, #0]
 8002b82:	4613      	mov	r3, r2
 8002b84:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b20      	cmp	r3, #32
 8002b94:	d17c      	bne.n	8002c90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <HAL_UART_Transmit+0x2c>
 8002b9c:	88fb      	ldrh	r3, [r7, #6]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e075      	b.n	8002c92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_UART_Transmit+0x3e>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e06e      	b.n	8002c92 <HAL_UART_Transmit+0x11c>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2221      	movs	r2, #33	; 0x21
 8002bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bca:	f7fe f8b7 	bl	8000d3c <HAL_GetTick>
 8002bce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	88fa      	ldrh	r2, [r7, #6]
 8002bd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	88fa      	ldrh	r2, [r7, #6]
 8002bda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be4:	d108      	bne.n	8002bf8 <HAL_UART_Transmit+0x82>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d104      	bne.n	8002bf8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	61bb      	str	r3, [r7, #24]
 8002bf6:	e003      	b.n	8002c00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c08:	e02a      	b.n	8002c60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2200      	movs	r2, #0
 8002c12:	2180      	movs	r1, #128	; 0x80
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f000 f840 	bl	8002c9a <UART_WaitOnFlagUntilTimeout>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e036      	b.n	8002c92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10b      	bne.n	8002c42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	3302      	adds	r3, #2
 8002c3e:	61bb      	str	r3, [r7, #24]
 8002c40:	e007      	b.n	8002c52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	781a      	ldrb	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1cf      	bne.n	8002c0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2200      	movs	r2, #0
 8002c72:	2140      	movs	r1, #64	; 0x40
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 f810 	bl	8002c9a <UART_WaitOnFlagUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e006      	b.n	8002c92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2220      	movs	r2, #32
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	e000      	b.n	8002c92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c90:	2302      	movs	r3, #2
  }
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3720      	adds	r7, #32
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b090      	sub	sp, #64	; 0x40
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	603b      	str	r3, [r7, #0]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002caa:	e050      	b.n	8002d4e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb2:	d04c      	beq.n	8002d4e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d007      	beq.n	8002cca <UART_WaitOnFlagUntilTimeout+0x30>
 8002cba:	f7fe f83f 	bl	8000d3c <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d241      	bcs.n	8002d4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	330c      	adds	r3, #12
 8002cd0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd4:	e853 3f00 	ldrex	r3, [r3]
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	330c      	adds	r3, #12
 8002ce8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cea:	637a      	str	r2, [r7, #52]	; 0x34
 8002cec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002cf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cf2:	e841 2300 	strex	r3, r2, [r1]
 8002cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1e5      	bne.n	8002cca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	3314      	adds	r3, #20
 8002d04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	e853 3f00 	ldrex	r3, [r3]
 8002d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	f023 0301 	bic.w	r3, r3, #1
 8002d14:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	3314      	adds	r3, #20
 8002d1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d1e:	623a      	str	r2, [r7, #32]
 8002d20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d22:	69f9      	ldr	r1, [r7, #28]
 8002d24:	6a3a      	ldr	r2, [r7, #32]
 8002d26:	e841 2300 	strex	r3, r2, [r1]
 8002d2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1e5      	bne.n	8002cfe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2220      	movs	r2, #32
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e00f      	b.n	8002d6e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4013      	ands	r3, r2
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	bf0c      	ite	eq
 8002d5e:	2301      	moveq	r3, #1
 8002d60:	2300      	movne	r3, #0
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	461a      	mov	r2, r3
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d09f      	beq.n	8002cac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3740      	adds	r7, #64	; 0x40
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d7c:	b0c0      	sub	sp, #256	; 0x100
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d94:	68d9      	ldr	r1, [r3, #12]
 8002d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	ea40 0301 	orr.w	r3, r0, r1
 8002da0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	431a      	orrs	r2, r3
 8002db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002dd0:	f021 010c 	bic.w	r1, r1, #12
 8002dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002dde:	430b      	orrs	r3, r1
 8002de0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df2:	6999      	ldr	r1, [r3, #24]
 8002df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	ea40 0301 	orr.w	r3, r0, r1
 8002dfe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	4b8f      	ldr	r3, [pc, #572]	; (8003044 <UART_SetConfig+0x2cc>)
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d005      	beq.n	8002e18 <UART_SetConfig+0xa0>
 8002e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	4b8d      	ldr	r3, [pc, #564]	; (8003048 <UART_SetConfig+0x2d0>)
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d104      	bne.n	8002e22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e18:	f7ff fe4c 	bl	8002ab4 <HAL_RCC_GetPCLK2Freq>
 8002e1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002e20:	e003      	b.n	8002e2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e22:	f7ff fe33 	bl	8002a8c <HAL_RCC_GetPCLK1Freq>
 8002e26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e34:	f040 810c 	bne.w	8003050 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e4a:	4622      	mov	r2, r4
 8002e4c:	462b      	mov	r3, r5
 8002e4e:	1891      	adds	r1, r2, r2
 8002e50:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e52:	415b      	adcs	r3, r3
 8002e54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e5a:	4621      	mov	r1, r4
 8002e5c:	eb12 0801 	adds.w	r8, r2, r1
 8002e60:	4629      	mov	r1, r5
 8002e62:	eb43 0901 	adc.w	r9, r3, r1
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e7a:	4690      	mov	r8, r2
 8002e7c:	4699      	mov	r9, r3
 8002e7e:	4623      	mov	r3, r4
 8002e80:	eb18 0303 	adds.w	r3, r8, r3
 8002e84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e88:	462b      	mov	r3, r5
 8002e8a:	eb49 0303 	adc.w	r3, r9, r3
 8002e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ea2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	18db      	adds	r3, r3, r3
 8002eaa:	653b      	str	r3, [r7, #80]	; 0x50
 8002eac:	4613      	mov	r3, r2
 8002eae:	eb42 0303 	adc.w	r3, r2, r3
 8002eb2:	657b      	str	r3, [r7, #84]	; 0x54
 8002eb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002eb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ebc:	f7fd f9e0 	bl	8000280 <__aeabi_uldivmod>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4b61      	ldr	r3, [pc, #388]	; (800304c <UART_SetConfig+0x2d4>)
 8002ec6:	fba3 2302 	umull	r2, r3, r3, r2
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	011c      	lsls	r4, r3, #4
 8002ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ed8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002edc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ee0:	4642      	mov	r2, r8
 8002ee2:	464b      	mov	r3, r9
 8002ee4:	1891      	adds	r1, r2, r2
 8002ee6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ee8:	415b      	adcs	r3, r3
 8002eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ef0:	4641      	mov	r1, r8
 8002ef2:	eb12 0a01 	adds.w	sl, r2, r1
 8002ef6:	4649      	mov	r1, r9
 8002ef8:	eb43 0b01 	adc.w	fp, r3, r1
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f10:	4692      	mov	sl, r2
 8002f12:	469b      	mov	fp, r3
 8002f14:	4643      	mov	r3, r8
 8002f16:	eb1a 0303 	adds.w	r3, sl, r3
 8002f1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f1e:	464b      	mov	r3, r9
 8002f20:	eb4b 0303 	adc.w	r3, fp, r3
 8002f24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	18db      	adds	r3, r3, r3
 8002f40:	643b      	str	r3, [r7, #64]	; 0x40
 8002f42:	4613      	mov	r3, r2
 8002f44:	eb42 0303 	adc.w	r3, r2, r3
 8002f48:	647b      	str	r3, [r7, #68]	; 0x44
 8002f4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f52:	f7fd f995 	bl	8000280 <__aeabi_uldivmod>
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	4b3b      	ldr	r3, [pc, #236]	; (800304c <UART_SetConfig+0x2d4>)
 8002f5e:	fba3 2301 	umull	r2, r3, r3, r1
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	2264      	movs	r2, #100	; 0x64
 8002f66:	fb02 f303 	mul.w	r3, r2, r3
 8002f6a:	1acb      	subs	r3, r1, r3
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f72:	4b36      	ldr	r3, [pc, #216]	; (800304c <UART_SetConfig+0x2d4>)
 8002f74:	fba3 2302 	umull	r2, r3, r3, r2
 8002f78:	095b      	lsrs	r3, r3, #5
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f80:	441c      	add	r4, r3
 8002f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f86:	2200      	movs	r2, #0
 8002f88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f94:	4642      	mov	r2, r8
 8002f96:	464b      	mov	r3, r9
 8002f98:	1891      	adds	r1, r2, r2
 8002f9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f9c:	415b      	adcs	r3, r3
 8002f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fa0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fa4:	4641      	mov	r1, r8
 8002fa6:	1851      	adds	r1, r2, r1
 8002fa8:	6339      	str	r1, [r7, #48]	; 0x30
 8002faa:	4649      	mov	r1, r9
 8002fac:	414b      	adcs	r3, r1
 8002fae:	637b      	str	r3, [r7, #52]	; 0x34
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002fbc:	4659      	mov	r1, fp
 8002fbe:	00cb      	lsls	r3, r1, #3
 8002fc0:	4651      	mov	r1, sl
 8002fc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fc6:	4651      	mov	r1, sl
 8002fc8:	00ca      	lsls	r2, r1, #3
 8002fca:	4610      	mov	r0, r2
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4603      	mov	r3, r0
 8002fd0:	4642      	mov	r2, r8
 8002fd2:	189b      	adds	r3, r3, r2
 8002fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fd8:	464b      	mov	r3, r9
 8002fda:	460a      	mov	r2, r1
 8002fdc:	eb42 0303 	adc.w	r3, r2, r3
 8002fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ff0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ff4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	18db      	adds	r3, r3, r3
 8002ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ffe:	4613      	mov	r3, r2
 8003000:	eb42 0303 	adc.w	r3, r2, r3
 8003004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003006:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800300a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800300e:	f7fd f937 	bl	8000280 <__aeabi_uldivmod>
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	4b0d      	ldr	r3, [pc, #52]	; (800304c <UART_SetConfig+0x2d4>)
 8003018:	fba3 1302 	umull	r1, r3, r3, r2
 800301c:	095b      	lsrs	r3, r3, #5
 800301e:	2164      	movs	r1, #100	; 0x64
 8003020:	fb01 f303 	mul.w	r3, r1, r3
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	3332      	adds	r3, #50	; 0x32
 800302a:	4a08      	ldr	r2, [pc, #32]	; (800304c <UART_SetConfig+0x2d4>)
 800302c:	fba2 2303 	umull	r2, r3, r2, r3
 8003030:	095b      	lsrs	r3, r3, #5
 8003032:	f003 0207 	and.w	r2, r3, #7
 8003036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4422      	add	r2, r4
 800303e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003040:	e106      	b.n	8003250 <UART_SetConfig+0x4d8>
 8003042:	bf00      	nop
 8003044:	40011000 	.word	0x40011000
 8003048:	40011400 	.word	0x40011400
 800304c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003054:	2200      	movs	r2, #0
 8003056:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800305a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800305e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003062:	4642      	mov	r2, r8
 8003064:	464b      	mov	r3, r9
 8003066:	1891      	adds	r1, r2, r2
 8003068:	6239      	str	r1, [r7, #32]
 800306a:	415b      	adcs	r3, r3
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
 800306e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003072:	4641      	mov	r1, r8
 8003074:	1854      	adds	r4, r2, r1
 8003076:	4649      	mov	r1, r9
 8003078:	eb43 0501 	adc.w	r5, r3, r1
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	00eb      	lsls	r3, r5, #3
 8003086:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800308a:	00e2      	lsls	r2, r4, #3
 800308c:	4614      	mov	r4, r2
 800308e:	461d      	mov	r5, r3
 8003090:	4643      	mov	r3, r8
 8003092:	18e3      	adds	r3, r4, r3
 8003094:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003098:	464b      	mov	r3, r9
 800309a:	eb45 0303 	adc.w	r3, r5, r3
 800309e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80030be:	4629      	mov	r1, r5
 80030c0:	008b      	lsls	r3, r1, #2
 80030c2:	4621      	mov	r1, r4
 80030c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030c8:	4621      	mov	r1, r4
 80030ca:	008a      	lsls	r2, r1, #2
 80030cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80030d0:	f7fd f8d6 	bl	8000280 <__aeabi_uldivmod>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	4b60      	ldr	r3, [pc, #384]	; (800325c <UART_SetConfig+0x4e4>)
 80030da:	fba3 2302 	umull	r2, r3, r3, r2
 80030de:	095b      	lsrs	r3, r3, #5
 80030e0:	011c      	lsls	r4, r3, #4
 80030e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030e6:	2200      	movs	r2, #0
 80030e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80030ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80030f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80030f4:	4642      	mov	r2, r8
 80030f6:	464b      	mov	r3, r9
 80030f8:	1891      	adds	r1, r2, r2
 80030fa:	61b9      	str	r1, [r7, #24]
 80030fc:	415b      	adcs	r3, r3
 80030fe:	61fb      	str	r3, [r7, #28]
 8003100:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003104:	4641      	mov	r1, r8
 8003106:	1851      	adds	r1, r2, r1
 8003108:	6139      	str	r1, [r7, #16]
 800310a:	4649      	mov	r1, r9
 800310c:	414b      	adcs	r3, r1
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800311c:	4659      	mov	r1, fp
 800311e:	00cb      	lsls	r3, r1, #3
 8003120:	4651      	mov	r1, sl
 8003122:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003126:	4651      	mov	r1, sl
 8003128:	00ca      	lsls	r2, r1, #3
 800312a:	4610      	mov	r0, r2
 800312c:	4619      	mov	r1, r3
 800312e:	4603      	mov	r3, r0
 8003130:	4642      	mov	r2, r8
 8003132:	189b      	adds	r3, r3, r2
 8003134:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003138:	464b      	mov	r3, r9
 800313a:	460a      	mov	r2, r1
 800313c:	eb42 0303 	adc.w	r3, r2, r3
 8003140:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	67bb      	str	r3, [r7, #120]	; 0x78
 800314e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800315c:	4649      	mov	r1, r9
 800315e:	008b      	lsls	r3, r1, #2
 8003160:	4641      	mov	r1, r8
 8003162:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003166:	4641      	mov	r1, r8
 8003168:	008a      	lsls	r2, r1, #2
 800316a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800316e:	f7fd f887 	bl	8000280 <__aeabi_uldivmod>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	4611      	mov	r1, r2
 8003178:	4b38      	ldr	r3, [pc, #224]	; (800325c <UART_SetConfig+0x4e4>)
 800317a:	fba3 2301 	umull	r2, r3, r3, r1
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	2264      	movs	r2, #100	; 0x64
 8003182:	fb02 f303 	mul.w	r3, r2, r3
 8003186:	1acb      	subs	r3, r1, r3
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	3332      	adds	r3, #50	; 0x32
 800318c:	4a33      	ldr	r2, [pc, #204]	; (800325c <UART_SetConfig+0x4e4>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003198:	441c      	add	r4, r3
 800319a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800319e:	2200      	movs	r2, #0
 80031a0:	673b      	str	r3, [r7, #112]	; 0x70
 80031a2:	677a      	str	r2, [r7, #116]	; 0x74
 80031a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80031a8:	4642      	mov	r2, r8
 80031aa:	464b      	mov	r3, r9
 80031ac:	1891      	adds	r1, r2, r2
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	415b      	adcs	r3, r3
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031b8:	4641      	mov	r1, r8
 80031ba:	1851      	adds	r1, r2, r1
 80031bc:	6039      	str	r1, [r7, #0]
 80031be:	4649      	mov	r1, r9
 80031c0:	414b      	adcs	r3, r1
 80031c2:	607b      	str	r3, [r7, #4]
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031d0:	4659      	mov	r1, fp
 80031d2:	00cb      	lsls	r3, r1, #3
 80031d4:	4651      	mov	r1, sl
 80031d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031da:	4651      	mov	r1, sl
 80031dc:	00ca      	lsls	r2, r1, #3
 80031de:	4610      	mov	r0, r2
 80031e0:	4619      	mov	r1, r3
 80031e2:	4603      	mov	r3, r0
 80031e4:	4642      	mov	r2, r8
 80031e6:	189b      	adds	r3, r3, r2
 80031e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80031ea:	464b      	mov	r3, r9
 80031ec:	460a      	mov	r2, r1
 80031ee:	eb42 0303 	adc.w	r3, r2, r3
 80031f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	663b      	str	r3, [r7, #96]	; 0x60
 80031fe:	667a      	str	r2, [r7, #100]	; 0x64
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800320c:	4649      	mov	r1, r9
 800320e:	008b      	lsls	r3, r1, #2
 8003210:	4641      	mov	r1, r8
 8003212:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003216:	4641      	mov	r1, r8
 8003218:	008a      	lsls	r2, r1, #2
 800321a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800321e:	f7fd f82f 	bl	8000280 <__aeabi_uldivmod>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4b0d      	ldr	r3, [pc, #52]	; (800325c <UART_SetConfig+0x4e4>)
 8003228:	fba3 1302 	umull	r1, r3, r3, r2
 800322c:	095b      	lsrs	r3, r3, #5
 800322e:	2164      	movs	r1, #100	; 0x64
 8003230:	fb01 f303 	mul.w	r3, r1, r3
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	3332      	adds	r3, #50	; 0x32
 800323a:	4a08      	ldr	r2, [pc, #32]	; (800325c <UART_SetConfig+0x4e4>)
 800323c:	fba2 2303 	umull	r2, r3, r2, r3
 8003240:	095b      	lsrs	r3, r3, #5
 8003242:	f003 020f 	and.w	r2, r3, #15
 8003246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4422      	add	r2, r4
 800324e:	609a      	str	r2, [r3, #8]
}
 8003250:	bf00      	nop
 8003252:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003256:	46bd      	mov	sp, r7
 8003258:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800325c:	51eb851f 	.word	0x51eb851f

08003260 <std>:
 8003260:	2300      	movs	r3, #0
 8003262:	b510      	push	{r4, lr}
 8003264:	4604      	mov	r4, r0
 8003266:	e9c0 3300 	strd	r3, r3, [r0]
 800326a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800326e:	6083      	str	r3, [r0, #8]
 8003270:	8181      	strh	r1, [r0, #12]
 8003272:	6643      	str	r3, [r0, #100]	; 0x64
 8003274:	81c2      	strh	r2, [r0, #14]
 8003276:	6183      	str	r3, [r0, #24]
 8003278:	4619      	mov	r1, r3
 800327a:	2208      	movs	r2, #8
 800327c:	305c      	adds	r0, #92	; 0x5c
 800327e:	f000 f8f4 	bl	800346a <memset>
 8003282:	4b05      	ldr	r3, [pc, #20]	; (8003298 <std+0x38>)
 8003284:	6263      	str	r3, [r4, #36]	; 0x24
 8003286:	4b05      	ldr	r3, [pc, #20]	; (800329c <std+0x3c>)
 8003288:	62a3      	str	r3, [r4, #40]	; 0x28
 800328a:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <std+0x40>)
 800328c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800328e:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <std+0x44>)
 8003290:	6224      	str	r4, [r4, #32]
 8003292:	6323      	str	r3, [r4, #48]	; 0x30
 8003294:	bd10      	pop	{r4, pc}
 8003296:	bf00      	nop
 8003298:	080033e5 	.word	0x080033e5
 800329c:	08003407 	.word	0x08003407
 80032a0:	0800343f 	.word	0x0800343f
 80032a4:	08003463 	.word	0x08003463

080032a8 <stdio_exit_handler>:
 80032a8:	4a02      	ldr	r2, [pc, #8]	; (80032b4 <stdio_exit_handler+0xc>)
 80032aa:	4903      	ldr	r1, [pc, #12]	; (80032b8 <stdio_exit_handler+0x10>)
 80032ac:	4803      	ldr	r0, [pc, #12]	; (80032bc <stdio_exit_handler+0x14>)
 80032ae:	f000 b869 	b.w	8003384 <_fwalk_sglue>
 80032b2:	bf00      	nop
 80032b4:	2000000c 	.word	0x2000000c
 80032b8:	08003e05 	.word	0x08003e05
 80032bc:	20000018 	.word	0x20000018

080032c0 <cleanup_stdio>:
 80032c0:	6841      	ldr	r1, [r0, #4]
 80032c2:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <cleanup_stdio+0x34>)
 80032c4:	4299      	cmp	r1, r3
 80032c6:	b510      	push	{r4, lr}
 80032c8:	4604      	mov	r4, r0
 80032ca:	d001      	beq.n	80032d0 <cleanup_stdio+0x10>
 80032cc:	f000 fd9a 	bl	8003e04 <_fflush_r>
 80032d0:	68a1      	ldr	r1, [r4, #8]
 80032d2:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <cleanup_stdio+0x38>)
 80032d4:	4299      	cmp	r1, r3
 80032d6:	d002      	beq.n	80032de <cleanup_stdio+0x1e>
 80032d8:	4620      	mov	r0, r4
 80032da:	f000 fd93 	bl	8003e04 <_fflush_r>
 80032de:	68e1      	ldr	r1, [r4, #12]
 80032e0:	4b06      	ldr	r3, [pc, #24]	; (80032fc <cleanup_stdio+0x3c>)
 80032e2:	4299      	cmp	r1, r3
 80032e4:	d004      	beq.n	80032f0 <cleanup_stdio+0x30>
 80032e6:	4620      	mov	r0, r4
 80032e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032ec:	f000 bd8a 	b.w	8003e04 <_fflush_r>
 80032f0:	bd10      	pop	{r4, pc}
 80032f2:	bf00      	nop
 80032f4:	2000017c 	.word	0x2000017c
 80032f8:	200001e4 	.word	0x200001e4
 80032fc:	2000024c 	.word	0x2000024c

08003300 <global_stdio_init.part.0>:
 8003300:	b510      	push	{r4, lr}
 8003302:	4b0b      	ldr	r3, [pc, #44]	; (8003330 <global_stdio_init.part.0+0x30>)
 8003304:	4c0b      	ldr	r4, [pc, #44]	; (8003334 <global_stdio_init.part.0+0x34>)
 8003306:	4a0c      	ldr	r2, [pc, #48]	; (8003338 <global_stdio_init.part.0+0x38>)
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	4620      	mov	r0, r4
 800330c:	2200      	movs	r2, #0
 800330e:	2104      	movs	r1, #4
 8003310:	f7ff ffa6 	bl	8003260 <std>
 8003314:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003318:	2201      	movs	r2, #1
 800331a:	2109      	movs	r1, #9
 800331c:	f7ff ffa0 	bl	8003260 <std>
 8003320:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003324:	2202      	movs	r2, #2
 8003326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800332a:	2112      	movs	r1, #18
 800332c:	f7ff bf98 	b.w	8003260 <std>
 8003330:	200002b4 	.word	0x200002b4
 8003334:	2000017c 	.word	0x2000017c
 8003338:	080032a9 	.word	0x080032a9

0800333c <__sfp_lock_acquire>:
 800333c:	4801      	ldr	r0, [pc, #4]	; (8003344 <__sfp_lock_acquire+0x8>)
 800333e:	f000 b90d 	b.w	800355c <__retarget_lock_acquire_recursive>
 8003342:	bf00      	nop
 8003344:	200002bd 	.word	0x200002bd

08003348 <__sfp_lock_release>:
 8003348:	4801      	ldr	r0, [pc, #4]	; (8003350 <__sfp_lock_release+0x8>)
 800334a:	f000 b908 	b.w	800355e <__retarget_lock_release_recursive>
 800334e:	bf00      	nop
 8003350:	200002bd 	.word	0x200002bd

08003354 <__sinit>:
 8003354:	b510      	push	{r4, lr}
 8003356:	4604      	mov	r4, r0
 8003358:	f7ff fff0 	bl	800333c <__sfp_lock_acquire>
 800335c:	6a23      	ldr	r3, [r4, #32]
 800335e:	b11b      	cbz	r3, 8003368 <__sinit+0x14>
 8003360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003364:	f7ff bff0 	b.w	8003348 <__sfp_lock_release>
 8003368:	4b04      	ldr	r3, [pc, #16]	; (800337c <__sinit+0x28>)
 800336a:	6223      	str	r3, [r4, #32]
 800336c:	4b04      	ldr	r3, [pc, #16]	; (8003380 <__sinit+0x2c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1f5      	bne.n	8003360 <__sinit+0xc>
 8003374:	f7ff ffc4 	bl	8003300 <global_stdio_init.part.0>
 8003378:	e7f2      	b.n	8003360 <__sinit+0xc>
 800337a:	bf00      	nop
 800337c:	080032c1 	.word	0x080032c1
 8003380:	200002b4 	.word	0x200002b4

08003384 <_fwalk_sglue>:
 8003384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003388:	4607      	mov	r7, r0
 800338a:	4688      	mov	r8, r1
 800338c:	4614      	mov	r4, r2
 800338e:	2600      	movs	r6, #0
 8003390:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003394:	f1b9 0901 	subs.w	r9, r9, #1
 8003398:	d505      	bpl.n	80033a6 <_fwalk_sglue+0x22>
 800339a:	6824      	ldr	r4, [r4, #0]
 800339c:	2c00      	cmp	r4, #0
 800339e:	d1f7      	bne.n	8003390 <_fwalk_sglue+0xc>
 80033a0:	4630      	mov	r0, r6
 80033a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033a6:	89ab      	ldrh	r3, [r5, #12]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d907      	bls.n	80033bc <_fwalk_sglue+0x38>
 80033ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033b0:	3301      	adds	r3, #1
 80033b2:	d003      	beq.n	80033bc <_fwalk_sglue+0x38>
 80033b4:	4629      	mov	r1, r5
 80033b6:	4638      	mov	r0, r7
 80033b8:	47c0      	blx	r8
 80033ba:	4306      	orrs	r6, r0
 80033bc:	3568      	adds	r5, #104	; 0x68
 80033be:	e7e9      	b.n	8003394 <_fwalk_sglue+0x10>

080033c0 <iprintf>:
 80033c0:	b40f      	push	{r0, r1, r2, r3}
 80033c2:	b507      	push	{r0, r1, r2, lr}
 80033c4:	4906      	ldr	r1, [pc, #24]	; (80033e0 <iprintf+0x20>)
 80033c6:	ab04      	add	r3, sp, #16
 80033c8:	6808      	ldr	r0, [r1, #0]
 80033ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80033ce:	6881      	ldr	r1, [r0, #8]
 80033d0:	9301      	str	r3, [sp, #4]
 80033d2:	f000 f9e7 	bl	80037a4 <_vfiprintf_r>
 80033d6:	b003      	add	sp, #12
 80033d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80033dc:	b004      	add	sp, #16
 80033de:	4770      	bx	lr
 80033e0:	20000064 	.word	0x20000064

080033e4 <__sread>:
 80033e4:	b510      	push	{r4, lr}
 80033e6:	460c      	mov	r4, r1
 80033e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033ec:	f000 f868 	bl	80034c0 <_read_r>
 80033f0:	2800      	cmp	r0, #0
 80033f2:	bfab      	itete	ge
 80033f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80033f6:	89a3      	ldrhlt	r3, [r4, #12]
 80033f8:	181b      	addge	r3, r3, r0
 80033fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80033fe:	bfac      	ite	ge
 8003400:	6563      	strge	r3, [r4, #84]	; 0x54
 8003402:	81a3      	strhlt	r3, [r4, #12]
 8003404:	bd10      	pop	{r4, pc}

08003406 <__swrite>:
 8003406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800340a:	461f      	mov	r7, r3
 800340c:	898b      	ldrh	r3, [r1, #12]
 800340e:	05db      	lsls	r3, r3, #23
 8003410:	4605      	mov	r5, r0
 8003412:	460c      	mov	r4, r1
 8003414:	4616      	mov	r6, r2
 8003416:	d505      	bpl.n	8003424 <__swrite+0x1e>
 8003418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800341c:	2302      	movs	r3, #2
 800341e:	2200      	movs	r2, #0
 8003420:	f000 f83c 	bl	800349c <_lseek_r>
 8003424:	89a3      	ldrh	r3, [r4, #12]
 8003426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800342a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800342e:	81a3      	strh	r3, [r4, #12]
 8003430:	4632      	mov	r2, r6
 8003432:	463b      	mov	r3, r7
 8003434:	4628      	mov	r0, r5
 8003436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800343a:	f000 b853 	b.w	80034e4 <_write_r>

0800343e <__sseek>:
 800343e:	b510      	push	{r4, lr}
 8003440:	460c      	mov	r4, r1
 8003442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003446:	f000 f829 	bl	800349c <_lseek_r>
 800344a:	1c43      	adds	r3, r0, #1
 800344c:	89a3      	ldrh	r3, [r4, #12]
 800344e:	bf15      	itete	ne
 8003450:	6560      	strne	r0, [r4, #84]	; 0x54
 8003452:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003456:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800345a:	81a3      	strheq	r3, [r4, #12]
 800345c:	bf18      	it	ne
 800345e:	81a3      	strhne	r3, [r4, #12]
 8003460:	bd10      	pop	{r4, pc}

08003462 <__sclose>:
 8003462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003466:	f000 b809 	b.w	800347c <_close_r>

0800346a <memset>:
 800346a:	4402      	add	r2, r0
 800346c:	4603      	mov	r3, r0
 800346e:	4293      	cmp	r3, r2
 8003470:	d100      	bne.n	8003474 <memset+0xa>
 8003472:	4770      	bx	lr
 8003474:	f803 1b01 	strb.w	r1, [r3], #1
 8003478:	e7f9      	b.n	800346e <memset+0x4>
	...

0800347c <_close_r>:
 800347c:	b538      	push	{r3, r4, r5, lr}
 800347e:	4d06      	ldr	r5, [pc, #24]	; (8003498 <_close_r+0x1c>)
 8003480:	2300      	movs	r3, #0
 8003482:	4604      	mov	r4, r0
 8003484:	4608      	mov	r0, r1
 8003486:	602b      	str	r3, [r5, #0]
 8003488:	f7fd fad9 	bl	8000a3e <_close>
 800348c:	1c43      	adds	r3, r0, #1
 800348e:	d102      	bne.n	8003496 <_close_r+0x1a>
 8003490:	682b      	ldr	r3, [r5, #0]
 8003492:	b103      	cbz	r3, 8003496 <_close_r+0x1a>
 8003494:	6023      	str	r3, [r4, #0]
 8003496:	bd38      	pop	{r3, r4, r5, pc}
 8003498:	200002b8 	.word	0x200002b8

0800349c <_lseek_r>:
 800349c:	b538      	push	{r3, r4, r5, lr}
 800349e:	4d07      	ldr	r5, [pc, #28]	; (80034bc <_lseek_r+0x20>)
 80034a0:	4604      	mov	r4, r0
 80034a2:	4608      	mov	r0, r1
 80034a4:	4611      	mov	r1, r2
 80034a6:	2200      	movs	r2, #0
 80034a8:	602a      	str	r2, [r5, #0]
 80034aa:	461a      	mov	r2, r3
 80034ac:	f7fd faee 	bl	8000a8c <_lseek>
 80034b0:	1c43      	adds	r3, r0, #1
 80034b2:	d102      	bne.n	80034ba <_lseek_r+0x1e>
 80034b4:	682b      	ldr	r3, [r5, #0]
 80034b6:	b103      	cbz	r3, 80034ba <_lseek_r+0x1e>
 80034b8:	6023      	str	r3, [r4, #0]
 80034ba:	bd38      	pop	{r3, r4, r5, pc}
 80034bc:	200002b8 	.word	0x200002b8

080034c0 <_read_r>:
 80034c0:	b538      	push	{r3, r4, r5, lr}
 80034c2:	4d07      	ldr	r5, [pc, #28]	; (80034e0 <_read_r+0x20>)
 80034c4:	4604      	mov	r4, r0
 80034c6:	4608      	mov	r0, r1
 80034c8:	4611      	mov	r1, r2
 80034ca:	2200      	movs	r2, #0
 80034cc:	602a      	str	r2, [r5, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	f7fd fa7c 	bl	80009cc <_read>
 80034d4:	1c43      	adds	r3, r0, #1
 80034d6:	d102      	bne.n	80034de <_read_r+0x1e>
 80034d8:	682b      	ldr	r3, [r5, #0]
 80034da:	b103      	cbz	r3, 80034de <_read_r+0x1e>
 80034dc:	6023      	str	r3, [r4, #0]
 80034de:	bd38      	pop	{r3, r4, r5, pc}
 80034e0:	200002b8 	.word	0x200002b8

080034e4 <_write_r>:
 80034e4:	b538      	push	{r3, r4, r5, lr}
 80034e6:	4d07      	ldr	r5, [pc, #28]	; (8003504 <_write_r+0x20>)
 80034e8:	4604      	mov	r4, r0
 80034ea:	4608      	mov	r0, r1
 80034ec:	4611      	mov	r1, r2
 80034ee:	2200      	movs	r2, #0
 80034f0:	602a      	str	r2, [r5, #0]
 80034f2:	461a      	mov	r2, r3
 80034f4:	f7fd fa87 	bl	8000a06 <_write>
 80034f8:	1c43      	adds	r3, r0, #1
 80034fa:	d102      	bne.n	8003502 <_write_r+0x1e>
 80034fc:	682b      	ldr	r3, [r5, #0]
 80034fe:	b103      	cbz	r3, 8003502 <_write_r+0x1e>
 8003500:	6023      	str	r3, [r4, #0]
 8003502:	bd38      	pop	{r3, r4, r5, pc}
 8003504:	200002b8 	.word	0x200002b8

08003508 <__errno>:
 8003508:	4b01      	ldr	r3, [pc, #4]	; (8003510 <__errno+0x8>)
 800350a:	6818      	ldr	r0, [r3, #0]
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	20000064 	.word	0x20000064

08003514 <__libc_init_array>:
 8003514:	b570      	push	{r4, r5, r6, lr}
 8003516:	4d0d      	ldr	r5, [pc, #52]	; (800354c <__libc_init_array+0x38>)
 8003518:	4c0d      	ldr	r4, [pc, #52]	; (8003550 <__libc_init_array+0x3c>)
 800351a:	1b64      	subs	r4, r4, r5
 800351c:	10a4      	asrs	r4, r4, #2
 800351e:	2600      	movs	r6, #0
 8003520:	42a6      	cmp	r6, r4
 8003522:	d109      	bne.n	8003538 <__libc_init_array+0x24>
 8003524:	4d0b      	ldr	r5, [pc, #44]	; (8003554 <__libc_init_array+0x40>)
 8003526:	4c0c      	ldr	r4, [pc, #48]	; (8003558 <__libc_init_array+0x44>)
 8003528:	f000 fdbe 	bl	80040a8 <_init>
 800352c:	1b64      	subs	r4, r4, r5
 800352e:	10a4      	asrs	r4, r4, #2
 8003530:	2600      	movs	r6, #0
 8003532:	42a6      	cmp	r6, r4
 8003534:	d105      	bne.n	8003542 <__libc_init_array+0x2e>
 8003536:	bd70      	pop	{r4, r5, r6, pc}
 8003538:	f855 3b04 	ldr.w	r3, [r5], #4
 800353c:	4798      	blx	r3
 800353e:	3601      	adds	r6, #1
 8003540:	e7ee      	b.n	8003520 <__libc_init_array+0xc>
 8003542:	f855 3b04 	ldr.w	r3, [r5], #4
 8003546:	4798      	blx	r3
 8003548:	3601      	adds	r6, #1
 800354a:	e7f2      	b.n	8003532 <__libc_init_array+0x1e>
 800354c:	08004144 	.word	0x08004144
 8003550:	08004144 	.word	0x08004144
 8003554:	08004144 	.word	0x08004144
 8003558:	08004148 	.word	0x08004148

0800355c <__retarget_lock_acquire_recursive>:
 800355c:	4770      	bx	lr

0800355e <__retarget_lock_release_recursive>:
 800355e:	4770      	bx	lr

08003560 <_free_r>:
 8003560:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003562:	2900      	cmp	r1, #0
 8003564:	d044      	beq.n	80035f0 <_free_r+0x90>
 8003566:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800356a:	9001      	str	r0, [sp, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	f1a1 0404 	sub.w	r4, r1, #4
 8003572:	bfb8      	it	lt
 8003574:	18e4      	addlt	r4, r4, r3
 8003576:	f000 f8df 	bl	8003738 <__malloc_lock>
 800357a:	4a1e      	ldr	r2, [pc, #120]	; (80035f4 <_free_r+0x94>)
 800357c:	9801      	ldr	r0, [sp, #4]
 800357e:	6813      	ldr	r3, [r2, #0]
 8003580:	b933      	cbnz	r3, 8003590 <_free_r+0x30>
 8003582:	6063      	str	r3, [r4, #4]
 8003584:	6014      	str	r4, [r2, #0]
 8003586:	b003      	add	sp, #12
 8003588:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800358c:	f000 b8da 	b.w	8003744 <__malloc_unlock>
 8003590:	42a3      	cmp	r3, r4
 8003592:	d908      	bls.n	80035a6 <_free_r+0x46>
 8003594:	6825      	ldr	r5, [r4, #0]
 8003596:	1961      	adds	r1, r4, r5
 8003598:	428b      	cmp	r3, r1
 800359a:	bf01      	itttt	eq
 800359c:	6819      	ldreq	r1, [r3, #0]
 800359e:	685b      	ldreq	r3, [r3, #4]
 80035a0:	1949      	addeq	r1, r1, r5
 80035a2:	6021      	streq	r1, [r4, #0]
 80035a4:	e7ed      	b.n	8003582 <_free_r+0x22>
 80035a6:	461a      	mov	r2, r3
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	b10b      	cbz	r3, 80035b0 <_free_r+0x50>
 80035ac:	42a3      	cmp	r3, r4
 80035ae:	d9fa      	bls.n	80035a6 <_free_r+0x46>
 80035b0:	6811      	ldr	r1, [r2, #0]
 80035b2:	1855      	adds	r5, r2, r1
 80035b4:	42a5      	cmp	r5, r4
 80035b6:	d10b      	bne.n	80035d0 <_free_r+0x70>
 80035b8:	6824      	ldr	r4, [r4, #0]
 80035ba:	4421      	add	r1, r4
 80035bc:	1854      	adds	r4, r2, r1
 80035be:	42a3      	cmp	r3, r4
 80035c0:	6011      	str	r1, [r2, #0]
 80035c2:	d1e0      	bne.n	8003586 <_free_r+0x26>
 80035c4:	681c      	ldr	r4, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	6053      	str	r3, [r2, #4]
 80035ca:	440c      	add	r4, r1
 80035cc:	6014      	str	r4, [r2, #0]
 80035ce:	e7da      	b.n	8003586 <_free_r+0x26>
 80035d0:	d902      	bls.n	80035d8 <_free_r+0x78>
 80035d2:	230c      	movs	r3, #12
 80035d4:	6003      	str	r3, [r0, #0]
 80035d6:	e7d6      	b.n	8003586 <_free_r+0x26>
 80035d8:	6825      	ldr	r5, [r4, #0]
 80035da:	1961      	adds	r1, r4, r5
 80035dc:	428b      	cmp	r3, r1
 80035de:	bf04      	itt	eq
 80035e0:	6819      	ldreq	r1, [r3, #0]
 80035e2:	685b      	ldreq	r3, [r3, #4]
 80035e4:	6063      	str	r3, [r4, #4]
 80035e6:	bf04      	itt	eq
 80035e8:	1949      	addeq	r1, r1, r5
 80035ea:	6021      	streq	r1, [r4, #0]
 80035ec:	6054      	str	r4, [r2, #4]
 80035ee:	e7ca      	b.n	8003586 <_free_r+0x26>
 80035f0:	b003      	add	sp, #12
 80035f2:	bd30      	pop	{r4, r5, pc}
 80035f4:	200002c0 	.word	0x200002c0

080035f8 <sbrk_aligned>:
 80035f8:	b570      	push	{r4, r5, r6, lr}
 80035fa:	4e0e      	ldr	r6, [pc, #56]	; (8003634 <sbrk_aligned+0x3c>)
 80035fc:	460c      	mov	r4, r1
 80035fe:	6831      	ldr	r1, [r6, #0]
 8003600:	4605      	mov	r5, r0
 8003602:	b911      	cbnz	r1, 800360a <sbrk_aligned+0x12>
 8003604:	f000 fcbc 	bl	8003f80 <_sbrk_r>
 8003608:	6030      	str	r0, [r6, #0]
 800360a:	4621      	mov	r1, r4
 800360c:	4628      	mov	r0, r5
 800360e:	f000 fcb7 	bl	8003f80 <_sbrk_r>
 8003612:	1c43      	adds	r3, r0, #1
 8003614:	d00a      	beq.n	800362c <sbrk_aligned+0x34>
 8003616:	1cc4      	adds	r4, r0, #3
 8003618:	f024 0403 	bic.w	r4, r4, #3
 800361c:	42a0      	cmp	r0, r4
 800361e:	d007      	beq.n	8003630 <sbrk_aligned+0x38>
 8003620:	1a21      	subs	r1, r4, r0
 8003622:	4628      	mov	r0, r5
 8003624:	f000 fcac 	bl	8003f80 <_sbrk_r>
 8003628:	3001      	adds	r0, #1
 800362a:	d101      	bne.n	8003630 <sbrk_aligned+0x38>
 800362c:	f04f 34ff 	mov.w	r4, #4294967295
 8003630:	4620      	mov	r0, r4
 8003632:	bd70      	pop	{r4, r5, r6, pc}
 8003634:	200002c4 	.word	0x200002c4

08003638 <_malloc_r>:
 8003638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800363c:	1ccd      	adds	r5, r1, #3
 800363e:	f025 0503 	bic.w	r5, r5, #3
 8003642:	3508      	adds	r5, #8
 8003644:	2d0c      	cmp	r5, #12
 8003646:	bf38      	it	cc
 8003648:	250c      	movcc	r5, #12
 800364a:	2d00      	cmp	r5, #0
 800364c:	4607      	mov	r7, r0
 800364e:	db01      	blt.n	8003654 <_malloc_r+0x1c>
 8003650:	42a9      	cmp	r1, r5
 8003652:	d905      	bls.n	8003660 <_malloc_r+0x28>
 8003654:	230c      	movs	r3, #12
 8003656:	603b      	str	r3, [r7, #0]
 8003658:	2600      	movs	r6, #0
 800365a:	4630      	mov	r0, r6
 800365c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003660:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003734 <_malloc_r+0xfc>
 8003664:	f000 f868 	bl	8003738 <__malloc_lock>
 8003668:	f8d8 3000 	ldr.w	r3, [r8]
 800366c:	461c      	mov	r4, r3
 800366e:	bb5c      	cbnz	r4, 80036c8 <_malloc_r+0x90>
 8003670:	4629      	mov	r1, r5
 8003672:	4638      	mov	r0, r7
 8003674:	f7ff ffc0 	bl	80035f8 <sbrk_aligned>
 8003678:	1c43      	adds	r3, r0, #1
 800367a:	4604      	mov	r4, r0
 800367c:	d155      	bne.n	800372a <_malloc_r+0xf2>
 800367e:	f8d8 4000 	ldr.w	r4, [r8]
 8003682:	4626      	mov	r6, r4
 8003684:	2e00      	cmp	r6, #0
 8003686:	d145      	bne.n	8003714 <_malloc_r+0xdc>
 8003688:	2c00      	cmp	r4, #0
 800368a:	d048      	beq.n	800371e <_malloc_r+0xe6>
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	4631      	mov	r1, r6
 8003690:	4638      	mov	r0, r7
 8003692:	eb04 0903 	add.w	r9, r4, r3
 8003696:	f000 fc73 	bl	8003f80 <_sbrk_r>
 800369a:	4581      	cmp	r9, r0
 800369c:	d13f      	bne.n	800371e <_malloc_r+0xe6>
 800369e:	6821      	ldr	r1, [r4, #0]
 80036a0:	1a6d      	subs	r5, r5, r1
 80036a2:	4629      	mov	r1, r5
 80036a4:	4638      	mov	r0, r7
 80036a6:	f7ff ffa7 	bl	80035f8 <sbrk_aligned>
 80036aa:	3001      	adds	r0, #1
 80036ac:	d037      	beq.n	800371e <_malloc_r+0xe6>
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	442b      	add	r3, r5
 80036b2:	6023      	str	r3, [r4, #0]
 80036b4:	f8d8 3000 	ldr.w	r3, [r8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d038      	beq.n	800372e <_malloc_r+0xf6>
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	42a2      	cmp	r2, r4
 80036c0:	d12b      	bne.n	800371a <_malloc_r+0xe2>
 80036c2:	2200      	movs	r2, #0
 80036c4:	605a      	str	r2, [r3, #4]
 80036c6:	e00f      	b.n	80036e8 <_malloc_r+0xb0>
 80036c8:	6822      	ldr	r2, [r4, #0]
 80036ca:	1b52      	subs	r2, r2, r5
 80036cc:	d41f      	bmi.n	800370e <_malloc_r+0xd6>
 80036ce:	2a0b      	cmp	r2, #11
 80036d0:	d917      	bls.n	8003702 <_malloc_r+0xca>
 80036d2:	1961      	adds	r1, r4, r5
 80036d4:	42a3      	cmp	r3, r4
 80036d6:	6025      	str	r5, [r4, #0]
 80036d8:	bf18      	it	ne
 80036da:	6059      	strne	r1, [r3, #4]
 80036dc:	6863      	ldr	r3, [r4, #4]
 80036de:	bf08      	it	eq
 80036e0:	f8c8 1000 	streq.w	r1, [r8]
 80036e4:	5162      	str	r2, [r4, r5]
 80036e6:	604b      	str	r3, [r1, #4]
 80036e8:	4638      	mov	r0, r7
 80036ea:	f104 060b 	add.w	r6, r4, #11
 80036ee:	f000 f829 	bl	8003744 <__malloc_unlock>
 80036f2:	f026 0607 	bic.w	r6, r6, #7
 80036f6:	1d23      	adds	r3, r4, #4
 80036f8:	1af2      	subs	r2, r6, r3
 80036fa:	d0ae      	beq.n	800365a <_malloc_r+0x22>
 80036fc:	1b9b      	subs	r3, r3, r6
 80036fe:	50a3      	str	r3, [r4, r2]
 8003700:	e7ab      	b.n	800365a <_malloc_r+0x22>
 8003702:	42a3      	cmp	r3, r4
 8003704:	6862      	ldr	r2, [r4, #4]
 8003706:	d1dd      	bne.n	80036c4 <_malloc_r+0x8c>
 8003708:	f8c8 2000 	str.w	r2, [r8]
 800370c:	e7ec      	b.n	80036e8 <_malloc_r+0xb0>
 800370e:	4623      	mov	r3, r4
 8003710:	6864      	ldr	r4, [r4, #4]
 8003712:	e7ac      	b.n	800366e <_malloc_r+0x36>
 8003714:	4634      	mov	r4, r6
 8003716:	6876      	ldr	r6, [r6, #4]
 8003718:	e7b4      	b.n	8003684 <_malloc_r+0x4c>
 800371a:	4613      	mov	r3, r2
 800371c:	e7cc      	b.n	80036b8 <_malloc_r+0x80>
 800371e:	230c      	movs	r3, #12
 8003720:	603b      	str	r3, [r7, #0]
 8003722:	4638      	mov	r0, r7
 8003724:	f000 f80e 	bl	8003744 <__malloc_unlock>
 8003728:	e797      	b.n	800365a <_malloc_r+0x22>
 800372a:	6025      	str	r5, [r4, #0]
 800372c:	e7dc      	b.n	80036e8 <_malloc_r+0xb0>
 800372e:	605b      	str	r3, [r3, #4]
 8003730:	deff      	udf	#255	; 0xff
 8003732:	bf00      	nop
 8003734:	200002c0 	.word	0x200002c0

08003738 <__malloc_lock>:
 8003738:	4801      	ldr	r0, [pc, #4]	; (8003740 <__malloc_lock+0x8>)
 800373a:	f7ff bf0f 	b.w	800355c <__retarget_lock_acquire_recursive>
 800373e:	bf00      	nop
 8003740:	200002bc 	.word	0x200002bc

08003744 <__malloc_unlock>:
 8003744:	4801      	ldr	r0, [pc, #4]	; (800374c <__malloc_unlock+0x8>)
 8003746:	f7ff bf0a 	b.w	800355e <__retarget_lock_release_recursive>
 800374a:	bf00      	nop
 800374c:	200002bc 	.word	0x200002bc

08003750 <__sfputc_r>:
 8003750:	6893      	ldr	r3, [r2, #8]
 8003752:	3b01      	subs	r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	b410      	push	{r4}
 8003758:	6093      	str	r3, [r2, #8]
 800375a:	da08      	bge.n	800376e <__sfputc_r+0x1e>
 800375c:	6994      	ldr	r4, [r2, #24]
 800375e:	42a3      	cmp	r3, r4
 8003760:	db01      	blt.n	8003766 <__sfputc_r+0x16>
 8003762:	290a      	cmp	r1, #10
 8003764:	d103      	bne.n	800376e <__sfputc_r+0x1e>
 8003766:	f85d 4b04 	ldr.w	r4, [sp], #4
 800376a:	f000 bb73 	b.w	8003e54 <__swbuf_r>
 800376e:	6813      	ldr	r3, [r2, #0]
 8003770:	1c58      	adds	r0, r3, #1
 8003772:	6010      	str	r0, [r2, #0]
 8003774:	7019      	strb	r1, [r3, #0]
 8003776:	4608      	mov	r0, r1
 8003778:	f85d 4b04 	ldr.w	r4, [sp], #4
 800377c:	4770      	bx	lr

0800377e <__sfputs_r>:
 800377e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003780:	4606      	mov	r6, r0
 8003782:	460f      	mov	r7, r1
 8003784:	4614      	mov	r4, r2
 8003786:	18d5      	adds	r5, r2, r3
 8003788:	42ac      	cmp	r4, r5
 800378a:	d101      	bne.n	8003790 <__sfputs_r+0x12>
 800378c:	2000      	movs	r0, #0
 800378e:	e007      	b.n	80037a0 <__sfputs_r+0x22>
 8003790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003794:	463a      	mov	r2, r7
 8003796:	4630      	mov	r0, r6
 8003798:	f7ff ffda 	bl	8003750 <__sfputc_r>
 800379c:	1c43      	adds	r3, r0, #1
 800379e:	d1f3      	bne.n	8003788 <__sfputs_r+0xa>
 80037a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080037a4 <_vfiprintf_r>:
 80037a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037a8:	460d      	mov	r5, r1
 80037aa:	b09d      	sub	sp, #116	; 0x74
 80037ac:	4614      	mov	r4, r2
 80037ae:	4698      	mov	r8, r3
 80037b0:	4606      	mov	r6, r0
 80037b2:	b118      	cbz	r0, 80037bc <_vfiprintf_r+0x18>
 80037b4:	6a03      	ldr	r3, [r0, #32]
 80037b6:	b90b      	cbnz	r3, 80037bc <_vfiprintf_r+0x18>
 80037b8:	f7ff fdcc 	bl	8003354 <__sinit>
 80037bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80037be:	07d9      	lsls	r1, r3, #31
 80037c0:	d405      	bmi.n	80037ce <_vfiprintf_r+0x2a>
 80037c2:	89ab      	ldrh	r3, [r5, #12]
 80037c4:	059a      	lsls	r2, r3, #22
 80037c6:	d402      	bmi.n	80037ce <_vfiprintf_r+0x2a>
 80037c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037ca:	f7ff fec7 	bl	800355c <__retarget_lock_acquire_recursive>
 80037ce:	89ab      	ldrh	r3, [r5, #12]
 80037d0:	071b      	lsls	r3, r3, #28
 80037d2:	d501      	bpl.n	80037d8 <_vfiprintf_r+0x34>
 80037d4:	692b      	ldr	r3, [r5, #16]
 80037d6:	b99b      	cbnz	r3, 8003800 <_vfiprintf_r+0x5c>
 80037d8:	4629      	mov	r1, r5
 80037da:	4630      	mov	r0, r6
 80037dc:	f000 fb78 	bl	8003ed0 <__swsetup_r>
 80037e0:	b170      	cbz	r0, 8003800 <_vfiprintf_r+0x5c>
 80037e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80037e4:	07dc      	lsls	r4, r3, #31
 80037e6:	d504      	bpl.n	80037f2 <_vfiprintf_r+0x4e>
 80037e8:	f04f 30ff 	mov.w	r0, #4294967295
 80037ec:	b01d      	add	sp, #116	; 0x74
 80037ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037f2:	89ab      	ldrh	r3, [r5, #12]
 80037f4:	0598      	lsls	r0, r3, #22
 80037f6:	d4f7      	bmi.n	80037e8 <_vfiprintf_r+0x44>
 80037f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037fa:	f7ff feb0 	bl	800355e <__retarget_lock_release_recursive>
 80037fe:	e7f3      	b.n	80037e8 <_vfiprintf_r+0x44>
 8003800:	2300      	movs	r3, #0
 8003802:	9309      	str	r3, [sp, #36]	; 0x24
 8003804:	2320      	movs	r3, #32
 8003806:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800380a:	f8cd 800c 	str.w	r8, [sp, #12]
 800380e:	2330      	movs	r3, #48	; 0x30
 8003810:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80039c4 <_vfiprintf_r+0x220>
 8003814:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003818:	f04f 0901 	mov.w	r9, #1
 800381c:	4623      	mov	r3, r4
 800381e:	469a      	mov	sl, r3
 8003820:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003824:	b10a      	cbz	r2, 800382a <_vfiprintf_r+0x86>
 8003826:	2a25      	cmp	r2, #37	; 0x25
 8003828:	d1f9      	bne.n	800381e <_vfiprintf_r+0x7a>
 800382a:	ebba 0b04 	subs.w	fp, sl, r4
 800382e:	d00b      	beq.n	8003848 <_vfiprintf_r+0xa4>
 8003830:	465b      	mov	r3, fp
 8003832:	4622      	mov	r2, r4
 8003834:	4629      	mov	r1, r5
 8003836:	4630      	mov	r0, r6
 8003838:	f7ff ffa1 	bl	800377e <__sfputs_r>
 800383c:	3001      	adds	r0, #1
 800383e:	f000 80a9 	beq.w	8003994 <_vfiprintf_r+0x1f0>
 8003842:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003844:	445a      	add	r2, fp
 8003846:	9209      	str	r2, [sp, #36]	; 0x24
 8003848:	f89a 3000 	ldrb.w	r3, [sl]
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 80a1 	beq.w	8003994 <_vfiprintf_r+0x1f0>
 8003852:	2300      	movs	r3, #0
 8003854:	f04f 32ff 	mov.w	r2, #4294967295
 8003858:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800385c:	f10a 0a01 	add.w	sl, sl, #1
 8003860:	9304      	str	r3, [sp, #16]
 8003862:	9307      	str	r3, [sp, #28]
 8003864:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003868:	931a      	str	r3, [sp, #104]	; 0x68
 800386a:	4654      	mov	r4, sl
 800386c:	2205      	movs	r2, #5
 800386e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003872:	4854      	ldr	r0, [pc, #336]	; (80039c4 <_vfiprintf_r+0x220>)
 8003874:	f7fc fcb4 	bl	80001e0 <memchr>
 8003878:	9a04      	ldr	r2, [sp, #16]
 800387a:	b9d8      	cbnz	r0, 80038b4 <_vfiprintf_r+0x110>
 800387c:	06d1      	lsls	r1, r2, #27
 800387e:	bf44      	itt	mi
 8003880:	2320      	movmi	r3, #32
 8003882:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003886:	0713      	lsls	r3, r2, #28
 8003888:	bf44      	itt	mi
 800388a:	232b      	movmi	r3, #43	; 0x2b
 800388c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003890:	f89a 3000 	ldrb.w	r3, [sl]
 8003894:	2b2a      	cmp	r3, #42	; 0x2a
 8003896:	d015      	beq.n	80038c4 <_vfiprintf_r+0x120>
 8003898:	9a07      	ldr	r2, [sp, #28]
 800389a:	4654      	mov	r4, sl
 800389c:	2000      	movs	r0, #0
 800389e:	f04f 0c0a 	mov.w	ip, #10
 80038a2:	4621      	mov	r1, r4
 80038a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038a8:	3b30      	subs	r3, #48	; 0x30
 80038aa:	2b09      	cmp	r3, #9
 80038ac:	d94d      	bls.n	800394a <_vfiprintf_r+0x1a6>
 80038ae:	b1b0      	cbz	r0, 80038de <_vfiprintf_r+0x13a>
 80038b0:	9207      	str	r2, [sp, #28]
 80038b2:	e014      	b.n	80038de <_vfiprintf_r+0x13a>
 80038b4:	eba0 0308 	sub.w	r3, r0, r8
 80038b8:	fa09 f303 	lsl.w	r3, r9, r3
 80038bc:	4313      	orrs	r3, r2
 80038be:	9304      	str	r3, [sp, #16]
 80038c0:	46a2      	mov	sl, r4
 80038c2:	e7d2      	b.n	800386a <_vfiprintf_r+0xc6>
 80038c4:	9b03      	ldr	r3, [sp, #12]
 80038c6:	1d19      	adds	r1, r3, #4
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	9103      	str	r1, [sp, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	bfbb      	ittet	lt
 80038d0:	425b      	neglt	r3, r3
 80038d2:	f042 0202 	orrlt.w	r2, r2, #2
 80038d6:	9307      	strge	r3, [sp, #28]
 80038d8:	9307      	strlt	r3, [sp, #28]
 80038da:	bfb8      	it	lt
 80038dc:	9204      	strlt	r2, [sp, #16]
 80038de:	7823      	ldrb	r3, [r4, #0]
 80038e0:	2b2e      	cmp	r3, #46	; 0x2e
 80038e2:	d10c      	bne.n	80038fe <_vfiprintf_r+0x15a>
 80038e4:	7863      	ldrb	r3, [r4, #1]
 80038e6:	2b2a      	cmp	r3, #42	; 0x2a
 80038e8:	d134      	bne.n	8003954 <_vfiprintf_r+0x1b0>
 80038ea:	9b03      	ldr	r3, [sp, #12]
 80038ec:	1d1a      	adds	r2, r3, #4
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	9203      	str	r2, [sp, #12]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	bfb8      	it	lt
 80038f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80038fa:	3402      	adds	r4, #2
 80038fc:	9305      	str	r3, [sp, #20]
 80038fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80039d4 <_vfiprintf_r+0x230>
 8003902:	7821      	ldrb	r1, [r4, #0]
 8003904:	2203      	movs	r2, #3
 8003906:	4650      	mov	r0, sl
 8003908:	f7fc fc6a 	bl	80001e0 <memchr>
 800390c:	b138      	cbz	r0, 800391e <_vfiprintf_r+0x17a>
 800390e:	9b04      	ldr	r3, [sp, #16]
 8003910:	eba0 000a 	sub.w	r0, r0, sl
 8003914:	2240      	movs	r2, #64	; 0x40
 8003916:	4082      	lsls	r2, r0
 8003918:	4313      	orrs	r3, r2
 800391a:	3401      	adds	r4, #1
 800391c:	9304      	str	r3, [sp, #16]
 800391e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003922:	4829      	ldr	r0, [pc, #164]	; (80039c8 <_vfiprintf_r+0x224>)
 8003924:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003928:	2206      	movs	r2, #6
 800392a:	f7fc fc59 	bl	80001e0 <memchr>
 800392e:	2800      	cmp	r0, #0
 8003930:	d03f      	beq.n	80039b2 <_vfiprintf_r+0x20e>
 8003932:	4b26      	ldr	r3, [pc, #152]	; (80039cc <_vfiprintf_r+0x228>)
 8003934:	bb1b      	cbnz	r3, 800397e <_vfiprintf_r+0x1da>
 8003936:	9b03      	ldr	r3, [sp, #12]
 8003938:	3307      	adds	r3, #7
 800393a:	f023 0307 	bic.w	r3, r3, #7
 800393e:	3308      	adds	r3, #8
 8003940:	9303      	str	r3, [sp, #12]
 8003942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003944:	443b      	add	r3, r7
 8003946:	9309      	str	r3, [sp, #36]	; 0x24
 8003948:	e768      	b.n	800381c <_vfiprintf_r+0x78>
 800394a:	fb0c 3202 	mla	r2, ip, r2, r3
 800394e:	460c      	mov	r4, r1
 8003950:	2001      	movs	r0, #1
 8003952:	e7a6      	b.n	80038a2 <_vfiprintf_r+0xfe>
 8003954:	2300      	movs	r3, #0
 8003956:	3401      	adds	r4, #1
 8003958:	9305      	str	r3, [sp, #20]
 800395a:	4619      	mov	r1, r3
 800395c:	f04f 0c0a 	mov.w	ip, #10
 8003960:	4620      	mov	r0, r4
 8003962:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003966:	3a30      	subs	r2, #48	; 0x30
 8003968:	2a09      	cmp	r2, #9
 800396a:	d903      	bls.n	8003974 <_vfiprintf_r+0x1d0>
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0c6      	beq.n	80038fe <_vfiprintf_r+0x15a>
 8003970:	9105      	str	r1, [sp, #20]
 8003972:	e7c4      	b.n	80038fe <_vfiprintf_r+0x15a>
 8003974:	fb0c 2101 	mla	r1, ip, r1, r2
 8003978:	4604      	mov	r4, r0
 800397a:	2301      	movs	r3, #1
 800397c:	e7f0      	b.n	8003960 <_vfiprintf_r+0x1bc>
 800397e:	ab03      	add	r3, sp, #12
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	462a      	mov	r2, r5
 8003984:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <_vfiprintf_r+0x22c>)
 8003986:	a904      	add	r1, sp, #16
 8003988:	4630      	mov	r0, r6
 800398a:	f3af 8000 	nop.w
 800398e:	4607      	mov	r7, r0
 8003990:	1c78      	adds	r0, r7, #1
 8003992:	d1d6      	bne.n	8003942 <_vfiprintf_r+0x19e>
 8003994:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003996:	07d9      	lsls	r1, r3, #31
 8003998:	d405      	bmi.n	80039a6 <_vfiprintf_r+0x202>
 800399a:	89ab      	ldrh	r3, [r5, #12]
 800399c:	059a      	lsls	r2, r3, #22
 800399e:	d402      	bmi.n	80039a6 <_vfiprintf_r+0x202>
 80039a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039a2:	f7ff fddc 	bl	800355e <__retarget_lock_release_recursive>
 80039a6:	89ab      	ldrh	r3, [r5, #12]
 80039a8:	065b      	lsls	r3, r3, #25
 80039aa:	f53f af1d 	bmi.w	80037e8 <_vfiprintf_r+0x44>
 80039ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039b0:	e71c      	b.n	80037ec <_vfiprintf_r+0x48>
 80039b2:	ab03      	add	r3, sp, #12
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	462a      	mov	r2, r5
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <_vfiprintf_r+0x22c>)
 80039ba:	a904      	add	r1, sp, #16
 80039bc:	4630      	mov	r0, r6
 80039be:	f000 f879 	bl	8003ab4 <_printf_i>
 80039c2:	e7e4      	b.n	800398e <_vfiprintf_r+0x1ea>
 80039c4:	08004108 	.word	0x08004108
 80039c8:	08004112 	.word	0x08004112
 80039cc:	00000000 	.word	0x00000000
 80039d0:	0800377f 	.word	0x0800377f
 80039d4:	0800410e 	.word	0x0800410e

080039d8 <_printf_common>:
 80039d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039dc:	4616      	mov	r6, r2
 80039de:	4699      	mov	r9, r3
 80039e0:	688a      	ldr	r2, [r1, #8]
 80039e2:	690b      	ldr	r3, [r1, #16]
 80039e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039e8:	4293      	cmp	r3, r2
 80039ea:	bfb8      	it	lt
 80039ec:	4613      	movlt	r3, r2
 80039ee:	6033      	str	r3, [r6, #0]
 80039f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039f4:	4607      	mov	r7, r0
 80039f6:	460c      	mov	r4, r1
 80039f8:	b10a      	cbz	r2, 80039fe <_printf_common+0x26>
 80039fa:	3301      	adds	r3, #1
 80039fc:	6033      	str	r3, [r6, #0]
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	0699      	lsls	r1, r3, #26
 8003a02:	bf42      	ittt	mi
 8003a04:	6833      	ldrmi	r3, [r6, #0]
 8003a06:	3302      	addmi	r3, #2
 8003a08:	6033      	strmi	r3, [r6, #0]
 8003a0a:	6825      	ldr	r5, [r4, #0]
 8003a0c:	f015 0506 	ands.w	r5, r5, #6
 8003a10:	d106      	bne.n	8003a20 <_printf_common+0x48>
 8003a12:	f104 0a19 	add.w	sl, r4, #25
 8003a16:	68e3      	ldr	r3, [r4, #12]
 8003a18:	6832      	ldr	r2, [r6, #0]
 8003a1a:	1a9b      	subs	r3, r3, r2
 8003a1c:	42ab      	cmp	r3, r5
 8003a1e:	dc26      	bgt.n	8003a6e <_printf_common+0x96>
 8003a20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a24:	1e13      	subs	r3, r2, #0
 8003a26:	6822      	ldr	r2, [r4, #0]
 8003a28:	bf18      	it	ne
 8003a2a:	2301      	movne	r3, #1
 8003a2c:	0692      	lsls	r2, r2, #26
 8003a2e:	d42b      	bmi.n	8003a88 <_printf_common+0xb0>
 8003a30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a34:	4649      	mov	r1, r9
 8003a36:	4638      	mov	r0, r7
 8003a38:	47c0      	blx	r8
 8003a3a:	3001      	adds	r0, #1
 8003a3c:	d01e      	beq.n	8003a7c <_printf_common+0xa4>
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	6922      	ldr	r2, [r4, #16]
 8003a42:	f003 0306 	and.w	r3, r3, #6
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	bf02      	ittt	eq
 8003a4a:	68e5      	ldreq	r5, [r4, #12]
 8003a4c:	6833      	ldreq	r3, [r6, #0]
 8003a4e:	1aed      	subeq	r5, r5, r3
 8003a50:	68a3      	ldr	r3, [r4, #8]
 8003a52:	bf0c      	ite	eq
 8003a54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a58:	2500      	movne	r5, #0
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	bfc4      	itt	gt
 8003a5e:	1a9b      	subgt	r3, r3, r2
 8003a60:	18ed      	addgt	r5, r5, r3
 8003a62:	2600      	movs	r6, #0
 8003a64:	341a      	adds	r4, #26
 8003a66:	42b5      	cmp	r5, r6
 8003a68:	d11a      	bne.n	8003aa0 <_printf_common+0xc8>
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	e008      	b.n	8003a80 <_printf_common+0xa8>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	4652      	mov	r2, sl
 8003a72:	4649      	mov	r1, r9
 8003a74:	4638      	mov	r0, r7
 8003a76:	47c0      	blx	r8
 8003a78:	3001      	adds	r0, #1
 8003a7a:	d103      	bne.n	8003a84 <_printf_common+0xac>
 8003a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a84:	3501      	adds	r5, #1
 8003a86:	e7c6      	b.n	8003a16 <_printf_common+0x3e>
 8003a88:	18e1      	adds	r1, r4, r3
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	2030      	movs	r0, #48	; 0x30
 8003a8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a92:	4422      	add	r2, r4
 8003a94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	e7c7      	b.n	8003a30 <_printf_common+0x58>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	4622      	mov	r2, r4
 8003aa4:	4649      	mov	r1, r9
 8003aa6:	4638      	mov	r0, r7
 8003aa8:	47c0      	blx	r8
 8003aaa:	3001      	adds	r0, #1
 8003aac:	d0e6      	beq.n	8003a7c <_printf_common+0xa4>
 8003aae:	3601      	adds	r6, #1
 8003ab0:	e7d9      	b.n	8003a66 <_printf_common+0x8e>
	...

08003ab4 <_printf_i>:
 8003ab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ab8:	7e0f      	ldrb	r7, [r1, #24]
 8003aba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003abc:	2f78      	cmp	r7, #120	; 0x78
 8003abe:	4691      	mov	r9, r2
 8003ac0:	4680      	mov	r8, r0
 8003ac2:	460c      	mov	r4, r1
 8003ac4:	469a      	mov	sl, r3
 8003ac6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003aca:	d807      	bhi.n	8003adc <_printf_i+0x28>
 8003acc:	2f62      	cmp	r7, #98	; 0x62
 8003ace:	d80a      	bhi.n	8003ae6 <_printf_i+0x32>
 8003ad0:	2f00      	cmp	r7, #0
 8003ad2:	f000 80d4 	beq.w	8003c7e <_printf_i+0x1ca>
 8003ad6:	2f58      	cmp	r7, #88	; 0x58
 8003ad8:	f000 80c0 	beq.w	8003c5c <_printf_i+0x1a8>
 8003adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ae0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ae4:	e03a      	b.n	8003b5c <_printf_i+0xa8>
 8003ae6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003aea:	2b15      	cmp	r3, #21
 8003aec:	d8f6      	bhi.n	8003adc <_printf_i+0x28>
 8003aee:	a101      	add	r1, pc, #4	; (adr r1, 8003af4 <_printf_i+0x40>)
 8003af0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003af4:	08003b4d 	.word	0x08003b4d
 8003af8:	08003b61 	.word	0x08003b61
 8003afc:	08003add 	.word	0x08003add
 8003b00:	08003add 	.word	0x08003add
 8003b04:	08003add 	.word	0x08003add
 8003b08:	08003add 	.word	0x08003add
 8003b0c:	08003b61 	.word	0x08003b61
 8003b10:	08003add 	.word	0x08003add
 8003b14:	08003add 	.word	0x08003add
 8003b18:	08003add 	.word	0x08003add
 8003b1c:	08003add 	.word	0x08003add
 8003b20:	08003c65 	.word	0x08003c65
 8003b24:	08003b8d 	.word	0x08003b8d
 8003b28:	08003c1f 	.word	0x08003c1f
 8003b2c:	08003add 	.word	0x08003add
 8003b30:	08003add 	.word	0x08003add
 8003b34:	08003c87 	.word	0x08003c87
 8003b38:	08003add 	.word	0x08003add
 8003b3c:	08003b8d 	.word	0x08003b8d
 8003b40:	08003add 	.word	0x08003add
 8003b44:	08003add 	.word	0x08003add
 8003b48:	08003c27 	.word	0x08003c27
 8003b4c:	682b      	ldr	r3, [r5, #0]
 8003b4e:	1d1a      	adds	r2, r3, #4
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	602a      	str	r2, [r5, #0]
 8003b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e09f      	b.n	8003ca0 <_printf_i+0x1ec>
 8003b60:	6820      	ldr	r0, [r4, #0]
 8003b62:	682b      	ldr	r3, [r5, #0]
 8003b64:	0607      	lsls	r7, r0, #24
 8003b66:	f103 0104 	add.w	r1, r3, #4
 8003b6a:	6029      	str	r1, [r5, #0]
 8003b6c:	d501      	bpl.n	8003b72 <_printf_i+0xbe>
 8003b6e:	681e      	ldr	r6, [r3, #0]
 8003b70:	e003      	b.n	8003b7a <_printf_i+0xc6>
 8003b72:	0646      	lsls	r6, r0, #25
 8003b74:	d5fb      	bpl.n	8003b6e <_printf_i+0xba>
 8003b76:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003b7a:	2e00      	cmp	r6, #0
 8003b7c:	da03      	bge.n	8003b86 <_printf_i+0xd2>
 8003b7e:	232d      	movs	r3, #45	; 0x2d
 8003b80:	4276      	negs	r6, r6
 8003b82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b86:	485a      	ldr	r0, [pc, #360]	; (8003cf0 <_printf_i+0x23c>)
 8003b88:	230a      	movs	r3, #10
 8003b8a:	e012      	b.n	8003bb2 <_printf_i+0xfe>
 8003b8c:	682b      	ldr	r3, [r5, #0]
 8003b8e:	6820      	ldr	r0, [r4, #0]
 8003b90:	1d19      	adds	r1, r3, #4
 8003b92:	6029      	str	r1, [r5, #0]
 8003b94:	0605      	lsls	r5, r0, #24
 8003b96:	d501      	bpl.n	8003b9c <_printf_i+0xe8>
 8003b98:	681e      	ldr	r6, [r3, #0]
 8003b9a:	e002      	b.n	8003ba2 <_printf_i+0xee>
 8003b9c:	0641      	lsls	r1, r0, #25
 8003b9e:	d5fb      	bpl.n	8003b98 <_printf_i+0xe4>
 8003ba0:	881e      	ldrh	r6, [r3, #0]
 8003ba2:	4853      	ldr	r0, [pc, #332]	; (8003cf0 <_printf_i+0x23c>)
 8003ba4:	2f6f      	cmp	r7, #111	; 0x6f
 8003ba6:	bf0c      	ite	eq
 8003ba8:	2308      	moveq	r3, #8
 8003baa:	230a      	movne	r3, #10
 8003bac:	2100      	movs	r1, #0
 8003bae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003bb2:	6865      	ldr	r5, [r4, #4]
 8003bb4:	60a5      	str	r5, [r4, #8]
 8003bb6:	2d00      	cmp	r5, #0
 8003bb8:	bfa2      	ittt	ge
 8003bba:	6821      	ldrge	r1, [r4, #0]
 8003bbc:	f021 0104 	bicge.w	r1, r1, #4
 8003bc0:	6021      	strge	r1, [r4, #0]
 8003bc2:	b90e      	cbnz	r6, 8003bc8 <_printf_i+0x114>
 8003bc4:	2d00      	cmp	r5, #0
 8003bc6:	d04b      	beq.n	8003c60 <_printf_i+0x1ac>
 8003bc8:	4615      	mov	r5, r2
 8003bca:	fbb6 f1f3 	udiv	r1, r6, r3
 8003bce:	fb03 6711 	mls	r7, r3, r1, r6
 8003bd2:	5dc7      	ldrb	r7, [r0, r7]
 8003bd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003bd8:	4637      	mov	r7, r6
 8003bda:	42bb      	cmp	r3, r7
 8003bdc:	460e      	mov	r6, r1
 8003bde:	d9f4      	bls.n	8003bca <_printf_i+0x116>
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d10b      	bne.n	8003bfc <_printf_i+0x148>
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	07de      	lsls	r6, r3, #31
 8003be8:	d508      	bpl.n	8003bfc <_printf_i+0x148>
 8003bea:	6923      	ldr	r3, [r4, #16]
 8003bec:	6861      	ldr	r1, [r4, #4]
 8003bee:	4299      	cmp	r1, r3
 8003bf0:	bfde      	ittt	le
 8003bf2:	2330      	movle	r3, #48	; 0x30
 8003bf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003bf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003bfc:	1b52      	subs	r2, r2, r5
 8003bfe:	6122      	str	r2, [r4, #16]
 8003c00:	f8cd a000 	str.w	sl, [sp]
 8003c04:	464b      	mov	r3, r9
 8003c06:	aa03      	add	r2, sp, #12
 8003c08:	4621      	mov	r1, r4
 8003c0a:	4640      	mov	r0, r8
 8003c0c:	f7ff fee4 	bl	80039d8 <_printf_common>
 8003c10:	3001      	adds	r0, #1
 8003c12:	d14a      	bne.n	8003caa <_printf_i+0x1f6>
 8003c14:	f04f 30ff 	mov.w	r0, #4294967295
 8003c18:	b004      	add	sp, #16
 8003c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	f043 0320 	orr.w	r3, r3, #32
 8003c24:	6023      	str	r3, [r4, #0]
 8003c26:	4833      	ldr	r0, [pc, #204]	; (8003cf4 <_printf_i+0x240>)
 8003c28:	2778      	movs	r7, #120	; 0x78
 8003c2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	6829      	ldr	r1, [r5, #0]
 8003c32:	061f      	lsls	r7, r3, #24
 8003c34:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c38:	d402      	bmi.n	8003c40 <_printf_i+0x18c>
 8003c3a:	065f      	lsls	r7, r3, #25
 8003c3c:	bf48      	it	mi
 8003c3e:	b2b6      	uxthmi	r6, r6
 8003c40:	07df      	lsls	r7, r3, #31
 8003c42:	bf48      	it	mi
 8003c44:	f043 0320 	orrmi.w	r3, r3, #32
 8003c48:	6029      	str	r1, [r5, #0]
 8003c4a:	bf48      	it	mi
 8003c4c:	6023      	strmi	r3, [r4, #0]
 8003c4e:	b91e      	cbnz	r6, 8003c58 <_printf_i+0x1a4>
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	f023 0320 	bic.w	r3, r3, #32
 8003c56:	6023      	str	r3, [r4, #0]
 8003c58:	2310      	movs	r3, #16
 8003c5a:	e7a7      	b.n	8003bac <_printf_i+0xf8>
 8003c5c:	4824      	ldr	r0, [pc, #144]	; (8003cf0 <_printf_i+0x23c>)
 8003c5e:	e7e4      	b.n	8003c2a <_printf_i+0x176>
 8003c60:	4615      	mov	r5, r2
 8003c62:	e7bd      	b.n	8003be0 <_printf_i+0x12c>
 8003c64:	682b      	ldr	r3, [r5, #0]
 8003c66:	6826      	ldr	r6, [r4, #0]
 8003c68:	6961      	ldr	r1, [r4, #20]
 8003c6a:	1d18      	adds	r0, r3, #4
 8003c6c:	6028      	str	r0, [r5, #0]
 8003c6e:	0635      	lsls	r5, r6, #24
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	d501      	bpl.n	8003c78 <_printf_i+0x1c4>
 8003c74:	6019      	str	r1, [r3, #0]
 8003c76:	e002      	b.n	8003c7e <_printf_i+0x1ca>
 8003c78:	0670      	lsls	r0, r6, #25
 8003c7a:	d5fb      	bpl.n	8003c74 <_printf_i+0x1c0>
 8003c7c:	8019      	strh	r1, [r3, #0]
 8003c7e:	2300      	movs	r3, #0
 8003c80:	6123      	str	r3, [r4, #16]
 8003c82:	4615      	mov	r5, r2
 8003c84:	e7bc      	b.n	8003c00 <_printf_i+0x14c>
 8003c86:	682b      	ldr	r3, [r5, #0]
 8003c88:	1d1a      	adds	r2, r3, #4
 8003c8a:	602a      	str	r2, [r5, #0]
 8003c8c:	681d      	ldr	r5, [r3, #0]
 8003c8e:	6862      	ldr	r2, [r4, #4]
 8003c90:	2100      	movs	r1, #0
 8003c92:	4628      	mov	r0, r5
 8003c94:	f7fc faa4 	bl	80001e0 <memchr>
 8003c98:	b108      	cbz	r0, 8003c9e <_printf_i+0x1ea>
 8003c9a:	1b40      	subs	r0, r0, r5
 8003c9c:	6060      	str	r0, [r4, #4]
 8003c9e:	6863      	ldr	r3, [r4, #4]
 8003ca0:	6123      	str	r3, [r4, #16]
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ca8:	e7aa      	b.n	8003c00 <_printf_i+0x14c>
 8003caa:	6923      	ldr	r3, [r4, #16]
 8003cac:	462a      	mov	r2, r5
 8003cae:	4649      	mov	r1, r9
 8003cb0:	4640      	mov	r0, r8
 8003cb2:	47d0      	blx	sl
 8003cb4:	3001      	adds	r0, #1
 8003cb6:	d0ad      	beq.n	8003c14 <_printf_i+0x160>
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	079b      	lsls	r3, r3, #30
 8003cbc:	d413      	bmi.n	8003ce6 <_printf_i+0x232>
 8003cbe:	68e0      	ldr	r0, [r4, #12]
 8003cc0:	9b03      	ldr	r3, [sp, #12]
 8003cc2:	4298      	cmp	r0, r3
 8003cc4:	bfb8      	it	lt
 8003cc6:	4618      	movlt	r0, r3
 8003cc8:	e7a6      	b.n	8003c18 <_printf_i+0x164>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	4632      	mov	r2, r6
 8003cce:	4649      	mov	r1, r9
 8003cd0:	4640      	mov	r0, r8
 8003cd2:	47d0      	blx	sl
 8003cd4:	3001      	adds	r0, #1
 8003cd6:	d09d      	beq.n	8003c14 <_printf_i+0x160>
 8003cd8:	3501      	adds	r5, #1
 8003cda:	68e3      	ldr	r3, [r4, #12]
 8003cdc:	9903      	ldr	r1, [sp, #12]
 8003cde:	1a5b      	subs	r3, r3, r1
 8003ce0:	42ab      	cmp	r3, r5
 8003ce2:	dcf2      	bgt.n	8003cca <_printf_i+0x216>
 8003ce4:	e7eb      	b.n	8003cbe <_printf_i+0x20a>
 8003ce6:	2500      	movs	r5, #0
 8003ce8:	f104 0619 	add.w	r6, r4, #25
 8003cec:	e7f5      	b.n	8003cda <_printf_i+0x226>
 8003cee:	bf00      	nop
 8003cf0:	08004119 	.word	0x08004119
 8003cf4:	0800412a 	.word	0x0800412a

08003cf8 <__sflush_r>:
 8003cf8:	898a      	ldrh	r2, [r1, #12]
 8003cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cfe:	4605      	mov	r5, r0
 8003d00:	0710      	lsls	r0, r2, #28
 8003d02:	460c      	mov	r4, r1
 8003d04:	d458      	bmi.n	8003db8 <__sflush_r+0xc0>
 8003d06:	684b      	ldr	r3, [r1, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	dc05      	bgt.n	8003d18 <__sflush_r+0x20>
 8003d0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	dc02      	bgt.n	8003d18 <__sflush_r+0x20>
 8003d12:	2000      	movs	r0, #0
 8003d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d1a:	2e00      	cmp	r6, #0
 8003d1c:	d0f9      	beq.n	8003d12 <__sflush_r+0x1a>
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003d24:	682f      	ldr	r7, [r5, #0]
 8003d26:	6a21      	ldr	r1, [r4, #32]
 8003d28:	602b      	str	r3, [r5, #0]
 8003d2a:	d032      	beq.n	8003d92 <__sflush_r+0x9a>
 8003d2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003d2e:	89a3      	ldrh	r3, [r4, #12]
 8003d30:	075a      	lsls	r2, r3, #29
 8003d32:	d505      	bpl.n	8003d40 <__sflush_r+0x48>
 8003d34:	6863      	ldr	r3, [r4, #4]
 8003d36:	1ac0      	subs	r0, r0, r3
 8003d38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d3a:	b10b      	cbz	r3, 8003d40 <__sflush_r+0x48>
 8003d3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d3e:	1ac0      	subs	r0, r0, r3
 8003d40:	2300      	movs	r3, #0
 8003d42:	4602      	mov	r2, r0
 8003d44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d46:	6a21      	ldr	r1, [r4, #32]
 8003d48:	4628      	mov	r0, r5
 8003d4a:	47b0      	blx	r6
 8003d4c:	1c43      	adds	r3, r0, #1
 8003d4e:	89a3      	ldrh	r3, [r4, #12]
 8003d50:	d106      	bne.n	8003d60 <__sflush_r+0x68>
 8003d52:	6829      	ldr	r1, [r5, #0]
 8003d54:	291d      	cmp	r1, #29
 8003d56:	d82b      	bhi.n	8003db0 <__sflush_r+0xb8>
 8003d58:	4a29      	ldr	r2, [pc, #164]	; (8003e00 <__sflush_r+0x108>)
 8003d5a:	410a      	asrs	r2, r1
 8003d5c:	07d6      	lsls	r6, r2, #31
 8003d5e:	d427      	bmi.n	8003db0 <__sflush_r+0xb8>
 8003d60:	2200      	movs	r2, #0
 8003d62:	6062      	str	r2, [r4, #4]
 8003d64:	04d9      	lsls	r1, r3, #19
 8003d66:	6922      	ldr	r2, [r4, #16]
 8003d68:	6022      	str	r2, [r4, #0]
 8003d6a:	d504      	bpl.n	8003d76 <__sflush_r+0x7e>
 8003d6c:	1c42      	adds	r2, r0, #1
 8003d6e:	d101      	bne.n	8003d74 <__sflush_r+0x7c>
 8003d70:	682b      	ldr	r3, [r5, #0]
 8003d72:	b903      	cbnz	r3, 8003d76 <__sflush_r+0x7e>
 8003d74:	6560      	str	r0, [r4, #84]	; 0x54
 8003d76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d78:	602f      	str	r7, [r5, #0]
 8003d7a:	2900      	cmp	r1, #0
 8003d7c:	d0c9      	beq.n	8003d12 <__sflush_r+0x1a>
 8003d7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d82:	4299      	cmp	r1, r3
 8003d84:	d002      	beq.n	8003d8c <__sflush_r+0x94>
 8003d86:	4628      	mov	r0, r5
 8003d88:	f7ff fbea 	bl	8003560 <_free_r>
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	6360      	str	r0, [r4, #52]	; 0x34
 8003d90:	e7c0      	b.n	8003d14 <__sflush_r+0x1c>
 8003d92:	2301      	movs	r3, #1
 8003d94:	4628      	mov	r0, r5
 8003d96:	47b0      	blx	r6
 8003d98:	1c41      	adds	r1, r0, #1
 8003d9a:	d1c8      	bne.n	8003d2e <__sflush_r+0x36>
 8003d9c:	682b      	ldr	r3, [r5, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0c5      	beq.n	8003d2e <__sflush_r+0x36>
 8003da2:	2b1d      	cmp	r3, #29
 8003da4:	d001      	beq.n	8003daa <__sflush_r+0xb2>
 8003da6:	2b16      	cmp	r3, #22
 8003da8:	d101      	bne.n	8003dae <__sflush_r+0xb6>
 8003daa:	602f      	str	r7, [r5, #0]
 8003dac:	e7b1      	b.n	8003d12 <__sflush_r+0x1a>
 8003dae:	89a3      	ldrh	r3, [r4, #12]
 8003db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003db4:	81a3      	strh	r3, [r4, #12]
 8003db6:	e7ad      	b.n	8003d14 <__sflush_r+0x1c>
 8003db8:	690f      	ldr	r7, [r1, #16]
 8003dba:	2f00      	cmp	r7, #0
 8003dbc:	d0a9      	beq.n	8003d12 <__sflush_r+0x1a>
 8003dbe:	0793      	lsls	r3, r2, #30
 8003dc0:	680e      	ldr	r6, [r1, #0]
 8003dc2:	bf08      	it	eq
 8003dc4:	694b      	ldreq	r3, [r1, #20]
 8003dc6:	600f      	str	r7, [r1, #0]
 8003dc8:	bf18      	it	ne
 8003dca:	2300      	movne	r3, #0
 8003dcc:	eba6 0807 	sub.w	r8, r6, r7
 8003dd0:	608b      	str	r3, [r1, #8]
 8003dd2:	f1b8 0f00 	cmp.w	r8, #0
 8003dd6:	dd9c      	ble.n	8003d12 <__sflush_r+0x1a>
 8003dd8:	6a21      	ldr	r1, [r4, #32]
 8003dda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ddc:	4643      	mov	r3, r8
 8003dde:	463a      	mov	r2, r7
 8003de0:	4628      	mov	r0, r5
 8003de2:	47b0      	blx	r6
 8003de4:	2800      	cmp	r0, #0
 8003de6:	dc06      	bgt.n	8003df6 <__sflush_r+0xfe>
 8003de8:	89a3      	ldrh	r3, [r4, #12]
 8003dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dee:	81a3      	strh	r3, [r4, #12]
 8003df0:	f04f 30ff 	mov.w	r0, #4294967295
 8003df4:	e78e      	b.n	8003d14 <__sflush_r+0x1c>
 8003df6:	4407      	add	r7, r0
 8003df8:	eba8 0800 	sub.w	r8, r8, r0
 8003dfc:	e7e9      	b.n	8003dd2 <__sflush_r+0xda>
 8003dfe:	bf00      	nop
 8003e00:	dfbffffe 	.word	0xdfbffffe

08003e04 <_fflush_r>:
 8003e04:	b538      	push	{r3, r4, r5, lr}
 8003e06:	690b      	ldr	r3, [r1, #16]
 8003e08:	4605      	mov	r5, r0
 8003e0a:	460c      	mov	r4, r1
 8003e0c:	b913      	cbnz	r3, 8003e14 <_fflush_r+0x10>
 8003e0e:	2500      	movs	r5, #0
 8003e10:	4628      	mov	r0, r5
 8003e12:	bd38      	pop	{r3, r4, r5, pc}
 8003e14:	b118      	cbz	r0, 8003e1e <_fflush_r+0x1a>
 8003e16:	6a03      	ldr	r3, [r0, #32]
 8003e18:	b90b      	cbnz	r3, 8003e1e <_fflush_r+0x1a>
 8003e1a:	f7ff fa9b 	bl	8003354 <__sinit>
 8003e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f3      	beq.n	8003e0e <_fflush_r+0xa>
 8003e26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003e28:	07d0      	lsls	r0, r2, #31
 8003e2a:	d404      	bmi.n	8003e36 <_fflush_r+0x32>
 8003e2c:	0599      	lsls	r1, r3, #22
 8003e2e:	d402      	bmi.n	8003e36 <_fflush_r+0x32>
 8003e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e32:	f7ff fb93 	bl	800355c <__retarget_lock_acquire_recursive>
 8003e36:	4628      	mov	r0, r5
 8003e38:	4621      	mov	r1, r4
 8003e3a:	f7ff ff5d 	bl	8003cf8 <__sflush_r>
 8003e3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e40:	07da      	lsls	r2, r3, #31
 8003e42:	4605      	mov	r5, r0
 8003e44:	d4e4      	bmi.n	8003e10 <_fflush_r+0xc>
 8003e46:	89a3      	ldrh	r3, [r4, #12]
 8003e48:	059b      	lsls	r3, r3, #22
 8003e4a:	d4e1      	bmi.n	8003e10 <_fflush_r+0xc>
 8003e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e4e:	f7ff fb86 	bl	800355e <__retarget_lock_release_recursive>
 8003e52:	e7dd      	b.n	8003e10 <_fflush_r+0xc>

08003e54 <__swbuf_r>:
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e56:	460e      	mov	r6, r1
 8003e58:	4614      	mov	r4, r2
 8003e5a:	4605      	mov	r5, r0
 8003e5c:	b118      	cbz	r0, 8003e66 <__swbuf_r+0x12>
 8003e5e:	6a03      	ldr	r3, [r0, #32]
 8003e60:	b90b      	cbnz	r3, 8003e66 <__swbuf_r+0x12>
 8003e62:	f7ff fa77 	bl	8003354 <__sinit>
 8003e66:	69a3      	ldr	r3, [r4, #24]
 8003e68:	60a3      	str	r3, [r4, #8]
 8003e6a:	89a3      	ldrh	r3, [r4, #12]
 8003e6c:	071a      	lsls	r2, r3, #28
 8003e6e:	d525      	bpl.n	8003ebc <__swbuf_r+0x68>
 8003e70:	6923      	ldr	r3, [r4, #16]
 8003e72:	b31b      	cbz	r3, 8003ebc <__swbuf_r+0x68>
 8003e74:	6823      	ldr	r3, [r4, #0]
 8003e76:	6922      	ldr	r2, [r4, #16]
 8003e78:	1a98      	subs	r0, r3, r2
 8003e7a:	6963      	ldr	r3, [r4, #20]
 8003e7c:	b2f6      	uxtb	r6, r6
 8003e7e:	4283      	cmp	r3, r0
 8003e80:	4637      	mov	r7, r6
 8003e82:	dc04      	bgt.n	8003e8e <__swbuf_r+0x3a>
 8003e84:	4621      	mov	r1, r4
 8003e86:	4628      	mov	r0, r5
 8003e88:	f7ff ffbc 	bl	8003e04 <_fflush_r>
 8003e8c:	b9e0      	cbnz	r0, 8003ec8 <__swbuf_r+0x74>
 8003e8e:	68a3      	ldr	r3, [r4, #8]
 8003e90:	3b01      	subs	r3, #1
 8003e92:	60a3      	str	r3, [r4, #8]
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	6022      	str	r2, [r4, #0]
 8003e9a:	701e      	strb	r6, [r3, #0]
 8003e9c:	6962      	ldr	r2, [r4, #20]
 8003e9e:	1c43      	adds	r3, r0, #1
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d004      	beq.n	8003eae <__swbuf_r+0x5a>
 8003ea4:	89a3      	ldrh	r3, [r4, #12]
 8003ea6:	07db      	lsls	r3, r3, #31
 8003ea8:	d506      	bpl.n	8003eb8 <__swbuf_r+0x64>
 8003eaa:	2e0a      	cmp	r6, #10
 8003eac:	d104      	bne.n	8003eb8 <__swbuf_r+0x64>
 8003eae:	4621      	mov	r1, r4
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	f7ff ffa7 	bl	8003e04 <_fflush_r>
 8003eb6:	b938      	cbnz	r0, 8003ec8 <__swbuf_r+0x74>
 8003eb8:	4638      	mov	r0, r7
 8003eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ebc:	4621      	mov	r1, r4
 8003ebe:	4628      	mov	r0, r5
 8003ec0:	f000 f806 	bl	8003ed0 <__swsetup_r>
 8003ec4:	2800      	cmp	r0, #0
 8003ec6:	d0d5      	beq.n	8003e74 <__swbuf_r+0x20>
 8003ec8:	f04f 37ff 	mov.w	r7, #4294967295
 8003ecc:	e7f4      	b.n	8003eb8 <__swbuf_r+0x64>
	...

08003ed0 <__swsetup_r>:
 8003ed0:	b538      	push	{r3, r4, r5, lr}
 8003ed2:	4b2a      	ldr	r3, [pc, #168]	; (8003f7c <__swsetup_r+0xac>)
 8003ed4:	4605      	mov	r5, r0
 8003ed6:	6818      	ldr	r0, [r3, #0]
 8003ed8:	460c      	mov	r4, r1
 8003eda:	b118      	cbz	r0, 8003ee4 <__swsetup_r+0x14>
 8003edc:	6a03      	ldr	r3, [r0, #32]
 8003ede:	b90b      	cbnz	r3, 8003ee4 <__swsetup_r+0x14>
 8003ee0:	f7ff fa38 	bl	8003354 <__sinit>
 8003ee4:	89a3      	ldrh	r3, [r4, #12]
 8003ee6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003eea:	0718      	lsls	r0, r3, #28
 8003eec:	d422      	bmi.n	8003f34 <__swsetup_r+0x64>
 8003eee:	06d9      	lsls	r1, r3, #27
 8003ef0:	d407      	bmi.n	8003f02 <__swsetup_r+0x32>
 8003ef2:	2309      	movs	r3, #9
 8003ef4:	602b      	str	r3, [r5, #0]
 8003ef6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003efa:	81a3      	strh	r3, [r4, #12]
 8003efc:	f04f 30ff 	mov.w	r0, #4294967295
 8003f00:	e034      	b.n	8003f6c <__swsetup_r+0x9c>
 8003f02:	0758      	lsls	r0, r3, #29
 8003f04:	d512      	bpl.n	8003f2c <__swsetup_r+0x5c>
 8003f06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f08:	b141      	cbz	r1, 8003f1c <__swsetup_r+0x4c>
 8003f0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f0e:	4299      	cmp	r1, r3
 8003f10:	d002      	beq.n	8003f18 <__swsetup_r+0x48>
 8003f12:	4628      	mov	r0, r5
 8003f14:	f7ff fb24 	bl	8003560 <_free_r>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	6363      	str	r3, [r4, #52]	; 0x34
 8003f1c:	89a3      	ldrh	r3, [r4, #12]
 8003f1e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f22:	81a3      	strh	r3, [r4, #12]
 8003f24:	2300      	movs	r3, #0
 8003f26:	6063      	str	r3, [r4, #4]
 8003f28:	6923      	ldr	r3, [r4, #16]
 8003f2a:	6023      	str	r3, [r4, #0]
 8003f2c:	89a3      	ldrh	r3, [r4, #12]
 8003f2e:	f043 0308 	orr.w	r3, r3, #8
 8003f32:	81a3      	strh	r3, [r4, #12]
 8003f34:	6923      	ldr	r3, [r4, #16]
 8003f36:	b94b      	cbnz	r3, 8003f4c <__swsetup_r+0x7c>
 8003f38:	89a3      	ldrh	r3, [r4, #12]
 8003f3a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f42:	d003      	beq.n	8003f4c <__swsetup_r+0x7c>
 8003f44:	4621      	mov	r1, r4
 8003f46:	4628      	mov	r0, r5
 8003f48:	f000 f850 	bl	8003fec <__smakebuf_r>
 8003f4c:	89a0      	ldrh	r0, [r4, #12]
 8003f4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f52:	f010 0301 	ands.w	r3, r0, #1
 8003f56:	d00a      	beq.n	8003f6e <__swsetup_r+0x9e>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60a3      	str	r3, [r4, #8]
 8003f5c:	6963      	ldr	r3, [r4, #20]
 8003f5e:	425b      	negs	r3, r3
 8003f60:	61a3      	str	r3, [r4, #24]
 8003f62:	6923      	ldr	r3, [r4, #16]
 8003f64:	b943      	cbnz	r3, 8003f78 <__swsetup_r+0xa8>
 8003f66:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f6a:	d1c4      	bne.n	8003ef6 <__swsetup_r+0x26>
 8003f6c:	bd38      	pop	{r3, r4, r5, pc}
 8003f6e:	0781      	lsls	r1, r0, #30
 8003f70:	bf58      	it	pl
 8003f72:	6963      	ldrpl	r3, [r4, #20]
 8003f74:	60a3      	str	r3, [r4, #8]
 8003f76:	e7f4      	b.n	8003f62 <__swsetup_r+0x92>
 8003f78:	2000      	movs	r0, #0
 8003f7a:	e7f7      	b.n	8003f6c <__swsetup_r+0x9c>
 8003f7c:	20000064 	.word	0x20000064

08003f80 <_sbrk_r>:
 8003f80:	b538      	push	{r3, r4, r5, lr}
 8003f82:	4d06      	ldr	r5, [pc, #24]	; (8003f9c <_sbrk_r+0x1c>)
 8003f84:	2300      	movs	r3, #0
 8003f86:	4604      	mov	r4, r0
 8003f88:	4608      	mov	r0, r1
 8003f8a:	602b      	str	r3, [r5, #0]
 8003f8c:	f7fc fd8c 	bl	8000aa8 <_sbrk>
 8003f90:	1c43      	adds	r3, r0, #1
 8003f92:	d102      	bne.n	8003f9a <_sbrk_r+0x1a>
 8003f94:	682b      	ldr	r3, [r5, #0]
 8003f96:	b103      	cbz	r3, 8003f9a <_sbrk_r+0x1a>
 8003f98:	6023      	str	r3, [r4, #0]
 8003f9a:	bd38      	pop	{r3, r4, r5, pc}
 8003f9c:	200002b8 	.word	0x200002b8

08003fa0 <__swhatbuf_r>:
 8003fa0:	b570      	push	{r4, r5, r6, lr}
 8003fa2:	460c      	mov	r4, r1
 8003fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fa8:	2900      	cmp	r1, #0
 8003faa:	b096      	sub	sp, #88	; 0x58
 8003fac:	4615      	mov	r5, r2
 8003fae:	461e      	mov	r6, r3
 8003fb0:	da0d      	bge.n	8003fce <__swhatbuf_r+0x2e>
 8003fb2:	89a3      	ldrh	r3, [r4, #12]
 8003fb4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003fb8:	f04f 0100 	mov.w	r1, #0
 8003fbc:	bf0c      	ite	eq
 8003fbe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003fc2:	2340      	movne	r3, #64	; 0x40
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	6031      	str	r1, [r6, #0]
 8003fc8:	602b      	str	r3, [r5, #0]
 8003fca:	b016      	add	sp, #88	; 0x58
 8003fcc:	bd70      	pop	{r4, r5, r6, pc}
 8003fce:	466a      	mov	r2, sp
 8003fd0:	f000 f848 	bl	8004064 <_fstat_r>
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	dbec      	blt.n	8003fb2 <__swhatbuf_r+0x12>
 8003fd8:	9901      	ldr	r1, [sp, #4]
 8003fda:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003fde:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003fe2:	4259      	negs	r1, r3
 8003fe4:	4159      	adcs	r1, r3
 8003fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fea:	e7eb      	b.n	8003fc4 <__swhatbuf_r+0x24>

08003fec <__smakebuf_r>:
 8003fec:	898b      	ldrh	r3, [r1, #12]
 8003fee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ff0:	079d      	lsls	r5, r3, #30
 8003ff2:	4606      	mov	r6, r0
 8003ff4:	460c      	mov	r4, r1
 8003ff6:	d507      	bpl.n	8004008 <__smakebuf_r+0x1c>
 8003ff8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003ffc:	6023      	str	r3, [r4, #0]
 8003ffe:	6123      	str	r3, [r4, #16]
 8004000:	2301      	movs	r3, #1
 8004002:	6163      	str	r3, [r4, #20]
 8004004:	b002      	add	sp, #8
 8004006:	bd70      	pop	{r4, r5, r6, pc}
 8004008:	ab01      	add	r3, sp, #4
 800400a:	466a      	mov	r2, sp
 800400c:	f7ff ffc8 	bl	8003fa0 <__swhatbuf_r>
 8004010:	9900      	ldr	r1, [sp, #0]
 8004012:	4605      	mov	r5, r0
 8004014:	4630      	mov	r0, r6
 8004016:	f7ff fb0f 	bl	8003638 <_malloc_r>
 800401a:	b948      	cbnz	r0, 8004030 <__smakebuf_r+0x44>
 800401c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004020:	059a      	lsls	r2, r3, #22
 8004022:	d4ef      	bmi.n	8004004 <__smakebuf_r+0x18>
 8004024:	f023 0303 	bic.w	r3, r3, #3
 8004028:	f043 0302 	orr.w	r3, r3, #2
 800402c:	81a3      	strh	r3, [r4, #12]
 800402e:	e7e3      	b.n	8003ff8 <__smakebuf_r+0xc>
 8004030:	89a3      	ldrh	r3, [r4, #12]
 8004032:	6020      	str	r0, [r4, #0]
 8004034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004038:	81a3      	strh	r3, [r4, #12]
 800403a:	9b00      	ldr	r3, [sp, #0]
 800403c:	6163      	str	r3, [r4, #20]
 800403e:	9b01      	ldr	r3, [sp, #4]
 8004040:	6120      	str	r0, [r4, #16]
 8004042:	b15b      	cbz	r3, 800405c <__smakebuf_r+0x70>
 8004044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004048:	4630      	mov	r0, r6
 800404a:	f000 f81d 	bl	8004088 <_isatty_r>
 800404e:	b128      	cbz	r0, 800405c <__smakebuf_r+0x70>
 8004050:	89a3      	ldrh	r3, [r4, #12]
 8004052:	f023 0303 	bic.w	r3, r3, #3
 8004056:	f043 0301 	orr.w	r3, r3, #1
 800405a:	81a3      	strh	r3, [r4, #12]
 800405c:	89a3      	ldrh	r3, [r4, #12]
 800405e:	431d      	orrs	r5, r3
 8004060:	81a5      	strh	r5, [r4, #12]
 8004062:	e7cf      	b.n	8004004 <__smakebuf_r+0x18>

08004064 <_fstat_r>:
 8004064:	b538      	push	{r3, r4, r5, lr}
 8004066:	4d07      	ldr	r5, [pc, #28]	; (8004084 <_fstat_r+0x20>)
 8004068:	2300      	movs	r3, #0
 800406a:	4604      	mov	r4, r0
 800406c:	4608      	mov	r0, r1
 800406e:	4611      	mov	r1, r2
 8004070:	602b      	str	r3, [r5, #0]
 8004072:	f7fc fcf0 	bl	8000a56 <_fstat>
 8004076:	1c43      	adds	r3, r0, #1
 8004078:	d102      	bne.n	8004080 <_fstat_r+0x1c>
 800407a:	682b      	ldr	r3, [r5, #0]
 800407c:	b103      	cbz	r3, 8004080 <_fstat_r+0x1c>
 800407e:	6023      	str	r3, [r4, #0]
 8004080:	bd38      	pop	{r3, r4, r5, pc}
 8004082:	bf00      	nop
 8004084:	200002b8 	.word	0x200002b8

08004088 <_isatty_r>:
 8004088:	b538      	push	{r3, r4, r5, lr}
 800408a:	4d06      	ldr	r5, [pc, #24]	; (80040a4 <_isatty_r+0x1c>)
 800408c:	2300      	movs	r3, #0
 800408e:	4604      	mov	r4, r0
 8004090:	4608      	mov	r0, r1
 8004092:	602b      	str	r3, [r5, #0]
 8004094:	f7fc fcef 	bl	8000a76 <_isatty>
 8004098:	1c43      	adds	r3, r0, #1
 800409a:	d102      	bne.n	80040a2 <_isatty_r+0x1a>
 800409c:	682b      	ldr	r3, [r5, #0]
 800409e:	b103      	cbz	r3, 80040a2 <_isatty_r+0x1a>
 80040a0:	6023      	str	r3, [r4, #0]
 80040a2:	bd38      	pop	{r3, r4, r5, pc}
 80040a4:	200002b8 	.word	0x200002b8

080040a8 <_init>:
 80040a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040aa:	bf00      	nop
 80040ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ae:	bc08      	pop	{r3}
 80040b0:	469e      	mov	lr, r3
 80040b2:	4770      	bx	lr

080040b4 <_fini>:
 80040b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b6:	bf00      	nop
 80040b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ba:	bc08      	pop	{r3}
 80040bc:	469e      	mov	lr, r3
 80040be:	4770      	bx	lr
